// Generated from ResolveParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ResolveParserListener = require('./ResolveParserListener').ResolveParserListener;
var grammarFileName = "ResolveParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00b3\u07dd\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0005\u0002\u0142\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u0148\n\u0003\u0003\u0003\u0005\u0003\u014b\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0006\u0004",
    "\u0152\n\u0004\r\u0004\u000e\u0004\u0153\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u015a\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0160\n\u0006\u0003\u0006\u0005",
    "\u0006\u0163\n\u0006\u0003\u0006\u0005\u0006\u0166\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0006\u0007",
    "\u016e\n\u0007\r\u0007\u000e\u0007\u016f\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u0177\n\b\u0003\t\u0003\t\u0003\t\u0003\n\u0005\n",
    "\u017d\n\n\u0003\n\u0003\n\u0003\n\u0005\n\u0182\n\n\u0003\n\u0003\n",
    "\u0005\n\u0186\n\n\u0003\n\u0005\n\u0189\n\n\u0003\n\u0005\n\u018c\n",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0006\u000b\u0194",
    "\n\u000b\r\u000b\u000e\u000b\u0195\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u019e\n\f\u0003\r\u0003\r\u0003\r\u0005\r\u01a3\n",
    "\r\u0003\r\u0003\r\u0005\r\u01a7\n\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0007\r\u01ae\n\r\f\r\u000e\r\u01b1\u000b\r\u0003\r\u0003\r",
    "\u0005\r\u01b5\n\r\u0003\r\u0005\r\u01b8\n\r\u0003\r\u0005\r\u01bb\n",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0006\u000e\u01c3",
    "\n\u000e\r\u000e\u000e\u000e\u01c4\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u01ca\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u01cf\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u01d5\n\u0010\u0003\u0010\u0005\u0010\u01d8\n\u0010\u0003",
    "\u0010\u0005\u0010\u01db\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0006\u0011\u01e3\n\u0011\r\u0011",
    "\u000e\u0011\u01e4\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01ea",
    "\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01ef\n\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u01f3\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01fb",
    "\n\u0013\u0003\u0013\u0005\u0013\u01fe\n\u0013\u0003\u0013\u0005\u0013",
    "\u0201\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0006\u0014\u0209\n\u0014\r\u0014\u000e\u0014\u020a",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0213\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u0218\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u0220\n\u0016\u0003\u0016\u0005",
    "\u0016\u0223\n\u0016\u0003\u0016\u0005\u0016\u0226\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0006\u0017",
    "\u022e\n\u0017\r\u0017\u000e\u0017\u022f\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0237\n\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u023c\n\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0248\n\u0019\u0003\u0019",
    "\u0005\u0019\u024b\n\u0019\u0003\u0019\u0005\u0019\u024e\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0006",
    "\u001a\u0256\n\u001a\r\u001a\u000e\u001a\u0257\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u025d\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0007\u001c\u0263\n\u001c\f\u001c\u000e\u001c\u0266",
    "\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0270\n\u001e\f\u001e",
    "\u000e\u001e\u0273\u000b\u001e\u0005\u001e\u0275\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f",
    "\u027d\n\u001f\f\u001f\u000e\u001f\u0280\u000b\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0289\n \u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003$\u0003$",
    "\u0003%\u0003%\u0003%\u0003%\u0005%\u029a\n%\u0003%\u0003%\u0003&\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0005(\u02a5\n(\u0003(\u0003",
    "(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0006*\u02b4\n*\r*\u000e*\u02b5\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0007+\u02c6\n+\f+\u000e+\u02c9\u000b+\u0003+\u0005+\u02cc\n+\u0003",
    "+\u0005+\u02cf\n+\u0003+\u0005+\u02d2\n+\u0003+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u02dd\n,\u0003,\u0003,\u0003",
    ",\u0005,\u02e2\n,\u0003,\u0003,\u0005,\u02e6\n,\u0003,\u0005,\u02e9",
    "\n,\u0003,\u0005,\u02ec\n,\u0003,\u0005,\u02ef\n,\u0003,\u0003,\u0003",
    ",\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u02fa\n-\u0003-\u0003",
    "-\u0003-\u0005-\u02ff\n-\u0003-\u0003-\u0005-\u0303\n-\u0003-\u0005",
    "-\u0306\n-\u0003-\u0005-\u0309\n-\u0003-\u0003-\u0003-\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0317\n.\u0003",
    ".\u0005.\u031a\n.\u0003.\u0005.\u031d\n.\u0003.\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0005/\u0327\n/\u0003/\u0003/\u00030\u0003",
    "0\u00060\u032d\n0\r0\u000e0\u032e\u00030\u00050\u0332\n0\u00030\u0005",
    "0\u0335\n0\u00030\u00030\u00030\u00031\u00031\u00071\u033c\n1\f1\u000e",
    "1\u033f\u000b1\u00031\u00051\u0342\n1\u00031\u00051\u0345\n1\u00031",
    "\u00051\u0348\n1\u00031\u00031\u00031\u00032\u00032\u00052\u034f\n2",
    "\u00032\u00052\u0352\n2\u00033\u00033\u00053\u0356\n3\u00033\u00053",
    "\u0359\n3\u00034\u00034\u00054\u035d\n4\u00034\u00074\u0360\n4\f4\u000e",
    "4\u0363\u000b4\u00034\u00074\u0366\n4\f4\u000e4\u0369\u000b4\u00034",
    "\u00074\u036c\n4\f4\u000e4\u036f\u000b4\u00034\u00034\u00034\u00035",
    "\u00035\u00055\u0376\n5\u00035\u00075\u0379\n5\f5\u000e5\u037c\u000b",
    "5\u00035\u00075\u037f\n5\f5\u000e5\u0382\u000b5\u00035\u00075\u0385",
    "\n5\f5\u000e5\u0388\u000b5\u00035\u00035\u00035\u00036\u00036\u0005",
    "6\u038f\n6\u00036\u00056\u0392\n6\u00036\u00056\u0395\n6\u00036\u0007",
    "6\u0398\n6\f6\u000e6\u039b\u000b6\u00036\u00076\u039e\n6\f6\u000e6\u03a1",
    "\u000b6\u00036\u00076\u03a4\n6\f6\u000e6\u03a7\u000b6\u00036\u00036",
    "\u00036\u00037\u00037\u00057\u03ae\n7\u00037\u00057\u03b1\n7\u00037",
    "\u00057\u03b4\n7\u00037\u00077\u03b7\n7\f7\u000e7\u03ba\u000b7\u0003",
    "7\u00077\u03bd\n7\f7\u000e7\u03c0\u000b7\u00037\u00077\u03c3\n7\f7\u000e",
    "7\u03c6\u000b7\u00037\u00037\u00037\u00038\u00038\u00058\u03cd\n8\u0003",
    "8\u00058\u03d0\n8\u00039\u00039\u00059\u03d4\n9\u00039\u00059\u03d7",
    "\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u03de\n:\u0003:\u0003",
    ":\u0005:\u03e2\n:\u0003:\u0007:\u03e5\n:\f:\u000e:\u03e8\u000b:\u0003",
    ":\u0007:\u03eb\n:\f:\u000e:\u03ee\u000b:\u0003:\u0007:\u03f1\n:\f:\u000e",
    ":\u03f4\u000b:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u0400\n;\u0003;\u0003;\u0005;\u0404\n;\u0003",
    ";\u0003;\u0007;\u0408\n;\f;\u000e;\u040b\u000b;\u0003;\u0007;\u040e",
    "\n;\f;\u000e;\u0411\u000b;\u0003;\u0007;\u0414\n;\f;\u000e;\u0417\u000b",
    ";\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0007<\u0420\n<\f",
    "<\u000e<\u0423\u000b<\u0003<\u0007<\u0426\n<\f<\u000e<\u0429\u000b<",
    "\u0003<\u0007<\u042c\n<\f<\u000e<\u042f\u000b<\u0003<\u0003<\u0003<",
    "\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u043a\n=\f=\u000e",
    "=\u043d\u000b=\u0003=\u0007=\u0440\n=\f=\u000e=\u0443\u000b=\u0003=",
    "\u0007=\u0446\n=\f=\u000e=\u0449\u000b=\u0003=\u0003=\u0003=\u0003=",
    "\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0454\n>\u0003>\u0003>\u0005",
    ">\u0458\n>\u0003>\u0005>\u045b\n>\u0003>\u0005>\u045e\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u0465\n?\u0003?\u0003?\u0005?\u0469\n",
    "?\u0003?\u0005?\u046c\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0473",
    "\n@\u0003@\u0007@\u0476\n@\f@\u000e@\u0479\u000b@\u0003@\u0005@\u047c",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0483\n@\u0003@\u0005",
    "@\u0486\n@\u0003@\u0007@\u0489\n@\f@\u000e@\u048c\u000b@\u0003@\u0003",
    "@\u0003A\u0003A\u0003A\u0003A\u0005A\u0494\nA\u0003B\u0003B\u0003B\u0003",
    "B\u0005B\u049a\nB\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u04a1\n",
    "B\u0003B\u0005B\u04a4\nB\u0003C\u0003C\u0003C\u0003C\u0007C\u04aa\n",
    "C\fC\u000eC\u04ad\u000bC\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0007E\u04b6\nE\fE\u000eE\u04b9\u000bE\u0003E\u0003E\u0003E\u0003",
    "F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0007G\u04c5\nG\fG\u000e",
    "G\u04c8\u000bG\u0003G\u0003G\u0003G\u0005G\u04cd\nG\u0003H\u0003H\u0003",
    "H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0005J\u04df\nJ\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003",
    "N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0007Q\u04fd\nQ\fQ\u000eQ\u0500\u000bQ\u0003",
    "Q\u0005Q\u0503\nQ\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0007R\u050a\n",
    "R\fR\u000eR\u050d\u000bR\u0003S\u0003S\u0003S\u0005S\u0512\nS\u0003",
    "S\u0005S\u0515\nS\u0003S\u0003S\u0003S\u0007S\u051a\nS\fS\u000eS\u051d",
    "\u000bS\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0006T\u052a\nT\rT\u000eT\u052b\u0003T\u0003T\u0003",
    "T\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0005W\u053f\nW\u0003W\u0003W\u0003W\u0003",
    "X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u054c\nY\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003",
    "]\u0003]\u0003]\u0005]\u056d\n]\u0003]\u0003]\u0003^\u0003^\u0003^\u0007",
    "^\u0574\n^\f^\u000e^\u0577\u000b^\u0003_\u0003_\u0003_\u0005_\u057c",
    "\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0583\n`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u05a3",
    "\na\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0005b\u05ac\n",
    "b\u0003b\u0005b\u05af\nb\u0003b\u0003b\u0003b\u0003c\u0003c\u0003d\u0003",
    "d\u0003e\u0003e\u0003e\u0003e\u0007e\u05bc\ne\fe\u000ee\u05bf\u000b",
    "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0007f\u05c7\nf\ff\u000e",
    "f\u05ca\u000bf\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0005g\u05d2",
    "\ng\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0005h\u05da\nh\u0003",
    "h\u0003h\u0003i\u0003i\u0003i\u0003i\u0005i\u05e2\ni\u0003i\u0003i\u0003",
    "j\u0003j\u0003j\u0003j\u0007j\u05ea\nj\fj\u000ej\u05ed\u000bj\u0003",
    "j\u0003j\u0003k\u0003k\u0003k\u0003k\u0005k\u05f5\nk\u0003k\u0003k\u0003",
    "l\u0003l\u0003l\u0003l\u0005l\u05fd\nl\u0003l\u0003l\u0003m\u0005m\u0602",
    "\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0609\nm\fm\u000em\u060c",
    "\u000bm\u0003m\u0003m\u0005m\u0610\nm\u0003m\u0003m\u0003m\u0005m\u0615",
    "\nm\u0003m\u0003m\u0003n\u0003n\u0003n\u0003n\u0005n\u061d\nn\u0003",
    "n\u0003n\u0003o\u0003o\u0003o\u0003o\u0005o\u0625\no\u0003o\u0003o\u0003",
    "p\u0003p\u0003p\u0003p\u0005p\u062d\np\u0003p\u0003p\u0003q\u0003q\u0003",
    "r\u0003r\u0005r\u0635\nr\u0003s\u0003s\u0003s\u0005s\u063a\ns\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0005t\u0645",
    "\nt\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u064d\nt\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u0655\nt\u0003t\u0003t\u0003",
    "t\u0005t\u065a\nt\u0003u\u0003u\u0003u\u0005u\u065f\nu\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u0668\nu\u0003v\u0003v\u0003",
    "v\u0003v\u0006v\u066e\nv\rv\u000ev\u066f\u0003v\u0003v\u0003v\u0006",
    "v\u0675\nv\rv\u000ev\u0676\u0005v\u0679\nv\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0003w\u0005w\u0684\nw\u0005w\u0686\n",
    "w\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u068d\nx\u0003y\u0003y\u0003",
    "y\u0005y\u0692\ny\u0003z\u0003z\u0003z\u0005z\u0697\nz\u0003{\u0003",
    "{\u0003{\u0006{\u069c\n{\r{\u000e{\u069d\u0005{\u06a0\n{\u0003|\u0003",
    "|\u0005|\u06a4\n|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0006}\u06ac",
    "\n}\r}\u000e}\u06ad\u0005}\u06b0\n}\u0003~\u0003~\u0005~\u06b4\n~\u0003",
    "~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u06bc",
    "\n\u007f\u0003\u0080\u0003\u0080\u0005\u0080\u06c0\n\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u06c6\n\u0080\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u06d2\n\u0081",
    "\u0003\u0082\u0003\u0082\u0006\u0082\u06d6\n\u0082\r\u0082\u000e\u0082",
    "\u06d7\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0005\u0083\u06e0\n\u0083\u0003\u0083\u0003\u0083\u0003\u0084",
    "\u0003\u0084\u0003\u0084\u0005\u0084\u06e7\n\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u06ed\n\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0006\u0085\u06f4\n",
    "\u0085\r\u0085\u000e\u0085\u06f5\u0003\u0085\u0005\u0085\u06f9\n\u0085",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u06fe\n\u0086\u0003",
    "\u0087\u0003\u0087\u0005\u0087\u0702\n\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0005\u0087\u0707\n\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0007\u0087\u070d\n\u0087\f\u0087\u000e\u0087\u0710",
    "\u000b\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0005\u0087\u0719\n\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u071f\n\u0087\u0005\u0087",
    "\u0721\n\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u0725\n\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005",
    "\u0089\u0739\n\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a",
    "\u073e\n\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0007\u008a\u0748\n\u008a",
    "\f\u008a\u000e\u008a\u074b\u000b\u008a\u0005\u008a\u074d\n\u008a\u0003",
    "\u008a\u0005\u008a\u0750\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0007\u008c\u075d\n\u008c\f\u008c\u000e\u008c",
    "\u0760\u000b\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0006",
    "\u008d\u076c\n\u008d\r\u008d\u000e\u008d\u076d\u0003\u008d\u0003\u008d",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0005\u008e\u0778\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0007\u0092\u078b\n\u0092\f\u0092\u000e\u0092\u078e",
    "\u000b\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0793\n",
    "\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0798\n\u0094",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0005\u0095\u07a1\n\u0095\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u07a6\n\u0096\u0003\u0097\u0003\u0097\u0005\u0097",
    "\u07aa\n\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0007\u0097\u07b1\n\u0097\f\u0097\u000e\u0097\u07b4\u000b\u0097",
    "\u0005\u0097\u07b6\n\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u07be\n\u0098\u0003\u0099",
    "\u0003\u0099\u0003\u0099\u0006\u0099\u07c3\n\u0099\r\u0099\u000e\u0099",
    "\u07c4\u0003\u009a\u0003\u009a\u0003\u009a\u0007\u009a\u07ca\n\u009a",
    "\f\u009a\u000e\u009a\u07cd\u000b\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009c\u0003\u009c\u0005\u009c\u07d9\n\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0002\u0003\u0122\u009d\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c",
    "\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4",
    "\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc",
    "\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4",
    "\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec",
    "\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104",
    "\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c",
    "\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134",
    "\u0136\u0002\u0013\t\u0002\u0006\u0006\u0015\u0015**^^mmpp}}\u0004\u0002",
    "66ll\u0007\u0002\t\t\u001b\u001bIIbbxz\u0004\u0002\u00aa\u00ab\u00af",
    "\u00af\u0007\u0002\u0003\u0003\u0016\u0016OO\u009d\u009d\u00a0\u00a0",
    "\u0015\u0002\u0007\u0007!!99;<CCLLPSXXcckktu||\u0083\u0083\u008a\u008a",
    "\u008e\u008e\u0090\u0092\u0094\u0095\u009b\u00a0\u00a2\u00a2\u0004\u0002",
    "  ==\u0003\u0002\u000b\u000f\u0004\u0002TT\u0089\u0089\u0004\u0002v",
    "v\u0089\u0089\u0004\u000299;;\u0003\u0002\u009b\u009c\n\u0002<<PScc",
    "tu\u0090\u0090\u0094\u0095\u009b\u009c\u009f\u009f\t\u0002CC||\u0083",
    "\u0083\u008a\u008a\u009d\u009d\u00a0\u00a0\u00a8\u00a8\u0007\u0002!",
    "!LLkk\u008e\u008e\u009e\u009e\u000b\u0002\u0007\u0007!!LLXXkk\u008e",
    "\u008e\u0090\u0090\u0094\u0095\u009b\u00a0\u0004\u0002OO\u009d\u009d",
    "\u0002\u0879\u0002\u0141\u0003\u0002\u0002\u0002\u0004\u0143\u0003\u0002",
    "\u0002\u0002\u0006\u0151\u0003\u0002\u0002\u0002\b\u0159\u0003\u0002",
    "\u0002\u0002\n\u015b\u0003\u0002\u0002\u0002\f\u016d\u0003\u0002\u0002",
    "\u0002\u000e\u0176\u0003\u0002\u0002\u0002\u0010\u0178\u0003\u0002\u0002",
    "\u0002\u0012\u017c\u0003\u0002\u0002\u0002\u0014\u0193\u0003\u0002\u0002",
    "\u0002\u0016\u019d\u0003\u0002\u0002\u0002\u0018\u019f\u0003\u0002\u0002",
    "\u0002\u001a\u01c2\u0003\u0002\u0002\u0002\u001c\u01c9\u0003\u0002\u0002",
    "\u0002\u001e\u01cb\u0003\u0002\u0002\u0002 \u01e2\u0003\u0002\u0002",
    "\u0002\"\u01e9\u0003\u0002\u0002\u0002$\u01eb\u0003\u0002\u0002\u0002",
    "&\u0208\u0003\u0002\u0002\u0002(\u0212\u0003\u0002\u0002\u0002*\u0214",
    "\u0003\u0002\u0002\u0002,\u022d\u0003\u0002\u0002\u0002.\u0236\u0003",
    "\u0002\u0002\u00020\u0238\u0003\u0002\u0002\u00022\u0255\u0003\u0002",
    "\u0002\u00024\u025c\u0003\u0002\u0002\u00026\u025e\u0003\u0002\u0002",
    "\u00028\u0269\u0003\u0002\u0002\u0002:\u026b\u0003\u0002\u0002\u0002",
    "<\u0278\u0003\u0002\u0002\u0002>\u0288\u0003\u0002\u0002\u0002@\u028a",
    "\u0003\u0002\u0002\u0002B\u028d\u0003\u0002\u0002\u0002D\u0290\u0003",
    "\u0002\u0002\u0002F\u0293\u0003\u0002\u0002\u0002H\u0295\u0003\u0002",
    "\u0002\u0002J\u029d\u0003\u0002\u0002\u0002L\u02a0\u0003\u0002\u0002",
    "\u0002N\u02a4\u0003\u0002\u0002\u0002P\u02a8\u0003\u0002\u0002\u0002",
    "R\u02af\u0003\u0002\u0002\u0002T\u02b9\u0003\u0002\u0002\u0002V\u02d6",
    "\u0003\u0002\u0002\u0002X\u02f3\u0003\u0002\u0002\u0002Z\u030d\u0003",
    "\u0002\u0002\u0002\\\u0321\u0003\u0002\u0002\u0002^\u032a\u0003\u0002",
    "\u0002\u0002`\u0339\u0003\u0002\u0002\u0002b\u034c\u0003\u0002\u0002",
    "\u0002d\u0353\u0003\u0002\u0002\u0002f\u035a\u0003\u0002\u0002\u0002",
    "h\u0373\u0003\u0002\u0002\u0002j\u038c\u0003\u0002\u0002\u0002l\u03ab",
    "\u0003\u0002\u0002\u0002n\u03ca\u0003\u0002\u0002\u0002p\u03d1\u0003",
    "\u0002\u0002\u0002r\u03d8\u0003\u0002\u0002\u0002t\u03f9\u0003\u0002",
    "\u0002\u0002v\u041c\u0003\u0002\u0002\u0002x\u0434\u0003\u0002\u0002",
    "\u0002z\u044e\u0003\u0002\u0002\u0002|\u045f\u0003\u0002\u0002\u0002",
    "~\u046d\u0003\u0002\u0002\u0002\u0080\u048f\u0003\u0002\u0002\u0002",
    "\u0082\u0495\u0003\u0002\u0002\u0002\u0084\u04a5\u0003\u0002\u0002\u0002",
    "\u0086\u04b0\u0003\u0002\u0002\u0002\u0088\u04b2\u0003\u0002\u0002\u0002",
    "\u008a\u04bd\u0003\u0002\u0002\u0002\u008c\u04c1\u0003\u0002\u0002\u0002",
    "\u008e\u04ce\u0003\u0002\u0002\u0002\u0090\u04d2\u0003\u0002\u0002\u0002",
    "\u0092\u04de\u0003\u0002\u0002\u0002\u0094\u04e0\u0003\u0002\u0002\u0002",
    "\u0096\u04e5\u0003\u0002\u0002\u0002\u0098\u04ea\u0003\u0002\u0002\u0002",
    "\u009a\u04ed\u0003\u0002\u0002\u0002\u009c\u04f1\u0003\u0002\u0002\u0002",
    "\u009e\u04f5\u0003\u0002\u0002\u0002\u00a0\u04f8\u0003\u0002\u0002\u0002",
    "\u00a2\u0507\u0003\u0002\u0002\u0002\u00a4\u050e\u0003\u0002\u0002\u0002",
    "\u00a6\u0521\u0003\u0002\u0002\u0002\u00a8\u0530\u0003\u0002\u0002\u0002",
    "\u00aa\u0536\u0003\u0002\u0002\u0002\u00ac\u0538\u0003\u0002\u0002\u0002",
    "\u00ae\u0543\u0003\u0002\u0002\u0002\u00b0\u054b\u0003\u0002\u0002\u0002",
    "\u00b2\u054d\u0003\u0002\u0002\u0002\u00b4\u0556\u0003\u0002\u0002\u0002",
    "\u00b6\u055d\u0003\u0002\u0002\u0002\u00b8\u0568\u0003\u0002\u0002\u0002",
    "\u00ba\u0570\u0003\u0002\u0002\u0002\u00bc\u057b\u0003\u0002\u0002\u0002",
    "\u00be\u057d\u0003\u0002\u0002\u0002\u00c0\u05a2\u0003\u0002\u0002\u0002",
    "\u00c2\u05ab\u0003\u0002\u0002\u0002\u00c4\u05b3\u0003\u0002\u0002\u0002",
    "\u00c6\u05b5\u0003\u0002\u0002\u0002\u00c8\u05b7\u0003\u0002\u0002\u0002",
    "\u00ca\u05c2\u0003\u0002\u0002\u0002\u00cc\u05cd\u0003\u0002\u0002\u0002",
    "\u00ce\u05d5\u0003\u0002\u0002\u0002\u00d0\u05dd\u0003\u0002\u0002\u0002",
    "\u00d2\u05e5\u0003\u0002\u0002\u0002\u00d4\u05f0\u0003\u0002\u0002\u0002",
    "\u00d6\u05f8\u0003\u0002\u0002\u0002\u00d8\u0601\u0003\u0002\u0002\u0002",
    "\u00da\u0618\u0003\u0002\u0002\u0002\u00dc\u0620\u0003\u0002\u0002\u0002",
    "\u00de\u0628\u0003\u0002\u0002\u0002\u00e0\u0630\u0003\u0002\u0002\u0002",
    "\u00e2\u0634\u0003\u0002\u0002\u0002\u00e4\u0636\u0003\u0002\u0002\u0002",
    "\u00e6\u0659\u0003\u0002\u0002\u0002\u00e8\u0667\u0003\u0002\u0002\u0002",
    "\u00ea\u0678\u0003\u0002\u0002\u0002\u00ec\u0685\u0003\u0002\u0002\u0002",
    "\u00ee\u068c\u0003\u0002\u0002\u0002\u00f0\u068e\u0003\u0002\u0002\u0002",
    "\u00f2\u0693\u0003\u0002\u0002\u0002\u00f4\u069f\u0003\u0002\u0002\u0002",
    "\u00f6\u06a3\u0003\u0002\u0002\u0002\u00f8\u06af\u0003\u0002\u0002\u0002",
    "\u00fa\u06b3\u0003\u0002\u0002\u0002\u00fc\u06b8\u0003\u0002\u0002\u0002",
    "\u00fe\u06c5\u0003\u0002\u0002\u0002\u0100\u06d1\u0003\u0002\u0002\u0002",
    "\u0102\u06d3\u0003\u0002\u0002\u0002\u0104\u06db\u0003\u0002\u0002\u0002",
    "\u0106\u06ec\u0003\u0002\u0002\u0002\u0108\u06f8\u0003\u0002\u0002\u0002",
    "\u010a\u06fd\u0003\u0002\u0002\u0002\u010c\u0720\u0003\u0002\u0002\u0002",
    "\u010e\u0724\u0003\u0002\u0002\u0002\u0110\u0738\u0003\u0002\u0002\u0002",
    "\u0112\u074f\u0003\u0002\u0002\u0002\u0114\u0751\u0003\u0002\u0002\u0002",
    "\u0116\u0757\u0003\u0002\u0002\u0002\u0118\u0767\u0003\u0002\u0002\u0002",
    "\u011a\u0777\u0003\u0002\u0002\u0002\u011c\u0779\u0003\u0002\u0002\u0002",
    "\u011e\u077d\u0003\u0002\u0002\u0002\u0120\u0781\u0003\u0002\u0002\u0002",
    "\u0122\u0784\u0003\u0002\u0002\u0002\u0124\u078f\u0003\u0002\u0002\u0002",
    "\u0126\u0797\u0003\u0002\u0002\u0002\u0128\u07a0\u0003\u0002\u0002\u0002",
    "\u012a\u07a5\u0003\u0002\u0002\u0002\u012c\u07a9\u0003\u0002\u0002\u0002",
    "\u012e\u07bd\u0003\u0002\u0002\u0002\u0130\u07bf\u0003\u0002\u0002\u0002",
    "\u0132\u07c6\u0003\u0002\u0002\u0002\u0134\u07d1\u0003\u0002\u0002\u0002",
    "\u0136\u07d8\u0003\u0002\u0002\u0002\u0138\u0142\u0005\u0004\u0003\u0002",
    "\u0139\u0142\u0005\n\u0006\u0002\u013a\u0142\u0005\u0010\t\u0002\u013b",
    "\u0142\u0005\u0012\n\u0002\u013c\u0142\u0005\u001e\u0010\u0002\u013d",
    "\u0142\u0005$\u0013\u0002\u013e\u0142\u0005\u0018\r\u0002\u013f\u0142",
    "\u0005*\u0016\u0002\u0140\u0142\u00050\u0019\u0002\u0141\u0138\u0003",
    "\u0002\u0002\u0002\u0141\u0139\u0003\u0002\u0002\u0002\u0141\u013a\u0003",
    "\u0002\u0002\u0002\u0141\u013b\u0003\u0002\u0002\u0002\u0141\u013c\u0003",
    "\u0002\u0002\u0002\u0141\u013d\u0003\u0002\u0002\u0002\u0141\u013e\u0003",
    "\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002\u0002\u0141\u0140\u0003",
    "\u0002\u0002\u0002\u0142\u0003\u0003\u0002\u0002\u0002\u0143\u0144\u0007",
    "]\u0002\u0002\u0144\u0145\u0007\u00af\u0002\u0002\u0145\u0147\u0007",
    "\u00a6\u0002\u0002\u0146\u0148\u00056\u001c\u0002\u0147\u0146\u0003",
    "\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u014a\u0003",
    "\u0002\u0002\u0002\u0149\u014b\u0005\u0006\u0004\u0002\u014a\u0149\u0003",
    "\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014c\u0003",
    "\u0002\u0002\u0002\u014c\u014d\u0007&\u0002\u0002\u014d\u014e\u0007",
    "\u00af\u0002\u0002\u014e\u014f\u0007\u00a6\u0002\u0002\u014f\u0005\u0003",
    "\u0002\u0002\u0002\u0150\u0152\u0005\b\u0005\u0002\u0151\u0150\u0003",
    "\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0151\u0003",
    "\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0007\u0003",
    "\u0002\u0002\u0002\u0155\u015a\u0005\u00a6T\u0002\u0156\u015a\u0005",
    "\u00acW\u0002\u0157\u015a\u0005\u00b0Y\u0002\u0158\u015a\u0005\u00a8",
    "U\u0002\u0159\u0155\u0003\u0002\u0002\u0002\u0159\u0156\u0003\u0002",
    "\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159\u0158\u0003\u0002",
    "\u0002\u0002\u015a\t\u0003\u0002\u0002\u0002\u015b\u015c\u0007/\u0002",
    "\u0002\u015c\u015d\u0007\u00af\u0002\u0002\u015d\u015f\u0007\u00a6\u0002",
    "\u0002\u015e\u0160\u00056\u001c\u0002\u015f\u015e\u0003\u0002\u0002",
    "\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0162\u0003\u0002\u0002",
    "\u0002\u0161\u0163\u0005\u00ccg\u0002\u0162\u0161\u0003\u0002\u0002",
    "\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0165\u0003\u0002\u0002",
    "\u0002\u0164\u0166\u0005\f\u0007\u0002\u0165\u0164\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002",
    "\u0002\u0167\u0168\u0007&\u0002\u0002\u0168\u0169\u0007\u00af\u0002",
    "\u0002\u0169\u016a\u0007\u00a6\u0002\u0002\u016a\u016b\u0007\u0002\u0002",
    "\u0003\u016b\u000b\u0003\u0002\u0002\u0002\u016c\u016e\u0005\u000e\b",
    "\u0002\u016d\u016c\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002",
    "\u0002\u016f\u016d\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002",
    "\u0002\u0170\r\u0003\u0002\u0002\u0002\u0171\u0177\u0005~@\u0002\u0172",
    "\u0177\u0005X-\u0002\u0173\u0177\u0005x=\u0002\u0174\u0177\u0005v<\u0002",
    "\u0175\u0177\u0005\u00b0Y\u0002\u0176\u0171\u0003\u0002\u0002\u0002",
    "\u0176\u0172\u0003\u0002\u0002\u0002\u0176\u0173\u0003\u0002\u0002\u0002",
    "\u0176\u0174\u0003\u0002\u0002\u0002\u0176\u0175\u0003\u0002\u0002\u0002",
    "\u0177\u000f\u0003\u0002\u0002\u0002\u0178\u0179\u0005~@\u0002\u0179",
    "\u017a\u0007\u0002\u0002\u0003\u017a\u0011\u0003\u0002\u0002\u0002\u017b",
    "\u017d\u0007q\u0002\u0002\u017c\u017b\u0003\u0002\u0002\u0002\u017c",
    "\u017d\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e",
    "\u017f\u0007\u0017\u0002\u0002\u017f\u0181\u0007\u00af\u0002\u0002\u0180",
    "\u0182\u0005<\u001f\u0002\u0181\u0180\u0003\u0002\u0002\u0002\u0181",
    "\u0182\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183",
    "\u0185\u0007\u00a6\u0002\u0002\u0184\u0186\u00056\u001c\u0002\u0185",
    "\u0184\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186",
    "\u0188\u0003\u0002\u0002\u0002\u0187\u0189\u0005\u00ccg\u0002\u0188",
    "\u0187\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189",
    "\u018b\u0003\u0002\u0002\u0002\u018a\u018c\u0005\u0014\u000b\u0002\u018b",
    "\u018a\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c",
    "\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0007&\u0002\u0002\u018e",
    "\u018f\u0007\u00af\u0002\u0002\u018f\u0190\u0007\u00a6\u0002\u0002\u0190",
    "\u0191\u0007\u0002\u0002\u0003\u0191\u0013\u0003\u0002\u0002\u0002\u0192",
    "\u0194\u0005\u0016\f\u0002\u0193\u0192\u0003\u0002\u0002\u0002\u0194",
    "\u0195\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195",
    "\u0196\u0003\u0002\u0002\u0002\u0196\u0015\u0003\u0002\u0002\u0002\u0197",
    "\u019e\u0005\u00d0i\u0002\u0198\u019e\u0005z>\u0002\u0199\u019e\u0005",
    "^0\u0002\u019a\u019e\u0005T+\u0002\u019b\u019e\u0005\u00b0Y\u0002\u019c",
    "\u019e\u0005\u00aeX\u0002\u019d\u0197\u0003\u0002\u0002\u0002\u019d",
    "\u0198\u0003\u0002\u0002\u0002\u019d\u0199\u0003\u0002\u0002\u0002\u019d",
    "\u019a\u0003\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019d",
    "\u019c\u0003\u0002\u0002\u0002\u019e\u0017\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0007d\u0002\u0002\u01a0\u01a2\u0007\u00af\u0002\u0002\u01a1",
    "\u01a3\u0005<\u001f\u0002\u01a2\u01a1\u0003\u0002\u0002\u0002\u01a2",
    "\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a6\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0007\u0084\u0002\u0002\u01a5\u01a7\u0007\u00af\u0002\u0002\u01a6",
    "\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u00074\u0002\u0002\u01a9",
    "\u01af\u0007\u00af\u0002\u0002\u01aa\u01ab\u0007\'\u0002\u0002\u01ab",
    "\u01ac\u0007\u0010\u0002\u0002\u01ac\u01ae\u0007\u00af\u0002\u0002\u01ad",
    "\u01aa\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002\u0002\u0002\u01af",
    "\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0",
    "\u01b2\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b2",
    "\u01b4\u0007\u00a6\u0002\u0002\u01b3\u01b5\u00056\u001c\u0002\u01b4",
    "\u01b3\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5",
    "\u01b7\u0003\u0002\u0002\u0002\u01b6\u01b8\u0005\u00ccg\u0002\u01b7",
    "\u01b6\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8",
    "\u01ba\u0003\u0002\u0002\u0002\u01b9\u01bb\u0005\u001a\u000e\u0002\u01ba",
    "\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb",
    "\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0007&\u0002\u0002\u01bd",
    "\u01be\u0007\u00af\u0002\u0002\u01be\u01bf\u0007\u00a6\u0002\u0002\u01bf",
    "\u01c0\u0007\u0002\u0002\u0003\u01c0\u0019\u0003\u0002\u0002\u0002\u01c1",
    "\u01c3\u0005\u001c\u000f\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u0003\u0002\u0002\u0002\u01c5\u001b\u0003\u0002\u0002\u0002\u01c6",
    "\u01ca\u0005(\u0015\u0002\u01c7\u01ca\u0005`1\u0002\u01c8\u01ca\u0005",
    "V,\u0002\u01c9\u01c6\u0003\u0002\u0002\u0002\u01c9\u01c7\u0003\u0002",
    "\u0002\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01ca\u001d\u0003\u0002",
    "\u0002\u0002\u01cb\u01cc\u0007(\u0002\u0002\u01cc\u01ce\u0007\u00af",
    "\u0002\u0002\u01cd\u01cf\u0005<\u001f\u0002\u01ce\u01cd\u0003\u0002",
    "\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002",
    "\u0002\u0002\u01d0\u01d1\u00074\u0002\u0002\u01d1\u01d2\u0007\u00af",
    "\u0002\u0002\u01d2\u01d4\u0007\u00a6\u0002\u0002\u01d3\u01d5\u00056",
    "\u001c\u0002\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002",
    "\u0002\u0002\u01d5\u01d7\u0003\u0002\u0002\u0002\u01d6\u01d8\u0005\u00cc",
    "g\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002",
    "\u0002\u0002\u01d8\u01da\u0003\u0002\u0002\u0002\u01d9\u01db\u0005 ",
    "\u0011\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01da\u01db\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007&",
    "\u0002\u0002\u01dd\u01de\u0007\u00af\u0002\u0002\u01de\u01df\u0007\u00a6",
    "\u0002\u0002\u01df\u01e0\u0007\u0002\u0002\u0003\u01e0\u001f\u0003\u0002",
    "\u0002\u0002\u01e1\u01e3\u0005\"\u0012\u0002\u01e2\u01e1\u0003\u0002",
    "\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002",
    "\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5!\u0003\u0002",
    "\u0002\u0002\u01e6\u01ea\u0005z>\u0002\u01e7\u01ea\u0005\u00b0Y\u0002",
    "\u01e8\u01ea\u0005\u00aeX\u0002\u01e9\u01e6\u0003\u0002\u0002\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002",
    "\u01ea#\u0003\u0002\u0002\u0002\u01eb\u01ec\u0007d\u0002\u0002\u01ec",
    "\u01ee\u0007\u00af\u0002\u0002\u01ed\u01ef\u0005<\u001f\u0002\u01ee",
    "\u01ed\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef",
    "\u01f2\u0003\u0002\u0002\u0002\u01f0\u01f1\u0007\u0084\u0002\u0002\u01f1",
    "\u01f3\u0007\u00af\u0002\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2",
    "\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4",
    "\u01f5\u00074\u0002\u0002\u01f5\u01f6\u0007\u00af\u0002\u0002\u01f6",
    "\u01f7\u0007T\u0002\u0002\u01f7\u01f8\u0007\u00af\u0002\u0002\u01f8",
    "\u01fa\u0007\u00a6\u0002\u0002\u01f9\u01fb\u00056\u001c\u0002\u01fa",
    "\u01f9\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb",
    "\u01fd\u0003\u0002\u0002\u0002\u01fc\u01fe\u0005\u00ccg\u0002\u01fd",
    "\u01fc\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe",
    "\u0200\u0003\u0002\u0002\u0002\u01ff\u0201\u0005&\u0014\u0002\u0200",
    "\u01ff\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201",
    "\u0202\u0003\u0002\u0002\u0002\u0202\u0203\u0007&\u0002\u0002\u0203",
    "\u0204\u0007\u00af\u0002\u0002\u0204\u0205\u0007\u00a6\u0002\u0002\u0205",
    "\u0206\u0007\u0002\u0002\u0003\u0206%\u0003\u0002\u0002\u0002\u0207",
    "\u0209\u0005(\u0015\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0209",
    "\u020a\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020a",
    "\u020b\u0003\u0002\u0002\u0002\u020b\'\u0003\u0002\u0002\u0002\u020c",
    "\u0213\u0005~@\u0002\u020d\u0213\u0005x=\u0002\u020e\u0213\u0005v<\u0002",
    "\u020f\u0213\u0005r:\u0002\u0210\u0213\u0005t;\u0002\u0211\u0213\u0005",
    "\u00b0Y\u0002\u0212\u020c\u0003\u0002\u0002\u0002\u0212\u020d\u0003",
    "\u0002\u0002\u0002\u0212\u020e\u0003\u0002\u0002\u0002\u0212\u020f\u0003",
    "\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0211\u0003",
    "\u0002\u0002\u0002\u0213)\u0003\u0002\u0002\u0002\u0214\u0215\u0007",
    "`\u0002\u0002\u0215\u0217\u0007\u00af\u0002\u0002\u0216\u0218\u0005",
    "<\u001f\u0002\u0217\u0216\u0003\u0002\u0002\u0002\u0217\u0218\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0007",
    "s\u0002\u0002\u021a\u021b\u0007\u00af\u0002\u0002\u021b\u021c\u0007",
    "4\u0002\u0002\u021c\u021d\u0007\u00af\u0002\u0002\u021d\u021f\u0007",
    "\u00a6\u0002\u0002\u021e\u0220\u00056\u001c\u0002\u021f\u021e\u0003",
    "\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003",
    "\u0002\u0002\u0002\u0221\u0223\u0005\u00ccg\u0002\u0222\u0221\u0003",
    "\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u0225\u0003",
    "\u0002\u0002\u0002\u0224\u0226\u0005,\u0017\u0002\u0225\u0224\u0003",
    "\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0227\u0003",
    "\u0002\u0002\u0002\u0227\u0228\u0007&\u0002\u0002\u0228\u0229\u0007",
    "\u00af\u0002\u0002\u0229\u022a\u0007\u00a6\u0002\u0002\u022a\u022b\u0007",
    "\u0002\u0002\u0003\u022b+\u0003\u0002\u0002\u0002\u022c\u022e\u0005",
    ".\u0018\u0002\u022d\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003",
    "\u0002\u0002\u0002\u022f\u022d\u0003\u0002\u0002\u0002\u022f\u0230\u0003",
    "\u0002\u0002\u0002\u0230-\u0003\u0002\u0002\u0002\u0231\u0237\u0005",
    "\u00d0i\u0002\u0232\u0237\u0005|?\u0002\u0233\u0237\u0005Z.\u0002\u0234",
    "\u0237\u0005\u00b0Y\u0002\u0235\u0237\u0005\u00aeX\u0002\u0236\u0231",
    "\u0003\u0002\u0002\u0002\u0236\u0232\u0003\u0002\u0002\u0002\u0236\u0233",
    "\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0235",
    "\u0003\u0002\u0002\u0002\u0237/\u0003\u0002\u0002\u0002\u0238\u0239",
    "\u0007`\u0002\u0002\u0239\u023b\u0007\u00af\u0002\u0002\u023a\u023c",
    "\u0005<\u001f\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c",
    "\u0003\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023e",
    "\u0007s\u0002\u0002\u023e\u023f\u0007\u00af\u0002\u0002\u023f\u0240",
    "\u00074\u0002\u0002\u0240\u0241\u0007\u00af\u0002\u0002\u0241\u0242",
    "\u0007T\u0002\u0002\u0242\u0243\u0007\u00af\u0002\u0002\u0243\u0244",
    "\u0007\u0084\u0002\u0002\u0244\u0245\u0007\u00af\u0002\u0002\u0245\u0247",
    "\u0007\u00a6\u0002\u0002\u0246\u0248\u00056\u001c\u0002\u0247\u0246",
    "\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u024a",
    "\u0003\u0002\u0002\u0002\u0249\u024b\u0005\u00ccg\u0002\u024a\u0249",
    "\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024d",
    "\u0003\u0002\u0002\u0002\u024c\u024e\u00052\u001a\u0002\u024d\u024c",
    "\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u024f",
    "\u0003\u0002\u0002\u0002\u024f\u0250\u0007&\u0002\u0002\u0250\u0251",
    "\u0007\u00af\u0002\u0002\u0251\u0252\u0007\u00a6\u0002\u0002\u0252\u0253",
    "\u0007\u0002\u0002\u0003\u02531\u0003\u0002\u0002\u0002\u0254\u0256",
    "\u00054\u001b\u0002\u0255\u0254\u0003\u0002\u0002\u0002\u0256\u0257",
    "\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0257\u0258",
    "\u0003\u0002\u0002\u0002\u02583\u0003\u0002\u0002\u0002\u0259\u025d",
    "\u0005|?\u0002\u025a\u025d\u0005\u00b0Y\u0002\u025b\u025d\u0005\u00ae",
    "X\u0002\u025c\u0259\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002",
    "\u0002\u0002\u025c\u025b\u0003\u0002\u0002\u0002\u025d5\u0003\u0002",
    "\u0002\u0002\u025e\u025f\u0007~\u0002\u0002\u025f\u0264\u00058\u001d",
    "\u0002\u0260\u0261\u0007\u0089\u0002\u0002\u0261\u0263\u00058\u001d",
    "\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0266\u0003\u0002\u0002",
    "\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002",
    "\u0002\u0265\u0267\u0003\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002",
    "\u0002\u0267\u0268\u0007\u00a6\u0002\u0002\u02687\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0007\u00af\u0002\u0002\u026a9\u0003\u0002\u0002",
    "\u0002\u026b\u0274\u0007\u0099\u0002\u0002\u026c\u0271\u0005J&\u0002",
    "\u026d\u026e\u0007\u00a6\u0002\u0002\u026e\u0270\u0005J&\u0002\u026f",
    "\u026d\u0003\u0002\u0002\u0002\u0270\u0273\u0003\u0002\u0002\u0002\u0271",
    "\u026f\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272",
    "\u0275\u0003\u0002\u0002\u0002\u0273\u0271\u0003\u0002\u0002\u0002\u0274",
    "\u026c\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275",
    "\u0276\u0003\u0002\u0002\u0002\u0276\u0277\u0007\u00a4\u0002\u0002\u0277",
    ";\u0003\u0002\u0002\u0002\u0278\u0279\u0007\u0099\u0002\u0002\u0279",
    "\u027e\u0005> \u0002\u027a\u027b\u0007\u00a6\u0002\u0002\u027b\u027d",
    "\u0005> \u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u0280\u0003",
    "\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003",
    "\u0002\u0002\u0002\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0281\u0282\u0007\u00a4\u0002\u0002\u0282=\u0003",
    "\u0002\u0002\u0002\u0283\u0289\u0005@!\u0002\u0284\u0289\u0005B\"\u0002",
    "\u0285\u0289\u0005D#\u0002\u0286\u0289\u0005F$\u0002\u0287\u0289\u0005",
    "H%\u0002\u0288\u0283\u0003\u0002\u0002\u0002\u0288\u0284\u0003\u0002",
    "\u0002\u0002\u0288\u0285\u0003\u0002\u0002\u0002\u0288\u0286\u0003\u0002",
    "\u0002\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0289?\u0003\u0002",
    "\u0002\u0002\u028a\u028b\u0007\u001f\u0002\u0002\u028b\u028c\u0005\u00bc",
    "_\u0002\u028cA\u0003\u0002\u0002\u0002\u028d\u028e\u0007{\u0002\u0002",
    "\u028e\u028f\u0007\u00af\u0002\u0002\u028fC\u0003\u0002\u0002\u0002",
    "\u0290\u0291\u0007*\u0002\u0002\u0291\u0292\u0005\u008cG\u0002\u0292",
    "E\u0003\u0002\u0002\u0002\u0293\u0294\u0005z>\u0002\u0294G\u0003\u0002",
    "\u0002\u0002\u0295\u0296\u0007d\u0002\u0002\u0296\u0297\u0007\u00af",
    "\u0002\u0002\u0297\u0299\u00074\u0002\u0002\u0298\u029a\u0007\u0017",
    "\u0002\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u029c\u0007\u00af",
    "\u0002\u0002\u029cI\u0003\u0002\u0002\u0002\u029d\u029e\u0005L\'\u0002",
    "\u029e\u029f\u0005\u008cG\u0002\u029fK\u0003\u0002\u0002\u0002\u02a0",
    "\u02a1\t\u0002\u0002\u0002\u02a1M\u0003\u0002\u0002\u0002\u02a2\u02a3",
    "\u0007\u00af\u0002\u0002\u02a3\u02a5\u0007\u00a1\u0002\u0002\u02a4\u02a2",
    "\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a6",
    "\u0003\u0002\u0002\u0002\u02a6\u02a7\u0007\u00af\u0002\u0002\u02a7O",
    "\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007\b\u0002\u0002\u02a9\u02aa",
    "\u0005\u0122\u0092\u0002\u02aa\u02ab\u0007\u00a2\u0002\u0002\u02ab\u02ac",
    "\u0005\u0122\u0092\u0002\u02ac\u02ad\u0007T\u0002\u0002\u02ad\u02ae",
    "\u0005N(\u0002\u02aeQ\u0003\u0002\u0002\u0002\u02af\u02b3\u0007g\u0002",
    "\u0002\u02b0\u02b1\u0005\u008cG\u0002\u02b1\u02b2\u0007\u00a6\u0002",
    "\u0002\u02b2\u02b4\u0003\u0002\u0002\u0002\u02b3\u02b0\u0003\u0002\u0002",
    "\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002",
    "\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002",
    "\u0002\u02b7\u02b8\u0007&\u0002\u0002\u02b8S\u0003\u0002\u0002\u0002",
    "\u02b9\u02ba\u0007{\u0002\u0002\u02ba\u02bb\u00072\u0002\u0002\u02bb",
    "\u02bc\u0007\u00af\u0002\u0002\u02bc\u02bd\u0007F\u0002\u0002\u02bd",
    "\u02be\u0007M\u0002\u0002\u02be\u02bf\u0007\u0010\u0002\u0002\u02bf",
    "\u02c0\u0005\u00e0q\u0002\u02c0\u02c1\u0007\u00a6\u0002\u0002\u02c1",
    "\u02c2\u0007+\u0002\u0002\u02c2\u02c3\u0007\u00af\u0002\u0002\u02c3",
    "\u02c7\u0007\u00a6\u0002\u0002\u02c4\u02c6\u0005\\/\u0002\u02c5\u02c4",
    "\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002\u0002\u02c7\u02c5",
    "\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02cb",
    "\u0003\u0002\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002\u0002\u02ca\u02cc",
    "\u0005\u00d0i\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002\u02cb\u02cc",
    "\u0003\u0002\u0002\u0002\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd\u02cf",
    "\u0005b2\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003",
    "\u0002\u0002\u0002\u02cf\u02d1\u0003\u0002\u0002\u0002\u02d0\u02d2\u0005",
    "d3\u0002\u02d1\u02d0\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002",
    "\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0007&",
    "\u0002\u0002\u02d4\u02d5\u0007\u00a6\u0002\u0002\u02d5U\u0003\u0002",
    "\u0002\u0002\u02d6\u02d7\u0007{\u0002\u0002\u02d7\u02dc\u0007\u00af",
    "\u0002\u0002\u02d8\u02dd\u0007\u0090\u0002\u0002\u02d9\u02da\u0007F",
    "\u0002\u0002\u02da\u02db\u0007n\u0002\u0002\u02db\u02dd\u0007\u0010",
    "\u0002\u0002\u02dc\u02d8\u0003\u0002\u0002\u0002\u02dc\u02d9\u0003\u0002",
    "\u0002\u0002\u02dd\u02e1\u0003\u0002\u0002\u0002\u02de\u02e2\u0005N",
    "(\u0002\u02df\u02e2\u0005P)\u0002\u02e0\u02e2\u0005R*\u0002\u02e1\u02de",
    "\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e0",
    "\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e5",
    "\u0007\u00a6\u0002\u0002\u02e4\u02e6\u0005\u00dan\u0002\u02e5\u02e4",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e8",
    "\u0003\u0002\u0002\u0002\u02e7\u02e9\u0005\u00d8m\u0002\u02e8\u02e7",
    "\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9\u02eb",
    "\u0003\u0002\u0002\u0002\u02ea\u02ec\u0005f4\u0002\u02eb\u02ea\u0003",
    "\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003",
    "\u0002\u0002\u0002\u02ed\u02ef\u0005h5\u0002\u02ee\u02ed\u0003\u0002",
    "\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002",
    "\u0002\u0002\u02f0\u02f1\u0007&\u0002\u0002\u02f1\u02f2\u0007\u00a6",
    "\u0002\u0002\u02f2W\u0003\u0002\u0002\u0002\u02f3\u02f4\u0007{\u0002",
    "\u0002\u02f4\u02f9\u0007\u00af\u0002\u0002\u02f5\u02fa\u0007\u0090\u0002",
    "\u0002\u02f6\u02f7\u0007F\u0002\u0002\u02f7\u02f8\u0007n\u0002\u0002",
    "\u02f8\u02fa\u0007\u0010\u0002\u0002\u02f9\u02f5\u0003\u0002\u0002\u0002",
    "\u02f9\u02f6\u0003\u0002\u0002\u0002\u02fa\u02fe\u0003\u0002\u0002\u0002",
    "\u02fb\u02ff\u0005N(\u0002\u02fc\u02ff\u0005P)\u0002\u02fd\u02ff\u0005",
    "R*\u0002\u02fe\u02fb\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002",
    "\u0002\u0002\u02fe\u02fd\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002",
    "\u0002\u0002\u0300\u0302\u0007\u00a6\u0002\u0002\u0301\u0303\u0005\u00da",
    "n\u0002\u0302\u0301\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002",
    "\u0002\u0002\u0303\u0305\u0003\u0002\u0002\u0002\u0304\u0306\u0005j",
    "6\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002",
    "\u0002\u0002\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u0309\u0005l",
    "7\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002",
    "\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030b\u0007&",
    "\u0002\u0002\u030b\u030c\u0007\u00a6\u0002\u0002\u030cY\u0003\u0002",
    "\u0002\u0002\u030d\u030e\u0007{\u0002\u0002\u030e\u030f\u00072\u0002",
    "\u0002\u030f\u0310\u0007\u00af\u0002\u0002\u0310\u0311\u0007F\u0002",
    "\u0002\u0311\u0312\u0007M\u0002\u0002\u0312\u0313\u0007\u0010\u0002",
    "\u0002\u0313\u0314\u0005\u00e0q\u0002\u0314\u0316\u0007\u00a6\u0002",
    "\u0002\u0315\u0317\u0005\u00d0i\u0002\u0316\u0315\u0003\u0002\u0002",
    "\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317\u0319\u0003\u0002\u0002",
    "\u0002\u0318\u031a\u0005n8\u0002\u0319\u0318\u0003\u0002\u0002\u0002",
    "\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031c\u0003\u0002\u0002\u0002",
    "\u031b\u031d\u0005p9\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031c",
    "\u031d\u0003\u0002\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e",
    "\u031f\u0007&\u0002\u0002\u031f\u0320\u0007\u00a6\u0002\u0002\u0320",
    "[\u0003\u0002\u0002\u0002\u0321\u0322\u0007\u001f\u0002\u0002\u0322",
    "\u0323\u0007\u007f\u0002\u0002\u0323\u0326\u0005\u008aF\u0002\u0324",
    "\u0325\u0007\u0090\u0002\u0002\u0325\u0327\u0005\u00e2r\u0002\u0326",
    "\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327",
    "\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0007\u00a6\u0002\u0002\u0329",
    "]\u0003\u0002\u0002\u0002\u032a\u032c\u0007r\u0002\u0002\u032b\u032d",
    "\u0005\u0090I\u0002\u032c\u032b\u0003\u0002\u0002\u0002\u032d\u032e",
    "\u0003\u0002\u0002\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e\u032f",
    "\u0003\u0002\u0002\u0002\u032f\u0331\u0003\u0002\u0002\u0002\u0330\u0332",
    "\u0005\u00d0i\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0331\u0332",
    "\u0003\u0002\u0002\u0002\u0332\u0334\u0003\u0002\u0002\u0002\u0333\u0335",
    "\u0005b2\u0002\u0334\u0333\u0003\u0002\u0002\u0002\u0334\u0335\u0003",
    "\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336\u0337\u0007",
    "&\u0002\u0002\u0337\u0338\u0007\u00a6\u0002\u0002\u0338_\u0003\u0002",
    "\u0002\u0002\u0339\u033d\u0007r\u0002\u0002\u033a\u033c\u0005\u008e",
    "H\u0002\u033b\u033a\u0003\u0002\u0002\u0002\u033c\u033f\u0003\u0002",
    "\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002",
    "\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002",
    "\u0002\u0002\u0340\u0342\u0005\u00dan\u0002\u0341\u0340\u0003\u0002",
    "\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0342\u0344\u0003\u0002",
    "\u0002\u0002\u0343\u0345\u0005\u00d8m\u0002\u0344\u0343\u0003\u0002",
    "\u0002\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345\u0347\u0003\u0002",
    "\u0002\u0002\u0346\u0348\u0005f4\u0002\u0347\u0346\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002",
    "\u0002\u0349\u034a\u0007&\u0002\u0002\u034a\u034b\u0007\u00a6\u0002",
    "\u0002\u034ba\u0003\u0002\u0002\u0002\u034c\u034e\u0007A\u0002\u0002",
    "\u034d\u034f\u0005\u00caf\u0002\u034e\u034d\u0003\u0002\u0002\u0002",
    "\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0351\u0003\u0002\u0002\u0002",
    "\u0350\u0352\u0005\u00ceh\u0002\u0351\u0350\u0003\u0002\u0002\u0002",
    "\u0351\u0352\u0003\u0002\u0002\u0002\u0352c\u0003\u0002\u0002\u0002",
    "\u0353\u0355\u00073\u0002\u0002\u0354\u0356\u0005\u00caf\u0002\u0355",
    "\u0354\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356",
    "\u0358\u0003\u0002\u0002\u0002\u0357\u0359\u0005\u00ceh\u0002\u0358",
    "\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359",
    "e\u0003\u0002\u0002\u0002\u035a\u035c\u0007A\u0002\u0002\u035b\u035d",
    "\u0005\u00caf\u0002\u035c\u035b\u0003\u0002\u0002\u0002\u035c\u035d",
    "\u0003\u0002\u0002\u0002\u035d\u0361\u0003\u0002\u0002\u0002\u035e\u0360",
    "\u0005~@\u0002\u035f\u035e\u0003\u0002\u0002\u0002\u0360\u0363\u0003",
    "\u0002\u0002\u0002\u0361\u035f\u0003\u0002\u0002\u0002\u0361\u0362\u0003",
    "\u0002\u0002\u0002\u0362\u0367\u0003\u0002\u0002\u0002\u0363\u0361\u0003",
    "\u0002\u0002\u0002\u0364\u0366\u0005\u008eH\u0002\u0365\u0364\u0003",
    "\u0002\u0002\u0002\u0366\u0369\u0003\u0002\u0002\u0002\u0367\u0365\u0003",
    "\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u036d\u0003",
    "\u0002\u0002\u0002\u0369\u0367\u0003\u0002\u0002\u0002\u036a\u036c\u0005",
    "\u0092J\u0002\u036b\u036a\u0003\u0002\u0002\u0002\u036c\u036f\u0003",
    "\u0002\u0002\u0002\u036d\u036b\u0003\u0002\u0002\u0002\u036d\u036e\u0003",
    "\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u036d\u0003",
    "\u0002\u0002\u0002\u0370\u0371\u0007&\u0002\u0002\u0371\u0372\u0007",
    "\u00a6\u0002\u0002\u0372g\u0003\u0002\u0002\u0002\u0373\u0375\u0007",
    "3\u0002\u0002\u0374\u0376\u0005\u00caf\u0002\u0375\u0374\u0003\u0002",
    "\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u037a\u0003\u0002",
    "\u0002\u0002\u0377\u0379\u0005~@\u0002\u0378\u0377\u0003\u0002\u0002",
    "\u0002\u0379\u037c\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002",
    "\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u0380\u0003\u0002\u0002",
    "\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d\u037f\u0005\u008eH",
    "\u0002\u037e\u037d\u0003\u0002\u0002\u0002\u037f\u0382\u0003\u0002\u0002",
    "\u0002\u0380\u037e\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002",
    "\u0002\u0381\u0386\u0003\u0002\u0002\u0002\u0382\u0380\u0003\u0002\u0002",
    "\u0002\u0383\u0385\u0005\u0092J\u0002\u0384\u0383\u0003\u0002\u0002",
    "\u0002\u0385\u0388\u0003\u0002\u0002\u0002\u0386\u0384\u0003\u0002\u0002",
    "\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0389\u0003\u0002\u0002",
    "\u0002\u0388\u0386\u0003\u0002\u0002\u0002\u0389\u038a\u0007&\u0002",
    "\u0002\u038a\u038b\u0007\u00a6\u0002\u0002\u038bi\u0003\u0002\u0002",
    "\u0002\u038c\u038e\u0007A\u0002\u0002\u038d\u038f\u0005\u00caf\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002",
    "\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u0392\u0005\u00ccg\u0002",
    "\u0391\u0390\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002",
    "\u0392\u0394\u0003\u0002\u0002\u0002\u0393\u0395\u0005\u00ceh\u0002",
    "\u0394\u0393\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002",
    "\u0395\u0399\u0003\u0002\u0002\u0002\u0396\u0398\u0005~@\u0002\u0397",
    "\u0396\u0003\u0002\u0002\u0002\u0398\u039b\u0003\u0002\u0002\u0002\u0399",
    "\u0397\u0003\u0002\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a",
    "\u039f\u0003\u0002\u0002\u0002\u039b\u0399\u0003\u0002\u0002\u0002\u039c",
    "\u039e\u0005\u008eH\u0002\u039d\u039c\u0003\u0002\u0002\u0002\u039e",
    "\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f",
    "\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a5\u0003\u0002\u0002\u0002\u03a1",
    "\u039f\u0003\u0002\u0002\u0002\u03a2\u03a4\u0005\u0092J\u0002\u03a3",
    "\u03a2\u0003\u0002\u0002\u0002\u03a4\u03a7\u0003\u0002\u0002\u0002\u03a5",
    "\u03a3\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6",
    "\u03a8\u0003\u0002\u0002\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a8",
    "\u03a9\u0007&\u0002\u0002\u03a9\u03aa\u0007\u00a6\u0002\u0002\u03aa",
    "k\u0003\u0002\u0002\u0002\u03ab\u03ad\u00073\u0002\u0002\u03ac\u03ae",
    "\u0005\u00caf\u0002\u03ad\u03ac\u0003\u0002\u0002\u0002\u03ad\u03ae",
    "\u0003\u0002\u0002\u0002\u03ae\u03b0\u0003\u0002\u0002\u0002\u03af\u03b1",
    "\u0005\u00ccg\u0002\u03b0\u03af\u0003\u0002\u0002\u0002\u03b0\u03b1",
    "\u0003\u0002\u0002\u0002\u03b1\u03b3\u0003\u0002\u0002\u0002\u03b2\u03b4",
    "\u0005\u00ceh\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b3\u03b4",
    "\u0003\u0002\u0002\u0002\u03b4\u03b8\u0003\u0002\u0002\u0002\u03b5\u03b7",
    "\u0005~@\u0002\u03b6\u03b5\u0003\u0002\u0002\u0002\u03b7\u03ba\u0003",
    "\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003",
    "\u0002\u0002\u0002\u03b9\u03be\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003",
    "\u0002\u0002\u0002\u03bb\u03bd\u0005\u008eH\u0002\u03bc\u03bb\u0003",
    "\u0002\u0002\u0002\u03bd\u03c0\u0003\u0002\u0002\u0002\u03be\u03bc\u0003",
    "\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf\u03c4\u0003",
    "\u0002\u0002\u0002\u03c0\u03be\u0003\u0002\u0002\u0002\u03c1\u03c3\u0005",
    "\u0092J\u0002\u03c2\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c6\u0003",
    "\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003",
    "\u0002\u0002\u0002\u03c5\u03c7\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003",
    "\u0002\u0002\u0002\u03c7\u03c8\u0007&\u0002\u0002\u03c8\u03c9\u0007",
    "\u00a6\u0002\u0002\u03c9m\u0003\u0002\u0002\u0002\u03ca\u03cc\u0007",
    "A\u0002\u0002\u03cb\u03cd\u0005\u00dco\u0002\u03cc\u03cb\u0003\u0002",
    "\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd\u03cf\u0003\u0002",
    "\u0002\u0002\u03ce\u03d0\u0005\u00dep\u0002\u03cf\u03ce\u0003\u0002",
    "\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0o\u0003\u0002",
    "\u0002\u0002\u03d1\u03d3\u00073\u0002\u0002\u03d2\u03d4\u0005\u00dc",
    "o\u0002\u03d3\u03d2\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002",
    "\u0002\u0002\u03d4\u03d6\u0003\u0002\u0002\u0002\u03d5\u03d7\u0005\u00de",
    "p\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002",
    "\u0002\u0002\u03d7q\u0003\u0002\u0002\u0002\u03d8\u03d9\u0007a\u0002",
    "\u0002\u03d9\u03da\u0007\u00af\u0002\u0002\u03da\u03dd\u0005:\u001e",
    "\u0002\u03db\u03dc\u0007\u0088\u0002\u0002\u03dc\u03de\u0005N(\u0002",
    "\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002",
    "\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u03e1\u0007\u00a6\u0002\u0002",
    "\u03e0\u03e2\u0005\u00caf\u0002\u03e1\u03e0\u0003\u0002\u0002\u0002",
    "\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e6\u0003\u0002\u0002\u0002",
    "\u03e3\u03e5\u0005~@\u0002\u03e4\u03e3\u0003\u0002\u0002\u0002\u03e5",
    "\u03e8\u0003\u0002\u0002\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e6",
    "\u03e7\u0003\u0002\u0002\u0002\u03e7\u03ec\u0003\u0002\u0002\u0002\u03e8",
    "\u03e6\u0003\u0002\u0002\u0002\u03e9\u03eb\u0005\u008eH\u0002\u03ea",
    "\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ee\u0003\u0002\u0002\u0002\u03ec",
    "\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed",
    "\u03f2\u0003\u0002\u0002\u0002\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ef",
    "\u03f1\u0005\u0092J\u0002\u03f0\u03ef\u0003\u0002\u0002\u0002\u03f1",
    "\u03f4\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f2",
    "\u03f3\u0003\u0002\u0002\u0002\u03f3\u03f5\u0003\u0002\u0002\u0002\u03f4",
    "\u03f2\u0003\u0002\u0002\u0002\u03f5\u03f6\u0007&\u0002\u0002\u03f6",
    "\u03f7\u0007\u00af\u0002\u0002\u03f7\u03f8\u0007\u00a6\u0002\u0002\u03f8",
    "s\u0003\u0002\u0002\u0002\u03f9\u03fa\u0007i\u0002\u0002\u03fa\u03fb",
    "\u0007a\u0002\u0002\u03fb\u03fc\u0007\u00af\u0002\u0002\u03fc\u03ff",
    "\u0005:\u001e\u0002\u03fd\u03fe\u0007\u0088\u0002\u0002\u03fe\u0400",
    "\u0005N(\u0002\u03ff\u03fd\u0003\u0002\u0002\u0002\u03ff\u0400\u0003",
    "\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0403\u0007",
    "\u00a6\u0002\u0002\u0402\u0404\u0005\u00caf\u0002\u0403\u0402\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0405\u0003",
    "\u0002\u0002\u0002\u0405\u0409\u0005\u00d6l\u0002\u0406\u0408\u0005",
    "~@\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0408\u040b\u0003\u0002",
    "\u0002\u0002\u0409\u0407\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002",
    "\u0002\u0002\u040a\u040f\u0003\u0002\u0002\u0002\u040b\u0409\u0003\u0002",
    "\u0002\u0002\u040c\u040e\u0005\u008eH\u0002\u040d\u040c\u0003\u0002",
    "\u0002\u0002\u040e\u0411\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002",
    "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0415\u0003\u0002",
    "\u0002\u0002\u0411\u040f\u0003\u0002\u0002\u0002\u0412\u0414\u0005\u0092",
    "J\u0002\u0413\u0412\u0003\u0002\u0002\u0002\u0414\u0417\u0003\u0002",
    "\u0002\u0002\u0415\u0413\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002",
    "\u0002\u0002\u0416\u0418\u0003\u0002\u0002\u0002\u0417\u0415\u0003\u0002",
    "\u0002\u0002\u0418\u0419\u0007&\u0002\u0002\u0419\u041a\u0007\u00af",
    "\u0002\u0002\u041a\u041b\u0007\u00a6\u0002\u0002\u041bu\u0003\u0002",
    "\u0002\u0002\u041c\u041d\u0005z>\u0002\u041d\u0421\u0007a\u0002\u0002",
    "\u041e\u0420\u0005~@\u0002\u041f\u041e\u0003\u0002\u0002\u0002\u0420",
    "\u0423\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002\u0002\u0421",
    "\u0422\u0003\u0002\u0002\u0002\u0422\u0427\u0003\u0002\u0002\u0002\u0423",
    "\u0421\u0003\u0002\u0002\u0002\u0424\u0426\u0005\u008eH\u0002\u0425",
    "\u0424\u0003\u0002\u0002\u0002\u0426\u0429\u0003\u0002\u0002\u0002\u0427",
    "\u0425\u0003\u0002\u0002\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428",
    "\u042d\u0003\u0002\u0002\u0002\u0429\u0427\u0003\u0002\u0002\u0002\u042a",
    "\u042c\u0005\u0092J\u0002\u042b\u042a\u0003\u0002\u0002\u0002\u042c",
    "\u042f\u0003\u0002\u0002\u0002\u042d\u042b\u0003\u0002\u0002\u0002\u042d",
    "\u042e\u0003\u0002\u0002\u0002\u042e\u0430\u0003\u0002\u0002\u0002\u042f",
    "\u042d\u0003\u0002\u0002\u0002\u0430\u0431\u0007&\u0002\u0002\u0431",
    "\u0432\u0007\u00af\u0002\u0002\u0432\u0433\u0007\u00a6\u0002\u0002\u0433",
    "w\u0003\u0002\u0002\u0002\u0434\u0435\u0005z>\u0002\u0435\u0436\u0007",
    "i\u0002\u0002\u0436\u0437\u0007a\u0002\u0002\u0437\u043b\u0005\u00d6",
    "l\u0002\u0438\u043a\u0005~@\u0002\u0439\u0438\u0003\u0002\u0002\u0002",
    "\u043a\u043d\u0003\u0002\u0002\u0002\u043b\u0439\u0003\u0002\u0002\u0002",
    "\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u0441\u0003\u0002\u0002\u0002",
    "\u043d\u043b\u0003\u0002\u0002\u0002\u043e\u0440\u0005\u008eH\u0002",
    "\u043f\u043e\u0003\u0002\u0002\u0002\u0440\u0443\u0003\u0002\u0002\u0002",
    "\u0441\u043f\u0003\u0002\u0002\u0002\u0441\u0442\u0003\u0002\u0002\u0002",
    "\u0442\u0447\u0003\u0002\u0002\u0002\u0443\u0441\u0003\u0002\u0002\u0002",
    "\u0444\u0446\u0005\u0092J\u0002\u0445\u0444\u0003\u0002\u0002\u0002",
    "\u0446\u0449\u0003\u0002\u0002\u0002\u0447\u0445\u0003\u0002\u0002\u0002",
    "\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u044a\u0003\u0002\u0002\u0002",
    "\u0449\u0447\u0003\u0002\u0002\u0002\u044a\u044b\u0007&\u0002\u0002",
    "\u044b\u044c\u0007\u00af\u0002\u0002\u044c\u044d\u0007\u00a6\u0002\u0002",
    "\u044dy\u0003\u0002\u0002\u0002\u044e\u044f\u0007W\u0002\u0002\u044f",
    "\u0450\u0007\u00af\u0002\u0002\u0450\u0453\u0005:\u001e\u0002\u0451",
    "\u0452\u0007\u0088\u0002\u0002\u0452\u0454\u0005N(\u0002\u0453\u0451",
    "\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u0455",
    "\u0003\u0002\u0002\u0002\u0455\u0457\u0007\u00a6\u0002\u0002\u0456\u0458",
    "\u0005\u00caf\u0002\u0457\u0456\u0003\u0002\u0002\u0002\u0457\u0458",
    "\u0003\u0002\u0002\u0002\u0458\u045a\u0003\u0002\u0002\u0002\u0459\u045b",
    "\u0005\u00ccg\u0002\u045a\u0459\u0003\u0002\u0002\u0002\u045a\u045b",
    "\u0003\u0002\u0002\u0002\u045b\u045d\u0003\u0002\u0002\u0002\u045c\u045e",
    "\u0005\u00ceh\u0002\u045d\u045c\u0003\u0002\u0002\u0002\u045d\u045e",
    "\u0003\u0002\u0002\u0002\u045e{\u0003\u0002\u0002\u0002\u045f\u0460",
    "\u0007W\u0002\u0002\u0460\u0461\u0007\u00af\u0002\u0002\u0461\u0464",
    "\u0005:\u001e\u0002\u0462\u0463\u0007\u0088\u0002\u0002\u0463\u0465",
    "\u0005N(\u0002\u0464\u0462\u0003\u0002\u0002\u0002\u0464\u0465\u0003",
    "\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002\u0002\u0466\u0468\u0007",
    "\u00a6\u0002\u0002\u0467\u0469\u0005\u00dco\u0002\u0468\u0467\u0003",
    "\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u046b\u0003",
    "\u0002\u0002\u0002\u046a\u046c\u0005\u00dep\u0002\u046b\u046a\u0003",
    "\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002\u046c}\u0003",
    "\u0002\u0002\u0002\u046d\u046e\u0007/\u0002\u0002\u046e\u046f\u0007",
    "\u00af\u0002\u0002\u046f\u0470\u0007F\u0002\u0002\u0470\u0472\u0007",
    "\u00af\u0002\u0002\u0471\u0473\u0005\u0084C\u0002\u0472\u0471\u0003",
    "\u0002\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u0477\u0003",
    "\u0002\u0002\u0002\u0474\u0476\u0005\u0080A\u0002\u0475\u0474\u0003",
    "\u0002\u0002\u0002\u0476\u0479\u0003\u0002\u0002\u0002\u0477\u0475\u0003",
    "\u0002\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u047b\u0003",
    "\u0002\u0002\u0002\u0479\u0477\u0003\u0002\u0002\u0002\u047a\u047c\u0007",
    ".\u0002\u0002\u047b\u047a\u0003\u0002\u0002\u0002\u047b\u047c\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047e\u0007",
    "e\u0002\u0002\u047e\u047f\u0007\u0010\u0002\u0002\u047f\u0482\u0007",
    "\u00af\u0002\u0002\u0480\u0481\u0007\u0084\u0002\u0002\u0481\u0483\u0007",
    "\u00af\u0002\u0002\u0482\u0480\u0003\u0002\u0002\u0002\u0482\u0483\u0003",
    "\u0002\u0002\u0002\u0483\u0485\u0003\u0002\u0002\u0002\u0484\u0486\u0005",
    "\u0084C\u0002\u0485\u0484\u0003\u0002\u0002\u0002\u0485\u0486\u0003",
    "\u0002\u0002\u0002\u0486\u048a\u0003\u0002\u0002\u0002\u0487\u0489\u0005",
    "\u0082B\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0489\u048c\u0003",
    "\u0002\u0002\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048a\u048b\u0003",
    "\u0002\u0002\u0002\u048b\u048d\u0003\u0002\u0002\u0002\u048c\u048a\u0003",
    "\u0002\u0002\u0002\u048d\u048e\u0007\u00a6\u0002\u0002\u048e\u007f\u0003",
    "\u0002\u0002\u0002\u048f\u0490\u0007\'\u0002\u0002\u0490\u0491\u0007",
    "\u0010\u0002\u0002\u0491\u0493\u0007\u00af\u0002\u0002\u0492\u0494\u0005",
    "\u0084C\u0002\u0493\u0492\u0003\u0002\u0002\u0002\u0493\u0494\u0003",
    "\u0002\u0002\u0002\u0494\u0081\u0003\u0002\u0002\u0002\u0495\u0496\u0007",
    "\'\u0002\u0002\u0496\u0497\u0007\u0010\u0002\u0002\u0497\u0499\u0007",
    "\u00af\u0002\u0002\u0498\u049a\u0005\u0084C\u0002\u0499\u0498\u0003",
    "\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b\u0003",
    "\u0002\u0002\u0002\u049b\u049c\u0007e\u0002\u0002\u049c\u049d\u0007",
    "\u0010\u0002\u0002\u049d\u04a0\u0007\u00af\u0002\u0002\u049e\u049f\u0007",
    "\u0084\u0002\u0002\u049f\u04a1\u0007\u00af\u0002\u0002\u04a0\u049e\u0003",
    "\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a3\u0003",
    "\u0002\u0002\u0002\u04a2\u04a4\u0005\u0084C\u0002\u04a3\u04a2\u0003",
    "\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u0083\u0003",
    "\u0002\u0002\u0002\u04a5\u04a6\u0007\u0099\u0002\u0002\u04a6\u04ab\u0005",
    "\u0086D\u0002\u04a7\u04a8\u0007\u0089\u0002\u0002\u04a8\u04aa\u0005",
    "\u0086D\u0002\u04a9\u04a7\u0003\u0002\u0002\u0002\u04aa\u04ad\u0003",
    "\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ab\u04ac\u0003",
    "\u0002\u0002\u0002\u04ac\u04ae\u0003\u0002\u0002\u0002\u04ad\u04ab\u0003",
    "\u0002\u0002\u0002\u04ae\u04af\u0007\u00a4\u0002\u0002\u04af\u0085\u0003",
    "\u0002\u0002\u0002\u04b0\u04b1\u0005\u0122\u0092\u0002\u04b1\u0087\u0003",
    "\u0002\u0002\u0002\u04b2\u04b7\u0007\u00af\u0002\u0002\u04b3\u04b4\u0007",
    "\u0089\u0002\u0002\u04b4\u04b6\u0007\u00af\u0002\u0002\u04b5\u04b3\u0003",
    "\u0002\u0002\u0002\u04b6\u04b9\u0003\u0002\u0002\u0002\u04b7\u04b5\u0003",
    "\u0002\u0002\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04ba\u0003",
    "\u0002\u0002\u0002\u04b9\u04b7\u0003\u0002\u0002\u0002\u04ba\u04bb\u0007",
    "\u0088\u0002\u0002\u04bb\u04bc\u0005\u00e0q\u0002\u04bc\u0089\u0003",
    "\u0002\u0002\u0002\u04bd\u04be\u0007\u00af\u0002\u0002\u04be\u04bf\u0007",
    "\u0088\u0002\u0002\u04bf\u04c0\u0005\u00e0q\u0002\u04c0\u008b\u0003",
    "\u0002\u0002\u0002\u04c1\u04c6\u0007\u00af\u0002\u0002\u04c2\u04c3\u0007",
    "\u0089\u0002\u0002\u04c3\u04c5\u0007\u00af\u0002\u0002\u04c4\u04c2\u0003",
    "\u0002\u0002\u0002\u04c5\u04c8\u0003\u0002\u0002\u0002\u04c6\u04c4\u0003",
    "\u0002\u0002\u0002\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u04c9\u0003",
    "\u0002\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c9\u04cc\u0007",
    "\u0088\u0002\u0002\u04ca\u04cd\u0005N(\u0002\u04cb\u04cd\u0005P)\u0002",
    "\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc\u04cb\u0003\u0002\u0002\u0002",
    "\u04cd\u008d\u0003\u0002\u0002\u0002\u04ce\u04cf\u0007\u007f\u0002\u0002",
    "\u04cf\u04d0\u0005\u008cG\u0002\u04d0\u04d1\u0007\u00a6\u0002\u0002",
    "\u04d1\u008f\u0003\u0002\u0002\u0002\u04d2\u04d3\u0007\u0004\u0002\u0002",
    "\u04d3\u04d4\u0005\u0088E\u0002\u04d4\u04d5\u0007\u00a6\u0002\u0002",
    "\u04d5\u0091\u0003\u0002\u0002\u0002\u04d6\u04df\u0005\u0094K\u0002",
    "\u04d7\u04df\u0005\u0096L\u0002\u04d8\u04df\u0005\u0098M\u0002\u04d9",
    "\u04df\u0005\u009aN\u0002\u04da\u04df\u0005\u009cO\u0002\u04db\u04df",
    "\u0005\u009eP\u0002\u04dc\u04df\u0005\u00a0Q\u0002\u04dd\u04df\u0005",
    "\u00a4S\u0002\u04de\u04d6\u0003\u0002\u0002\u0002\u04de\u04d7\u0003",
    "\u0002\u0002\u0002\u04de\u04d8\u0003\u0002\u0002\u0002\u04de\u04d9\u0003",
    "\u0002\u0002\u0002\u04de\u04da\u0003\u0002\u0002\u0002\u04de\u04db\u0003",
    "\u0002\u0002\u0002\u04de\u04dc\u0003\u0002\u0002\u0002\u04de\u04dd\u0003",
    "\u0002\u0002\u0002\u04df\u0093\u0003\u0002\u0002\u0002\u04e0\u04e1\u0005",
    "\u012e\u0098\u0002\u04e1\u04e2\u0007\u0085\u0002\u0002\u04e2\u04e3\u0005",
    "\u0122\u0092\u0002\u04e3\u04e4\u0007\u00a6\u0002\u0002\u04e4\u0095\u0003",
    "\u0002\u0002\u0002\u04e5\u04e6\u0005\u012e\u0098\u0002\u04e6\u04e7\u0007",
    "\u00a7\u0002\u0002\u04e7\u04e8\u0005\u012e\u0098\u0002\u04e8\u04e9\u0007",
    "\u00a6\u0002\u0002\u04e9\u0097\u0003\u0002\u0002\u0002\u04ea\u04eb\u0005",
    "\u012c\u0097\u0002\u04eb\u04ec\u0007\u00a6\u0002\u0002\u04ec\u0099\u0003",
    "\u0002\u0002\u0002\u04ed\u04ee\u0007_\u0002\u0002\u04ee\u04ef\u0005",
    "\u00e2r\u0002\u04ef\u04f0\u0007\u00a6\u0002\u0002\u04f0\u009b\u0003",
    "\u0002\u0002\u0002\u04f1\u04f2\u0007\u0018\u0002\u0002\u04f2\u04f3\u0005",
    "\u00e2r\u0002\u04f3\u04f4\u0007\u00a6\u0002\u0002\u04f4\u009d\u0003",
    "\u0002\u0002\u0002\u04f5\u04f6\t\u0003\u0002\u0002\u04f6\u04f7\u0007",
    "\u00a6\u0002\u0002\u04f7\u009f\u0003\u0002\u0002\u0002\u04f8\u04f9\u0007",
    "8\u0002\u0002\u04f9\u04fa\u0005\u0122\u0092\u0002\u04fa\u04fe\u0007",
    "w\u0002\u0002\u04fb\u04fd\u0005\u0092J\u0002\u04fc\u04fb\u0003\u0002",
    "\u0002\u0002\u04fd\u0500\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002",
    "\u0002\u0002\u04fe\u04ff\u0003\u0002\u0002\u0002\u04ff\u0502\u0003\u0002",
    "\u0002\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0501\u0503\u0005\u00a2",
    "R\u0002\u0502\u0501\u0003\u0002\u0002\u0002\u0502\u0503\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0505\u0007&",
    "\u0002\u0002\u0505\u0506\u0007\u00a6\u0002\u0002\u0506\u00a1\u0003\u0002",
    "\u0002\u0002\u0507\u050b\u0007%\u0002\u0002\u0508\u050a\u0005\u0092",
    "J\u0002\u0509\u0508\u0003\u0002\u0002\u0002\u050a\u050d\u0003\u0002",
    "\u0002\u0002\u050b\u0509\u0003\u0002\u0002\u0002\u050b\u050c\u0003\u0002",
    "\u0002\u0002\u050c\u00a3\u0003\u0002\u0002\u0002\u050d\u050b\u0003\u0002",
    "\u0002\u0002\u050e\u050f\u0007\u0082\u0002\u0002\u050f\u0511\u0005\u0122",
    "\u0092\u0002\u0510\u0512\u0005\u00d2j\u0002\u0511\u0510\u0003\u0002",
    "\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0514\u0003\u0002",
    "\u0002\u0002\u0513\u0515\u0005\u00d4k\u0002\u0514\u0513\u0003\u0002",
    "\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002",
    "\u0002\u0002\u0516\u0517\u0005\u00d6l\u0002\u0517\u051b\u0007\"\u0002",
    "\u0002\u0518\u051a\u0005\u0092J\u0002\u0519\u0518\u0003\u0002\u0002",
    "\u0002\u051a\u051d\u0003\u0002\u0002\u0002\u051b\u0519\u0003\u0002\u0002",
    "\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u051e\u0003\u0002\u0002",
    "\u0002\u051d\u051b\u0003\u0002\u0002\u0002\u051e\u051f\u0007&\u0002",
    "\u0002\u051f\u0520\u0007\u00a6\u0002\u0002\u0520\u00a5\u0003\u0002\u0002",
    "\u0002\u0521\u0522\u0007{\u0002\u0002\u0522\u0523\u0007x\u0002\u0002",
    "\u0523\u0524\u0007\u00af\u0002\u0002\u0524\u0529\u0007\u0088\u0002\u0002",
    "\u0525\u0526\u00075\u0002\u0002\u0526\u0527\u0005\u0088E\u0002\u0527",
    "\u0528\u0007\u0089\u0002\u0002\u0528\u052a\u0003\u0002\u0002\u0002\u0529",
    "\u0525\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b",
    "\u0529\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c",
    "\u052d\u0003\u0002\u0002\u0002\u052d\u052e\u0005\u00e8u\u0002\u052e",
    "\u052f\u0007\u00a6\u0002\u0002\u052f\u00a7\u0003\u0002\u0002\u0002\u0530",
    "\u0531\t\u0004\u0002\u0002\u0531\u0532\u0005\u00aaV\u0002\u0532\u0533",
    "\u0007\u0088\u0002\u0002\u0533\u0534\u0005\u00e2r\u0002\u0534\u0535",
    "\u0007\u00a6\u0002\u0002\u0535\u00a9\u0003\u0002\u0002\u0002\u0536\u0537",
    "\t\u0005\u0002\u0002\u0537\u00ab\u0003\u0002\u0002\u0002\u0538\u0539",
    "\u0007\u001f\u0002\u0002\u0539\u053e\u0007\u00af\u0002\u0002\u053a\u053f",
    "\u0007\u0090\u0002\u0002\u053b\u053c\u0007F\u0002\u0002\u053c\u053d",
    "\u0007n\u0002\u0002\u053d\u053f\u0007\u0010\u0002\u0002\u053e\u053a",
    "\u0003\u0002\u0002\u0002\u053e\u053b\u0003\u0002\u0002\u0002\u053f\u0540",
    "\u0003\u0002\u0002\u0002\u0540\u0541\u0005\u00e0q\u0002\u0541\u0542",
    "\u0007\u00a6\u0002\u0002\u0542\u00ad\u0003\u0002\u0002\u0002\u0543\u0544",
    "\u0007\u001e\u0002\u0002\u0544\u0545\u0005\u00bc_\u0002\u0545\u0546",
    "\u0007\u00a6\u0002\u0002\u0546\u00af\u0003\u0002\u0002\u0002\u0547\u054c",
    "\u0005\u00b4[\u0002\u0548\u054c\u0005\u00b8]\u0002\u0549\u054c\u0005",
    "\u00b6\\\u0002\u054a\u054c\u0005\u00b2Z\u0002\u054b\u0547\u0003\u0002",
    "\u0002\u0002\u054b\u0548\u0003\u0002\u0002\u0002\u054b\u0549\u0003\u0002",
    "\u0002\u0002\u054b\u054a\u0003\u0002\u0002\u0002\u054c\u00b1\u0003\u0002",
    "\u0002\u0002\u054d\u054e\u0007\u0013\u0002\u0002\u054e\u054f\u0007\u001f",
    "\u0002\u0002\u054f\u0550\u0007D\u0002\u0002\u0550\u0551\u0005\u00ba",
    "^\u0002\u0551\u0552\u0007j\u0002\u0002\u0552\u0553\u0007\u0010\u0002",
    "\u0002\u0553\u0554\u0005\u00e2r\u0002\u0554\u0555\u0007\u00a6\u0002",
    "\u0002\u0555\u00b3\u0003\u0002\u0002\u0002\u0556\u0557\u0007:\u0002",
    "\u0002\u0557\u0558\u0007\u001f\u0002\u0002\u0558\u0559\u0005\u00bc_",
    "\u0002\u0559\u055a\u0007F\u0002\u0002\u055a\u055b\u0005\u00e2r\u0002",
    "\u055b\u055c\u0007\u00a6\u0002\u0002\u055c\u00b5\u0003\u0002\u0002\u0002",
    "\u055d\u055e\u0007>\u0002\u0002\u055e\u055f\u0007\u001f\u0002\u0002",
    "\u055f\u0560\u0005\u00bc_\u0002\u0560\u0561\u0007F\u0002\u0002\u0561",
    "\u0562\u0007?\u0002\u0002\u0562\u0563\u0005\u00e2r\u0002\u0563\u0564",
    "\u0007\u00a6\u0002\u0002\u0564\u0565\u0007@\u0002\u0002\u0565\u0566",
    "\u0005\u00e2r\u0002\u0566\u0567\u0007\u00a6\u0002\u0002\u0567\u00b7",
    "\u0003\u0002\u0002\u0002\u0568\u0569\u0007\u001f\u0002\u0002\u0569\u056c",
    "\u0005\u00bc_\u0002\u056a\u056b\u0007\u0090\u0002\u0002\u056b\u056d",
    "\u0005\u00e2r\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056d",
    "\u0003\u0002\u0002\u0002\u056d\u056e\u0003\u0002\u0002\u0002\u056e\u056f",
    "\u0007\u00a6\u0002\u0002\u056f\u00b9\u0003\u0002\u0002\u0002\u0570\u0575",
    "\u0005\u00bc_\u0002\u0571\u0572\u0007\u0089\u0002\u0002\u0572\u0574",
    "\u0005\u00bc_\u0002\u0573\u0571\u0003\u0002\u0002\u0002\u0574\u0577",
    "\u0003\u0002\u0002\u0002\u0575\u0573\u0003\u0002\u0002\u0002\u0575\u0576",
    "\u0003\u0002\u0002\u0002\u0576\u00bb\u0003\u0002\u0002\u0002\u0577\u0575",
    "\u0003\u0002\u0002\u0002\u0578\u057c\u0005\u00be`\u0002\u0579\u057c",
    "\u0005\u00c0a\u0002\u057a\u057c\u0005\u00c2b\u0002\u057b\u0578\u0003",
    "\u0002\u0002\u0002\u057b\u0579\u0003\u0002\u0002\u0002\u057b\u057a\u0003",
    "\u0002\u0002\u0002\u057c\u00bd\u0003\u0002\u0002\u0002\u057d\u057e\u0007",
    "\u0099\u0002\u0002\u057e\u057f\u0005\u008aF\u0002\u057f\u0582\u0007",
    "\u00a4\u0002\u0002\u0580\u0583\u0007\u00af\u0002\u0002\u0581\u0583\u0005",
    "\u00c6d\u0002\u0582\u0580\u0003\u0002\u0002\u0002\u0582\u0581\u0003",
    "\u0002\u0002\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0007",
    "\u0099\u0002\u0002\u0585\u0586\u0005\u008aF\u0002\u0586\u0587\u0007",
    "\u00a4\u0002\u0002\u0587\u0588\u0007\u0088\u0002\u0002\u0588\u0589\u0005",
    "\u00e0q\u0002\u0589\u00bf\u0003\u0002\u0002\u0002\u058a\u058b\u0007",
    "\u0086\u0002\u0002\u058b\u058c\u0007\u0099\u0002\u0002\u058c\u058d\u0005",
    "\u008aF\u0002\u058d\u058e\u0007\u00a4\u0002\u0002\u058e\u058f\u0007",
    "\u0086\u0002\u0002\u058f\u05a3\u0003\u0002\u0002\u0002\u0590\u0591\u0007",
    "\u008b\u0002\u0002\u0591\u0592\u0007\u0099\u0002\u0002\u0592\u0593\u0005",
    "\u008aF\u0002\u0593\u0594\u0007\u00a4\u0002\u0002\u0594\u0595\u0007",
    "\u008b\u0002\u0002\u0595\u05a3\u0003\u0002\u0002\u0002\u0596\u0597\u0007",
    "\u009b\u0002\u0002\u0597\u0598\u0007\u0099\u0002\u0002\u0598\u0599\u0005",
    "\u008aF\u0002\u0599\u059a\u0007\u00a4\u0002\u0002\u059a\u059b\u0007",
    "\u0094\u0002\u0002\u059b\u05a3\u0003\u0002\u0002\u0002\u059c\u059d\u0007",
    "\u0098\u0002\u0002\u059d\u059e\u0007\u0099\u0002\u0002\u059e\u059f\u0005",
    "\u008aF\u0002\u059f\u05a0\u0007\u00a4\u0002\u0002\u05a0\u05a1\u0007",
    "\u0093\u0002\u0002\u05a1\u05a3\u0003\u0002\u0002\u0002\u05a2\u058a\u0003",
    "\u0002\u0002\u0002\u05a2\u0590\u0003\u0002\u0002\u0002\u05a2\u0596\u0003",
    "\u0002\u0002\u0002\u05a2\u059c\u0003\u0002\u0002\u0002\u05a3\u05a4\u0003",
    "\u0002\u0002\u0002\u05a4\u05a5\u0007\u0088\u0002\u0002\u05a5\u05a6\u0005",
    "\u00e0q\u0002\u05a6\u00c1\u0003\u0002\u0002\u0002\u05a7\u05ac\u0007",
    "\u00af\u0002\u0002\u05a8\u05ac\u0005\u00c4c\u0002\u05a9\u05ac\u0007",
    "\u00aa\u0002\u0002\u05aa\u05ac\u0007\u00ab\u0002\u0002\u05ab\u05a7\u0003",
    "\u0002\u0002\u0002\u05ab\u05a8\u0003\u0002\u0002\u0002\u05ab\u05a9\u0003",
    "\u0002\u0002\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002\u05ac\u05ae\u0003",
    "\u0002\u0002\u0002\u05ad\u05af\u0005\u00c8e\u0002\u05ae\u05ad\u0003",
    "\u0002\u0002\u0002\u05ae\u05af\u0003\u0002\u0002\u0002\u05af\u05b0\u0003",
    "\u0002\u0002\u0002\u05b0\u05b1\u0007\u0088\u0002\u0002\u05b1\u05b2\u0005",
    "\u00e0q\u0002\u05b2\u00c3\u0003\u0002\u0002\u0002\u05b3\u05b4\t\u0006",
    "\u0002\u0002\u05b4\u00c5\u0003\u0002\u0002\u0002\u05b5\u05b6\t\u0007",
    "\u0002\u0002\u05b6\u00c7\u0003\u0002\u0002\u0002\u05b7\u05b8\u0007\u0099",
    "\u0002\u0002\u05b8\u05bd\u0005\u0088E\u0002\u05b9\u05ba\u0007\u0089",
    "\u0002\u0002\u05ba\u05bc\u0005\u0088E\u0002\u05bb\u05b9\u0003\u0002",
    "\u0002\u0002\u05bc\u05bf\u0003\u0002\u0002\u0002\u05bd\u05bb\u0003\u0002",
    "\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05c0\u0003\u0002",
    "\u0002\u0002\u05bf\u05bd\u0003\u0002\u0002\u0002\u05c0\u05c1\u0007\u00a4",
    "\u0002\u0002\u05c1\u00c9\u0003\u0002\u0002\u0002\u05c2\u05c3\u0007\u0005",
    "\u0002\u0002\u05c3\u05c8\u0005\u010e\u0088\u0002\u05c4\u05c5\u0007\u0089",
    "\u0002\u0002\u05c5\u05c7\u0005\u010e\u0088\u0002\u05c6\u05c4\u0003\u0002",
    "\u0002\u0002\u05c7\u05ca\u0003\u0002\u0002\u0002\u05c8\u05c6\u0003\u0002",
    "\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9\u05cb\u0003\u0002",
    "\u0002\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007\u00a6",
    "\u0002\u0002\u05cc\u00cb\u0003\u0002\u0002\u0002\u05cd\u05ce\u0007o",
    "\u0002\u0002\u05ce\u05d1\u0005\u00e2r\u0002\u05cf\u05d0\u0007\u0081",
    "\u0002\u0002\u05d0\u05d2\u0005\u00e2r\u0002\u05d1\u05cf\u0003\u0002",
    "\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002",
    "\u0002\u0002\u05d3\u05d4\u0007\u00a6\u0002\u0002\u05d4\u00cd\u0003\u0002",
    "\u0002\u0002\u05d5\u05d6\u0007)\u0002\u0002\u05d6\u05d9\u0005\u00e2",
    "r\u0002\u05d7\u05d8\u0007\u0081\u0002\u0002\u05d8\u05da\u0005\u00e2",
    "r\u0002\u05d9\u05d7\u0003\u0002\u0002\u0002\u05d9\u05da\u0003\u0002",
    "\u0002\u0002\u05da\u05db\u0003\u0002\u0002\u0002\u05db\u05dc\u0007\u00a6",
    "\u0002\u0002\u05dc\u00cf\u0003\u0002\u0002\u0002\u05dd\u05de\u0007\u0019",
    "\u0002\u0002\u05de\u05e1\u0005\u00e2r\u0002\u05df\u05e0\u0007\u0081",
    "\u0002\u0002\u05e0\u05e2\u0005\u00e2r\u0002\u05e1\u05df\u0003\u0002",
    "\u0002\u0002\u05e1\u05e2\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002",
    "\u0002\u0002\u05e3\u05e4\u0007\u00a6\u0002\u0002\u05e4\u00d1\u0003\u0002",
    "\u0002\u0002\u05e5\u05e6\u0007\u0014\u0002\u0002\u05e6\u05eb\u0005\u0136",
    "\u009c\u0002\u05e7\u05e8\u0007\u0089\u0002\u0002\u05e8\u05ea\u0005\u0136",
    "\u009c\u0002\u05e9\u05e7\u0003\u0002\u0002\u0002\u05ea\u05ed\u0003\u0002",
    "\u0002\u0002\u05eb\u05e9\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002",
    "\u0002\u0002\u05ec\u05ee\u0003\u0002\u0002\u0002\u05ed\u05eb\u0003\u0002",
    "\u0002\u0002\u05ee\u05ef\u0007\u00a6\u0002\u0002\u05ef\u00d3\u0003\u0002",
    "\u0002\u0002\u05f0\u05f1\u0007K\u0002\u0002\u05f1\u05f4\u0005\u00e2",
    "r\u0002\u05f2\u05f3\u0007\u0081\u0002\u0002\u05f3\u05f5\u0005\u00e2",
    "r\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f4\u05f5\u0003\u0002",
    "\u0002\u0002\u05f5\u05f6\u0003\u0002\u0002\u0002\u05f6\u05f7\u0007\u00a6",
    "\u0002\u0002\u05f7\u00d5\u0003\u0002\u0002\u0002\u05f8\u05f9\u0007\u001d",
    "\u0002\u0002\u05f9\u05fc\u0005\u00f4{\u0002\u05fa\u05fb\u0007\u0081",
    "\u0002\u0002\u05fb\u05fd\u0005\u00e2r\u0002\u05fc\u05fa\u0003\u0002",
    "\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003\u0002",
    "\u0002\u0002\u05fe\u05ff\u0007\u00a6\u0002\u0002\u05ff\u00d7\u0003\u0002",
    "\u0002\u0002\u0600\u0602\t\b\u0002\u0002\u0601\u0600\u0003\u0002\u0002",
    "\u0002\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002",
    "\u0002\u0603\u060f\u0007\u001c\u0002\u0002\u0604\u0605\u0007E\u0002",
    "\u0002\u0605\u060a\u0005\u010e\u0088\u0002\u0606\u0607\u0007\u0089\u0002",
    "\u0002\u0607\u0609\u0005\u010e\u0088\u0002\u0608\u0606\u0003\u0002\u0002",
    "\u0002\u0609\u060c\u0003\u0002\u0002\u0002\u060a\u0608\u0003\u0002\u0002",
    "\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060d\u0003\u0002\u0002",
    "\u0002\u060c\u060a\u0003\u0002\u0002\u0002\u060d\u060e\u0007\u00a6\u0002",
    "\u0002\u060e\u0610\u0003\u0002\u0002\u0002\u060f\u0604\u0003\u0002\u0002",
    "\u0002\u060f\u0610\u0003\u0002\u0002\u0002\u0610\u0611\u0003\u0002\u0002",
    "\u0002\u0611\u0614\u0005\u00e2r\u0002\u0612\u0613\u0007\u0081\u0002",
    "\u0002\u0613\u0615\u0005\u00e2r\u0002\u0614\u0612\u0003\u0002\u0002",
    "\u0002\u0614\u0615\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002\u0002",
    "\u0002\u0616\u0617\u0007\u00a6\u0002\u0002\u0617\u00d9\u0003\u0002\u0002",
    "\u0002\u0618\u0619\u0007\u001a\u0002\u0002\u0619\u061c\u0005\u00e2r",
    "\u0002\u061a\u061b\u0007\u0081\u0002\u0002\u061b\u061d\u0005\u00e2r",
    "\u0002\u061c\u061a\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002\u0002",
    "\u0002\u061d\u061e\u0003\u0002\u0002\u0002\u061e\u061f\u0007\u00a6\u0002",
    "\u0002\u061f\u00db\u0003\u0002\u0002\u0002\u0620\u0621\u0007#\u0002",
    "\u0002\u0621\u0624\u0005\u00f4{\u0002\u0622\u0623\u0007\u0081\u0002",
    "\u0002\u0623\u0625\u0005\u00e2r\u0002\u0624\u0622\u0003\u0002\u0002",
    "\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0626\u0003\u0002\u0002",
    "\u0002\u0626\u0627\u0007\u00a6\u0002\u0002\u0627\u00dd\u0003\u0002\u0002",
    "\u0002\u0628\u0629\u0007J\u0002\u0002\u0629\u062c\u0005\u00f4{\u0002",
    "\u062a\u062b\u0007\u0081\u0002\u0002\u062b\u062d\u0005\u00e2r\u0002",
    "\u062c\u062a\u0003\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002",
    "\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u062f\u0007\u00a6\u0002\u0002",
    "\u062f\u00df\u0003\u0002\u0002\u0002\u0630\u0631\u0005\u00eex\u0002",
    "\u0631\u00e1\u0003\u0002\u0002\u0002\u0632\u0635\u0005\u00e4s\u0002",
    "\u0633\u0635\u0005\u00e6t\u0002\u0634\u0632\u0003\u0002\u0002\u0002",
    "\u0634\u0633\u0003\u0002\u0002\u0002\u0635\u00e3\u0003\u0002\u0002\u0002",
    "\u0636\u0637\t\t\u0002\u0002\u0637\u0639\u0005\u008aF\u0002\u0638\u063a",
    "\u0005\u0120\u0091\u0002\u0639\u0638\u0003\u0002\u0002\u0002\u0639\u063a",
    "\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b\u063c",
    "\t\n\u0002\u0002\u063c\u063d\u0007\u0097\u0002\u0002\u063d\u063e\u0005",
    "\u00e2r\u0002\u063e\u063f\u0007\u00a3\u0002\u0002\u063f\u00e5\u0003",
    "\u0002\u0002\u0002\u0640\u065a\u0005\u00e8u\u0002\u0641\u0642\u0007",
    "5\u0002\u0002\u0642\u0644\u0005\u0088E\u0002\u0643\u0645\u0005\u0120",
    "\u0091\u0002\u0644\u0643\u0003\u0002\u0002\u0002\u0644\u0645\u0003\u0002",
    "\u0002\u0002\u0645\u0646\u0003\u0002\u0002\u0002\u0646\u0647\t\u000b",
    "\u0002\u0002\u0647\u0648\u0005\u00e6t\u0002\u0648\u065a\u0003\u0002",
    "\u0002\u0002\u0649\u064a\u0007-\u0002\u0002\u064a\u064c\u0005\u0088",
    "E\u0002\u064b\u064d\u0005\u0120\u0091\u0002\u064c\u064b\u0003\u0002",
    "\u0002\u0002\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002",
    "\u0002\u0002\u064e\u064f\t\u000b\u0002\u0002\u064f\u0650\u0005\u00e6",
    "t\u0002\u0650\u065a\u0003\u0002\u0002\u0002\u0651\u0652\u0007,\u0002",
    "\u0002\u0652\u0654\u0005\u0088E\u0002\u0653\u0655\u0005\u0120\u0091",
    "\u0002\u0654\u0653\u0003\u0002\u0002\u0002\u0654\u0655\u0003\u0002\u0002",
    "\u0002\u0655\u0656\u0003\u0002\u0002\u0002\u0656\u0657\t\u000b\u0002",
    "\u0002\u0657\u0658\u0005\u00e6t\u0002\u0658\u065a\u0003\u0002\u0002",
    "\u0002\u0659\u0640\u0003\u0002\u0002\u0002\u0659\u0641\u0003\u0002\u0002",
    "\u0002\u0659\u0649\u0003\u0002\u0002\u0002\u0659\u0651\u0003\u0002\u0002",
    "\u0002\u065a\u00e7\u0003\u0002\u0002\u0002\u065b\u065e\u0005\u00eav",
    "\u0002\u065c\u065d\t\f\u0002\u0002\u065d\u065f\u0005\u00eav\u0002\u065e",
    "\u065c\u0003\u0002\u0002\u0002\u065e\u065f\u0003\u0002\u0002\u0002\u065f",
    "\u0668\u0003\u0002\u0002\u0002\u0660\u0661\u00078\u0002\u0002\u0661",
    "\u0662\u0005\u00eav\u0002\u0662\u0663\u0007w\u0002\u0002\u0663\u0664",
    "\u0005\u00eav\u0002\u0664\u0665\u0007%\u0002\u0002\u0665\u0666\u0005",
    "\u00eav\u0002\u0666\u0668\u0003\u0002\u0002\u0002\u0667\u065b\u0003",
    "\u0002\u0002\u0002\u0667\u0660\u0003\u0002\u0002\u0002\u0668\u00e9\u0003",
    "\u0002\u0002\u0002\u0669\u0679\u0005\u00ecw\u0002\u066a\u066d\u0005",
    "\u00ecw\u0002\u066b\u066c\u0007\u0007\u0002\u0002\u066c\u066e\u0005",
    "\u00ecw\u0002\u066d\u066b\u0003\u0002\u0002\u0002\u066e\u066f\u0003",
    "\u0002\u0002\u0002\u066f\u066d\u0003\u0002\u0002\u0002\u066f\u0670\u0003",
    "\u0002\u0002\u0002\u0670\u0679\u0003\u0002\u0002\u0002\u0671\u0674\u0005",
    "\u00ecw\u0002\u0672\u0673\u0007X\u0002\u0002\u0673\u0675\u0005\u00ec",
    "w\u0002\u0674\u0672\u0003\u0002\u0002\u0002\u0675\u0676\u0003\u0002",
    "\u0002\u0002\u0676\u0674\u0003\u0002\u0002\u0002\u0676\u0677\u0003\u0002",
    "\u0002\u0002\u0677\u0679\u0003\u0002\u0002\u0002\u0678\u0669\u0003\u0002",
    "\u0002\u0002\u0678\u066a\u0003\u0002\u0002\u0002\u0678\u0671\u0003\u0002",
    "\u0002\u0002\u0679\u00eb\u0003\u0002\u0002\u0002\u067a\u067b\u0005\u00ee",
    "x\u0002\u067b\u067c\t\r\u0002\u0002\u067c\u067d\u0005\u00eex\u0002\u067d",
    "\u067e\t\r\u0002\u0002\u067e\u067f\u0005\u00eex\u0002\u067f\u0686\u0003",
    "\u0002\u0002\u0002\u0680\u0683\u0005\u00eex\u0002\u0681\u0682\t\u000e",
    "\u0002\u0002\u0682\u0684\u0005\u00eex\u0002\u0683\u0681\u0003\u0002",
    "\u0002\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u0686\u0003\u0002",
    "\u0002\u0002\u0685\u067a\u0003\u0002\u0002\u0002\u0685\u0680\u0003\u0002",
    "\u0002\u0002\u0686\u00ed\u0003\u0002\u0002\u0002\u0687\u0688\u0005\u00f0",
    "y\u0002\u0688\u0689\u0007\u00a2\u0002\u0002\u0689\u068a\u0005\u00f0",
    "y\u0002\u068a\u068d\u0003\u0002\u0002\u0002\u068b\u068d\u0005\u00f0",
    "y\u0002\u068c\u0687\u0003\u0002\u0002\u0002\u068c\u068b\u0003\u0002",
    "\u0002\u0002\u068d\u00ef\u0003\u0002\u0002\u0002\u068e\u0691\u0005\u00f2",
    "z\u0002\u068f\u0690\u0007\u0088\u0002\u0002\u0690\u0692\u0005\u00e0",
    "q\u0002\u0691\u068f\u0003\u0002\u0002\u0002\u0691\u0692\u0003\u0002",
    "\u0002\u0002\u0692\u00f1\u0003\u0002\u0002\u0002\u0693\u0696\u0005\u00f4",
    "{\u0002\u0694\u0695\u0007\u0092\u0002\u0002\u0695\u0697\u0005\u00f4",
    "{\u0002\u0696\u0694\u0003\u0002\u0002\u0002\u0696\u0697\u0003\u0002",
    "\u0002\u0002\u0697\u00f3\u0003\u0002\u0002\u0002\u0698\u06a0\u0005\u00f8",
    "}\u0002\u0699\u069b\u0005\u00f8}\u0002\u069a\u069c\u0005\u00f6|\u0002",
    "\u069b\u069a\u0003\u0002\u0002\u0002\u069c\u069d\u0003\u0002\u0002\u0002",
    "\u069d\u069b\u0003\u0002\u0002\u0002\u069d\u069e\u0003\u0002\u0002\u0002",
    "\u069e\u06a0\u0003\u0002\u0002\u0002\u069f\u0698\u0003\u0002\u0002\u0002",
    "\u069f\u0699\u0003\u0002\u0002\u0002\u06a0\u00f5\u0003\u0002\u0002\u0002",
    "\u06a1\u06a2\u0007\u00af\u0002\u0002\u06a2\u06a4\u0007\u00a1\u0002\u0002",
    "\u06a3\u06a1\u0003\u0002\u0002\u0002\u06a3\u06a4\u0003\u0002\u0002\u0002",
    "\u06a4\u06a5\u0003\u0002\u0002\u0002\u06a5\u06a6\t\u000f\u0002\u0002",
    "\u06a6\u06a7\u0005\u00f8}\u0002\u06a7\u00f7\u0003\u0002\u0002\u0002",
    "\u06a8\u06b0\u0005\u00fc\u007f\u0002\u06a9\u06ab\u0005\u00fc\u007f\u0002",
    "\u06aa\u06ac\u0005\u00fa~\u0002\u06ab\u06aa\u0003\u0002\u0002\u0002",
    "\u06ac\u06ad\u0003\u0002\u0002\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002",
    "\u06ad\u06ae\u0003\u0002\u0002\u0002\u06ae\u06b0\u0003\u0002\u0002\u0002",
    "\u06af\u06a8\u0003\u0002\u0002\u0002\u06af\u06a9\u0003\u0002\u0002\u0002",
    "\u06b0\u00f9\u0003\u0002\u0002\u0002\u06b1\u06b2\u0007\u00af\u0002\u0002",
    "\u06b2\u06b4\u0007\u00a1\u0002\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002",
    "\u06b3\u06b4\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002",
    "\u06b5\u06b6\t\u0010\u0002\u0002\u06b6\u06b7\u0005\u00fc\u007f\u0002",
    "\u06b7\u00fb\u0003\u0002\u0002\u0002\u06b8\u06bb\u0005\u00fe\u0080\u0002",
    "\u06b9\u06ba\u0007\u0091\u0002\u0002\u06ba\u06bc\u0005\u00fc\u007f\u0002",
    "\u06bb\u06b9\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002",
    "\u06bc\u00fd\u0003\u0002\u0002\u0002\u06bd\u06be\u0007\u00af\u0002\u0002",
    "\u06be\u06c0\u0007\u00a1\u0002\u0002\u06bf\u06bd\u0003\u0002\u0002\u0002",
    "\u06bf\u06c0\u0003\u0002\u0002\u0002\u06c0\u06c1\u0003\u0002\u0002\u0002",
    "\u06c1\u06c2\u0005\u00c4c\u0002\u06c2\u06c3\u0005\u0100\u0081\u0002",
    "\u06c3\u06c6\u0003\u0002\u0002\u0002\u06c4\u06c6\u0005\u0100\u0081\u0002",
    "\u06c5\u06bf\u0003\u0002\u0002\u0002\u06c5\u06c4\u0003\u0002\u0002\u0002",
    "\u06c6\u00ff\u0003\u0002\u0002\u0002\u06c7\u06d2\u0005\u0102\u0082\u0002",
    "\u06c8\u06d2\u0005\u00e4s\u0002\u06c9\u06d2\u0005\u0106\u0084\u0002",
    "\u06ca\u06d2\u0005\u0108\u0085\u0002\u06cb\u06d2\u0005\u0110\u0089\u0002",
    "\u06cc\u06d2\u0005\u0112\u008a\u0002\u06cd\u06d2\u0005\u0114\u008b\u0002",
    "\u06ce\u06d2\u0005\u0116\u008c\u0002\u06cf\u06d2\u0005\u0118\u008d\u0002",
    "\u06d0\u06d2\u0005\u011e\u0090\u0002\u06d1\u06c7\u0003\u0002\u0002\u0002",
    "\u06d1\u06c8\u0003\u0002\u0002\u0002\u06d1\u06c9\u0003\u0002\u0002\u0002",
    "\u06d1\u06ca\u0003\u0002\u0002\u0002\u06d1\u06cb\u0003\u0002\u0002\u0002",
    "\u06d1\u06cc\u0003\u0002\u0002\u0002\u06d1\u06cd\u0003\u0002\u0002\u0002",
    "\u06d1\u06ce\u0003\u0002\u0002\u0002\u06d1\u06cf\u0003\u0002\u0002\u0002",
    "\u06d1\u06d0\u0003\u0002\u0002\u0002\u06d2\u0101\u0003\u0002\u0002\u0002",
    "\u06d3\u06d5\u0007\u008c\u0002\u0002\u06d4\u06d6\u0005\u0104\u0083\u0002",
    "\u06d5\u06d4\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002",
    "\u06d7\u06d5\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003\u0002\u0002\u0002",
    "\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06da\u0007\u008d\u0002\u0002",
    "\u06da\u0103\u0003\u0002\u0002\u0002\u06db\u06df\u0005\u00f4{\u0002",
    "\u06dc\u06dd\u00078\u0002\u0002\u06dd\u06e0\u0005\u00eav\u0002\u06de",
    "\u06e0\u0007Y\u0002\u0002\u06df\u06dc\u0003\u0002\u0002\u0002\u06df",
    "\u06de\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1",
    "\u06e2\u0007\u00a6\u0002\u0002\u06e2\u0105\u0003\u0002\u0002\u0002\u06e3",
    "\u06ed\u0007\u00a9\u0002\u0002\u06e4\u06e5\u0007\u00af\u0002\u0002\u06e5",
    "\u06e7\u0007\u00a1\u0002\u0002\u06e6\u06e4\u0003\u0002\u0002\u0002\u06e6",
    "\u06e7\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002\u0002\u06e8",
    "\u06ed\u0007\u00aa\u0002\u0002\u06e9\u06ed\u0007\u00ab\u0002\u0002\u06ea",
    "\u06ed\u0007\u00ac\u0002\u0002\u06eb\u06ed\u0007\u00ad\u0002\u0002\u06ec",
    "\u06e3\u0003\u0002\u0002\u0002\u06ec\u06e6\u0003\u0002\u0002\u0002\u06ec",
    "\u06e9\u0003\u0002\u0002\u0002\u06ec\u06ea\u0003\u0002\u0002\u0002\u06ec",
    "\u06eb\u0003\u0002\u0002\u0002\u06ed\u0107\u0003\u0002\u0002\u0002\u06ee",
    "\u06f9\u0005\u011a\u008e\u0002\u06ef\u06f9\u0005\u011c\u008f\u0002\u06f0",
    "\u06f3\u0005\u010a\u0086\u0002\u06f1\u06f2\u0007\u008f\u0002\u0002\u06f2",
    "\u06f4\u0005\u010c\u0087\u0002\u06f3\u06f1\u0003\u0002\u0002\u0002\u06f4",
    "\u06f5\u0003\u0002\u0002\u0002\u06f5\u06f3\u0003\u0002\u0002\u0002\u06f5",
    "\u06f6\u0003\u0002\u0002\u0002\u06f6\u06f9\u0003\u0002\u0002\u0002\u06f7",
    "\u06f9\u0005\u010a\u0086\u0002\u06f8\u06ee\u0003\u0002\u0002\u0002\u06f8",
    "\u06ef\u0003\u0002\u0002\u0002\u06f8\u06f0\u0003\u0002\u0002\u0002\u06f8",
    "\u06f7\u0003\u0002\u0002\u0002\u06f9\u0109\u0003\u0002\u0002\u0002\u06fa",
    "\u06fb\u0007\u0096\u0002\u0002\u06fb\u06fe\u0005\u010c\u0087\u0002\u06fc",
    "\u06fe\u0005\u010c\u0087\u0002\u06fd\u06fa\u0003\u0002\u0002\u0002\u06fd",
    "\u06fc\u0003\u0002\u0002\u0002\u06fe\u010b\u0003\u0002\u0002\u0002\u06ff",
    "\u0700\u0007\u00af\u0002\u0002\u0700\u0702\u0007\u00a1\u0002\u0002\u0701",
    "\u06ff\u0003\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002\u0002\u0702",
    "\u0703\u0003\u0002\u0002\u0002\u0703\u0706\u0007\u00af\u0002\u0002\u0704",
    "\u0705\u0007\u0087\u0002\u0002\u0705\u0707\u0005\u011e\u0090\u0002\u0706",
    "\u0704\u0003\u0002\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707",
    "\u0708\u0003\u0002\u0002\u0002\u0708\u0709\u0007\u0099\u0002\u0002\u0709",
    "\u070e\u0005\u00e2r\u0002\u070a\u070b\u0007\u0089\u0002\u0002\u070b",
    "\u070d\u0005\u00e2r\u0002\u070c\u070a\u0003\u0002\u0002\u0002\u070d",
    "\u0710\u0003\u0002\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070e",
    "\u070f\u0003\u0002\u0002\u0002\u070f\u0711\u0003\u0002\u0002\u0002\u0710",
    "\u070e\u0003\u0002\u0002\u0002\u0711\u0712\u0007\u00a4\u0002\u0002\u0712",
    "\u0721\u0003\u0002\u0002\u0002\u0713\u0721\u0005\u011c\u008f\u0002\u0714",
    "\u0721\u0005\u010e\u0088\u0002\u0715\u0718\u0007V\u0002\u0002\u0716",
    "\u0717\u0007\u00af\u0002\u0002\u0717\u0719\u0007\u00a1\u0002\u0002\u0718",
    "\u0716\u0003\u0002\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002\u0719",
    "\u071e\u0003\u0002\u0002\u0002\u071a\u071f\u0005\u00c6d\u0002\u071b",
    "\u071f\u0007O\u0002\u0002\u071c\u071f\u0007\u0003\u0002\u0002\u071d",
    "\u071f\u0007\u0016\u0002\u0002\u071e\u071a\u0003\u0002\u0002\u0002\u071e",
    "\u071b\u0003\u0002\u0002\u0002\u071e\u071c\u0003\u0002\u0002\u0002\u071e",
    "\u071d\u0003\u0002\u0002\u0002\u071f\u0721\u0003\u0002\u0002\u0002\u0720",
    "\u0701\u0003\u0002\u0002\u0002\u0720\u0713\u0003\u0002\u0002\u0002\u0720",
    "\u0714\u0003\u0002\u0002\u0002\u0720\u0715\u0003\u0002\u0002\u0002\u0721",
    "\u010d\u0003\u0002\u0002\u0002\u0722\u0723\u0007\u00af\u0002\u0002\u0723",
    "\u0725\u0007\u00a1\u0002\u0002\u0724\u0722\u0003\u0002\u0002\u0002\u0724",
    "\u0725\u0003\u0002\u0002\u0002\u0725\u0726\u0003\u0002\u0002\u0002\u0726",
    "\u0727\u0007\u00af\u0002\u0002\u0727\u010f\u0003\u0002\u0002\u0002\u0728",
    "\u0729\u0007\u009b\u0002\u0002\u0729\u072a\u0005\u00eex\u0002\u072a",
    "\u072b\u0007\u0094\u0002\u0002\u072b\u0739\u0003\u0002\u0002\u0002\u072c",
    "\u072d\u0007\u0098\u0002\u0002\u072d\u072e\u0005\u00e2r\u0002\u072e",
    "\u072f\u0007\u0093\u0002\u0002\u072f\u0739\u0003\u0002\u0002\u0002\u0730",
    "\u0731\u0007\u0086\u0002\u0002\u0731\u0732\u0005\u00e2r\u0002\u0732",
    "\u0733\u0007\u0086\u0002\u0002\u0733\u0739\u0003\u0002\u0002\u0002\u0734",
    "\u0735\u0007\u008b\u0002\u0002\u0735\u0736\u0005\u00e2r\u0002\u0736",
    "\u0737\u0007\u008b\u0002\u0002\u0737\u0739\u0003\u0002\u0002\u0002\u0738",
    "\u0728\u0003\u0002\u0002\u0002\u0738\u072c\u0003\u0002\u0002\u0002\u0738",
    "\u0730\u0003\u0002\u0002\u0002\u0738\u0734\u0003\u0002\u0002\u0002\u0739",
    "\u0111\u0003\u0002\u0002\u0002\u073a\u073b\u0007\u0097\u0002\u0002\u073b",
    "\u073d\u0005\u008aF\u0002\u073c\u073e\u0005\u0120\u0091\u0002\u073d",
    "\u073c\u0003\u0002\u0002\u0002\u073d\u073e\u0003\u0002\u0002\u0002\u073e",
    "\u073f\u0003\u0002\u0002\u0002\u073f\u0740\u0007\u0086\u0002\u0002\u0740",
    "\u0741\u0005\u00e2r\u0002\u0741\u0742\u0007\u00a3\u0002\u0002\u0742",
    "\u0750\u0003\u0002\u0002\u0002\u0743\u074c\u0007\u0097\u0002\u0002\u0744",
    "\u0749\u0005\u00e2r\u0002\u0745\u0746\u0007\u0089\u0002\u0002\u0746",
    "\u0748\u0005\u00e2r\u0002\u0747\u0745\u0003\u0002\u0002\u0002\u0748",
    "\u074b\u0003\u0002\u0002\u0002\u0749\u0747\u0003\u0002\u0002\u0002\u0749",
    "\u074a\u0003\u0002\u0002\u0002\u074a\u074d\u0003\u0002\u0002\u0002\u074b",
    "\u0749\u0003\u0002\u0002\u0002\u074c\u0744\u0003\u0002\u0002\u0002\u074c",
    "\u074d\u0003\u0002\u0002\u0002\u074d\u074e\u0003\u0002\u0002\u0002\u074e",
    "\u0750\u0007\u00a3\u0002\u0002\u074f\u073a\u0003\u0002\u0002\u0002\u074f",
    "\u0743\u0003\u0002\u0002\u0002\u0750\u0113\u0003\u0002\u0002\u0002\u0751",
    "\u0752\u0007\u0099\u0002\u0002\u0752\u0753\u0005\u00e2r\u0002\u0753",
    "\u0754\u0007\u0089\u0002\u0002\u0754\u0755\u0005\u00e2r\u0002\u0755",
    "\u0756\u0007\u00a4\u0002\u0002\u0756\u0115\u0003\u0002\u0002\u0002\u0757",
    "\u0758\u0007H\u0002\u0002\u0758\u0759\u0007\u0099\u0002\u0002\u0759",
    "\u075e\u0005\u0088E\u0002\u075a\u075b\u0007\u0089\u0002\u0002\u075b",
    "\u075d\u0005\u0088E\u0002\u075c\u075a\u0003\u0002\u0002\u0002\u075d",
    "\u0760\u0003\u0002\u0002\u0002\u075e\u075c\u0003\u0002\u0002\u0002\u075e",
    "\u075f\u0003\u0002\u0002\u0002\u075f\u0761\u0003\u0002\u0002\u0002\u0760",
    "\u075e\u0003\u0002\u0002\u0002\u0761\u0762\u0007\u00a4\u0002\u0002\u0762",
    "\u0763\u0007\u008f\u0002\u0002\u0763\u0764\u0007\u0099\u0002\u0002\u0764",
    "\u0765\u0005\u00e2r\u0002\u0765\u0766\u0007\u00a4\u0002\u0002\u0766",
    "\u0117\u0003\u0002\u0002\u0002\u0767\u076b\u0007\u0011\u0002\u0002\u0768",
    "\u0769\u0005\u0088E\u0002\u0769\u076a\u0007\u00a6\u0002\u0002\u076a",
    "\u076c\u0003\u0002\u0002\u0002\u076b\u0768\u0003\u0002\u0002\u0002\u076c",
    "\u076d\u0003\u0002\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002\u076d",
    "\u076e\u0003\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002\u0002\u076f",
    "\u0770\u0007&\u0002\u0002\u0770\u0119\u0003\u0002\u0002\u0002\u0771",
    "\u0772\u0007h\u0002\u0002\u0772\u0773\u0007\u008f\u0002\u0002\u0773",
    "\u0778\u0005\u010e\u0088\u0002\u0774\u0775\u0007h\u0002\u0002\u0775",
    "\u0776\u0007\u008f\u0002\u0002\u0776\u0778\u0005\u0108\u0085\u0002\u0777",
    "\u0771\u0003\u0002\u0002\u0002\u0777\u0774\u0003\u0002\u0002\u0002\u0778",
    "\u011b\u0003\u0002\u0002\u0002\u0779\u077a\u0005\u010e\u0088\u0002\u077a",
    "\u077b\u0007\u008f\u0002\u0002\u077b\u077c\u0007f\u0002\u0002\u077c",
    "\u011d\u0003\u0002\u0002\u0002\u077d\u077e\u0007\u0099\u0002\u0002\u077e",
    "\u077f\u0005\u00e2r\u0002\u077f\u0780\u0007\u00a4\u0002\u0002\u0780",
    "\u011f\u0003\u0002\u0002\u0002\u0781\u0782\u0007\u0080\u0002\u0002\u0782",
    "\u0783\u0005\u00e2r\u0002\u0783\u0121\u0003\u0002\u0002\u0002\u0784",
    "\u0785\b\u0092\u0001\u0002\u0785\u0786\u0005\u0124\u0093\u0002\u0786",
    "\u078c\u0003\u0002\u0002\u0002\u0787\u0788\f\u0004\u0002\u0002\u0788",
    "\u0789\t\u0011\u0002\u0002\u0789\u078b\u0005\u0122\u0092\u0005\u078a",
    "\u0787\u0003\u0002\u0002\u0002\u078b\u078e\u0003\u0002\u0002\u0002\u078c",
    "\u078a\u0003\u0002\u0002\u0002\u078c\u078d\u0003\u0002\u0002\u0002\u078d",
    "\u0123\u0003\u0002\u0002\u0002\u078e\u078c\u0003\u0002\u0002\u0002\u078f",
    "\u0792\u0005\u0126\u0094\u0002\u0790\u0791\u0007\u0091\u0002\u0002\u0791",
    "\u0793\u0005\u0124\u0093\u0002\u0792\u0790\u0003\u0002\u0002\u0002\u0792",
    "\u0793\u0003\u0002\u0002\u0002\u0793\u0125\u0003\u0002\u0002\u0002\u0794",
    "\u0795\t\u0012\u0002\u0002\u0795\u0798\u0005\u0122\u0092\u0002\u0796",
    "\u0798\u0005\u0128\u0095\u0002\u0797\u0794\u0003\u0002\u0002\u0002\u0797",
    "\u0796\u0003\u0002\u0002\u0002\u0798\u0127\u0003\u0002\u0002\u0002\u0799",
    "\u07a1\u0005\u012a\u0096\u0002\u079a\u07a1\u0005\u012c\u0097\u0002\u079b",
    "\u07a1\u0005\u012e\u0098\u0002\u079c\u079d\u0007\u0099\u0002\u0002\u079d",
    "\u079e\u0005\u0122\u0092\u0002\u079e\u079f\u0007\u00a4\u0002\u0002\u079f",
    "\u07a1\u0003\u0002\u0002\u0002\u07a0\u0799\u0003\u0002\u0002\u0002\u07a0",
    "\u079a\u0003\u0002\u0002\u0002\u07a0\u079b\u0003\u0002\u0002\u0002\u07a0",
    "\u079c\u0003\u0002\u0002\u0002\u07a1\u0129\u0003\u0002\u0002\u0002\u07a2",
    "\u07a6\u0007\u00aa\u0002\u0002\u07a3\u07a6\u0007\u00ac\u0002\u0002\u07a4",
    "\u07a6\u0007\u00ad\u0002\u0002\u07a5\u07a2\u0003\u0002\u0002\u0002\u07a5",
    "\u07a3\u0003\u0002\u0002\u0002\u07a5\u07a4\u0003\u0002\u0002\u0002\u07a6",
    "\u012b\u0003\u0002\u0002\u0002\u07a7\u07a8\u0007\u00af\u0002\u0002\u07a8",
    "\u07aa\u0007\u00a1\u0002\u0002\u07a9\u07a7\u0003\u0002\u0002\u0002\u07a9",
    "\u07aa\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002\u0002\u0002\u07ab",
    "\u07ac\u0007\u00af\u0002\u0002\u07ac\u07b5\u0007\u0099\u0002\u0002\u07ad",
    "\u07b2\u0005\u0122\u0092\u0002\u07ae\u07af\u0007\u0089\u0002\u0002\u07af",
    "\u07b1\u0005\u0122\u0092\u0002\u07b0\u07ae\u0003\u0002\u0002\u0002\u07b1",
    "\u07b4\u0003\u0002\u0002\u0002\u07b2\u07b0\u0003\u0002\u0002\u0002\u07b2",
    "\u07b3\u0003\u0002\u0002\u0002\u07b3\u07b6\u0003\u0002\u0002\u0002\u07b4",
    "\u07b2\u0003\u0002\u0002\u0002\u07b5\u07ad\u0003\u0002\u0002\u0002\u07b5",
    "\u07b6\u0003\u0002\u0002\u0002\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7",
    "\u07b8\u0007\u00a4\u0002\u0002\u07b8\u012d\u0003\u0002\u0002\u0002\u07b9",
    "\u07be\u0005\u0130\u0099\u0002\u07ba\u07be\u0005\u0132\u009a\u0002\u07bb",
    "\u07be\u0005\u0134\u009b\u0002\u07bc\u07be\u0005\u0136\u009c\u0002\u07bd",
    "\u07b9\u0003\u0002\u0002\u0002\u07bd\u07ba\u0003\u0002\u0002\u0002\u07bd",
    "\u07bb\u0003\u0002\u0002\u0002\u07bd\u07bc\u0003\u0002\u0002\u0002\u07be",
    "\u012f\u0003\u0002\u0002\u0002\u07bf\u07c2\u0005\u0136\u009c\u0002\u07c0",
    "\u07c1\u0007\u008f\u0002\u0002\u07c1\u07c3\u0005\u0136\u009c\u0002\u07c2",
    "\u07c0\u0003\u0002\u0002\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4",
    "\u07c2\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5",
    "\u0131\u0003\u0002\u0002\u0002\u07c6\u07cb\u0005\u0136\u009c\u0002\u07c7",
    "\u07c8\u0007\u008f\u0002\u0002\u07c8\u07ca\u0005\u0136\u009c\u0002\u07c9",
    "\u07c7\u0003\u0002\u0002\u0002\u07ca\u07cd\u0003\u0002\u0002\u0002\u07cb",
    "\u07c9\u0003\u0002\u0002\u0002\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc",
    "\u07ce\u0003\u0002\u0002\u0002\u07cd\u07cb\u0003\u0002\u0002\u0002\u07ce",
    "\u07cf\u0007\u008f\u0002\u0002\u07cf\u07d0\u0005\u0134\u009b\u0002\u07d0",
    "\u0133\u0003\u0002\u0002\u0002\u07d1\u07d2\u0005\u0136\u009c\u0002\u07d2",
    "\u07d3\u0007\u009a\u0002\u0002\u07d3\u07d4\u0005\u0122\u0092\u0002\u07d4",
    "\u07d5\u0007\u00a5\u0002\u0002\u07d5\u0135\u0003\u0002\u0002\u0002\u07d6",
    "\u07d7\u0007\u00af\u0002\u0002\u07d7\u07d9\u0007\u00a1\u0002\u0002\u07d8",
    "\u07d6\u0003\u0002\u0002\u0002\u07d8\u07d9\u0003\u0002\u0002\u0002\u07d9",
    "\u07da\u0003\u0002\u0002\u0002\u07da\u07db\u0007\u00af\u0002\u0002\u07db",
    "\u0137\u0003\u0002\u0002\u0002\u00f3\u0141\u0147\u014a\u0153\u0159\u015f",
    "\u0162\u0165\u016f\u0176\u017c\u0181\u0185\u0188\u018b\u0195\u019d\u01a2",
    "\u01a6\u01af\u01b4\u01b7\u01ba\u01c4\u01c9\u01ce\u01d4\u01d7\u01da\u01e4",
    "\u01e9\u01ee\u01f2\u01fa\u01fd\u0200\u020a\u0212\u0217\u021f\u0222\u0225",
    "\u022f\u0236\u023b\u0247\u024a\u024d\u0257\u025c\u0264\u0271\u0274\u027e",
    "\u0288\u0299\u02a4\u02b5\u02c7\u02cb\u02ce\u02d1\u02dc\u02e1\u02e5\u02e8",
    "\u02eb\u02ee\u02f9\u02fe\u0302\u0305\u0308\u0316\u0319\u031c\u0326\u032e",
    "\u0331\u0334\u033d\u0341\u0344\u0347\u034e\u0351\u0355\u0358\u035c\u0361",
    "\u0367\u036d\u0375\u037a\u0380\u0386\u038e\u0391\u0394\u0399\u039f\u03a5",
    "\u03ad\u03b0\u03b3\u03b8\u03be\u03c4\u03cc\u03cf\u03d3\u03d6\u03dd\u03e1",
    "\u03e6\u03ec\u03f2\u03ff\u0403\u0409\u040f\u0415\u0421\u0427\u042d\u043b",
    "\u0441\u0447\u0453\u0457\u045a\u045d\u0464\u0468\u046b\u0472\u0477\u047b",
    "\u0482\u0485\u048a\u0493\u0499\u04a0\u04a3\u04ab\u04b7\u04c6\u04cc\u04de",
    "\u04fe\u0502\u050b\u0511\u0514\u051b\u052b\u053e\u054b\u056c\u0575\u057b",
    "\u0582\u05a2\u05ab\u05ae\u05bd\u05c8\u05d1\u05d9\u05e1\u05eb\u05f4\u05fc",
    "\u0601\u060a\u060f\u0614\u061c\u0624\u062c\u0634\u0639\u0644\u064c\u0654",
    "\u0659\u065e\u0667\u066f\u0676\u0678\u0683\u0685\u068c\u0691\u0696\u069d",
    "\u069f\u06a3\u06ad\u06af\u06b3\u06bb\u06bf\u06c5\u06d1\u06d7\u06df\u06e6",
    "\u06ec\u06f5\u06f8\u06fd\u0701\u0706\u070e\u0718\u071e\u0720\u0724\u0738",
    "\u073d\u0749\u074c\u074f\u075e\u076d\u0777\u078c\u0792\u0797\u07a0\u07a5",
    "\u07a9\u07b2\u07b5\u07bd\u07c4\u07cb\u07d8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'abs'", "'Abstract_Var'", "'affects'", null, 
                     "'and'", "'Array'", "'Axiom'", "'Base_Case'", "'Big_Concatenation'", 
                     "'Big_Intersection'", "'Big_Product'", "'Big_Sum'", 
                     "'Big_Union'", "'by'", "'Cart_Prod'", "'Case'", "'Categorical'", 
                     "'changing'", null, "'complement'", "'Concept'", "'Confirm'", 
                     null, null, "'Corollary'", "'correspondence'", "'decreasing'", 
                     "'Defines'", null, "'dependent'", "'div'", "'do'", 
                     "'duration'", "'elapsed_time'", "'else'", "'end'", 
                     "'enhanced'", "'Enhancement'", "'ensures'", null, "'exemplar'", 
                     null, null, "'externally'", "'Facility'", "'Facility_Finalization'", 
                     "'Facility_Initialization'", "'Family'", "'finalization'", 
                     null, null, "'Forget'", "'from'", null, "'iff'", "'Implicit'", 
                     "'implies'", "'is_in'", "'independent'", "'Inductive'", 
                     "'(i.)'", "'(ii.)'", "'initialization'", "'instantiation'", 
                     "'intersection'", "'introduces'", "'involves'", "'is'", 
                     "'Iterate'", "'lambda'", "'Lemma'", "'mainp_disp'", 
                     "'maintaining'", "'mod'", "'modeled'", "'modus'", "'not'", 
                     "'is_not_in'", "'is_not_proper_subset_of'", "'is_not_subset_of'", 
                     "'is_not_substring_of'", "'of'", "'on'", "'op'", null, 
                     "'or'", "'otherwise'", "'perf_finalization'", "'perf_initialization'", 
                     "'ponens'", "'Precis'", null, "'Presume'", "'Profile'", 
                     null, "'Property'", "'is_proper_subset_of'", "'Realization'", 
                     "'realized'", "'Receptacles'", "'Record'", "'recp'", 
                     "'Recursive'", "'related'", "'rem'", "'Remember'", 
                     null, "'represented'", "'requires'", null, "'Shared'", 
                     "'Shared Variables'", "'short_for'", "'is_subset_of'", 
                     "'is_substring_of'", "'such that'", "'then'", "'Theorem'", 
                     "'Theorem (Associative)'", "'Theorem (Commutative)'", 
                     null, "'union'", null, "'uses'", "'Var'", "'where'", 
                     "'which_entails'", "'While'", "'without'", "'with_profile'", 
                     "':='", "'|'", "'^'", "':'", "','", "'o'", "'||'", 
                     "'{{'", "'}}'", "'/'", "'.'", "'='", "'**'", "'->'", 
                     "'>>'", "'>'", "'>='", "'#'", "'{'", "'<<'", "'('", 
                     "'['", "'<'", "'<='", "'-'", "'*'", "'/='", "'+'", 
                     "'::'", "'..'", "'}'", "')'", "']'", "';'", "':=:'", 
                     "'~'" ];

var symbolicNames = [ null, "ABS", "ABSTRACT_VAR", "AFFECTS", "ALTERS", 
                      "AND", "ARRAY", "AXIOM", "BASECASE", "BIG_CONCAT", 
                      "BIG_INTERSECT", "BIG_PRODUCT", "BIG_SUM", "BIG_UNION", 
                      "BY", "CARTPROD", "CASE", "CATEGORICAL", "CHANGING", 
                      "CLEARS", "COMPLEMENT", "CONCEPT", "CONFIRM", "CONSTRAINT", 
                      "CONVENTION", "COROLLARY", "CORR", "DECREASING", "DEFINES", 
                      "DEFINITION", "DEPENDENT", "DIV", "DO", "DURATION", 
                      "ELAPSED_TIME", "ELSE", "END", "ENHANCED", "ENHANCEMENT", 
                      "ENSURES", "EVALUATES", "EXEMPLAR", "EXISTS", "EXISTS_UNIQUE", 
                      "EXTERNALLY", "FACILITY", "FAC_FINAL", "FAC_INIT", 
                      "FAMILY", "FINALIZATION", "FOR", "FORALL", "FORGET", 
                      "FROM", "IF", "IFF", "IMPLICIT", "IMPLIES", "IN", 
                      "INDEPENDENT", "INDUCTIVE", "INDUCTIVE_BASE_NUM", 
                      "INDUCTIVE_HYP_NUM", "INITIALIZATION", "INSTANTIATION", 
                      "INTERSECTION", "INTRODUCES", "INVOLVES", "IS", "ITERATE", 
                      "LAMBDA", "LEMMA", "MAINP_DISP", "MAINTAINING", "MOD", 
                      "MODELED", "MODUS", "NOT", "NOT_IN", "NOT_PROP_SUBSET", 
                      "NOT_SUBSET", "NOT_SUBSTR", "OF", "ON", "OP", "OPERATION", 
                      "OR", "OTHERWISE", "PERF_FINAL", "PERF_INIT", "PONENS", 
                      "PRECIS", "PRESERVES", "PRESUME", "PROFILE", "PROCEDURE", 
                      "PROPERTY", "PROP_SUBSET", "REALIZATION", "REALIZED", 
                      "RECEPTACLES", "RECORD", "RECP", "RECURSIVE", "RELATED", 
                      "REM", "REMEMBER", "REPLACES", "REPRESENTED", "REQUIRES", 
                      "RESTORES", "SHARED", "SHAREDVARIABLES", "SHORT_FOR", 
                      "SUBSET", "SUBSTR", "SUCHTHAT", "THEN", "THEOREM", 
                      "THEOREM_ASSOCIATIVE", "THEOREM_COMMUTATIVE", "TYPE", 
                      "UNION", "UPDATES", "USES", "VAR", "WHERE", "WHICH_ENTAILS", 
                      "WHILE", "WITHOUT", "WITH_PROFILE", "ASSIGN_OP", "BAR", 
                      "CARAT", "COLON", "COMMA", "CONCAT", "DBL_BAR", "DBL_LBRACE", 
                      "DBL_RBRACE", "DIVIDE", "DOT", "EQL", "EXP", "FUNCARROW", 
                      "GG", "GT", "GT_EQL", "HASH", "LBRACE", "LL", "LPAREN", 
                      "LSQBRACK", "LT", "LT_EQL", "MINUS", "MULTIPLY", "NOT_EQL", 
                      "PLUS", "QUALIFIER", "RANGE", "RBRACE", "RPAREN", 
                      "RSQBRACK", "SEMICOLON", "SWAP_OP", "TILDE", "BOOLEAN_LITERAL", 
                      "INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
                      "STRING_LITERAL", "COMMENT", "IDENTIFIER", "LETTER", 
                      "LETTER_OR_DIGIT", "LINE_COMMENT", "SPACE" ];

var ruleNames =  [ "module", "precisModule", "precisItems", "precisItem", 
                   "facilityModule", "facilityItems", "facilityItem", "shortFacilityModule", 
                   "conceptModule", "conceptItems", "conceptItem", "conceptImplModule", 
                   "conceptImplItems", "conceptImplItem", "enhancementModule", 
                   "enhancementItems", "enhancementItem", "enhancementImplModule", 
                   "implItems", "implItem", "conceptPerformanceModule", 
                   "conceptPerformanceItems", "conceptPerformanceItem", 
                   "enhancementPerformanceModule", "enhancementPerformanceItems", 
                   "enhancementPerformanceItem", "usesList", "usesItem", 
                   "operationParameterList", "moduleParameterList", "moduleParameterDecl", 
                   "definitionParameterDecl", "typeParameterDecl", "constantParameterDecl", 
                   "operationParameterDecl", "conceptImplParameterDecl", 
                   "parameterDecl", "parameterMode", "programNamedType", 
                   "programArrayType", "programRecordType", "typeModelDecl", 
                   "typeRepresentationDecl", "facilityTypeRepresentationDecl", 
                   "performanceTypeModelDecl", "definitionVariable", "sharedStateDecl", 
                   "sharedStateRepresentationDecl", "specModelInit", "specModelFinal", 
                   "representationInit", "representationFinal", "facilityRepresentationInit", 
                   "facilityRepresentationFinal", "performanceSpecModelInit", 
                   "performanceSpecModelFinal", "procedureDecl", "recursiveProcedureDecl", 
                   "operationProcedureDecl", "recursiveOperationProcedureDecl", 
                   "operationDecl", "performanceOperationDecl", "facilityDecl", 
                   "conceptEnhancementDecl", "enhancementPairDecl", "moduleArgumentList", 
                   "moduleArgument", "mathVariableDeclGroup", "mathVariableDecl", 
                   "variableDeclGroup", "variableDecl", "moduleStateVariableDecl", 
                   "stmt", "assignStmt", "swapStmt", "callStmt", "presumeStmt", 
                   "confirmStmt", "memoryStmt", "ifStmt", "elsePart", "whileStmt", 
                   "mathTypeTheoremDecl", "mathAssertionDecl", "mathTheoremIdent", 
                   "mathTypeDefinitionDecl", "mathDefinesDecl", "mathDefinitionDecl", 
                   "mathCategoricalDecl", "mathImplicitDefinitionDecl", 
                   "mathInductiveDefinitionDecl", "mathStandardDefinitionDecl", 
                   "categoricalDefinitionSignature", "definitionSignature", 
                   "standardInfixSignature", "standardOutfixSignature", 
                   "standardPrefixSignature", "prefixOp", "infixOp", "definitionParameterList", 
                   "affectsClause", "requiresClause", "ensuresClause", "constraintClause", 
                   "changingClause", "maintainingClause", "decreasingClause", 
                   "correspondenceClause", "conventionClause", "durationClause", 
                   "manipulationDispClause", "mathTypeExp", "mathExp", "mathIteratedExp", 
                   "mathQuantifiedExp", "mathImpliesExp", "mathLogicalExp", 
                   "mathRelationalExp", "mathInfixExp", "mathTypeAssertionExp", 
                   "mathFunctionTypeExp", "mathAddingExp", "mathRepeatAddExp", 
                   "mathMultiplyingExp", "mathRepeatMultExp", "mathExponentialExp", 
                   "mathPrefixExp", "mathPrimaryExp", "mathAlternativeExp", 
                   "mathAlternativeExpItem", "mathLiteralExp", "mathDotExp", 
                   "mathFunctionApplicationExp", "mathCleanFunctionExp", 
                   "mathVarNameExp", "mathOutfixExp", "mathSetExp", "mathTupleExp", 
                   "mathLambdaExp", "mathTaggedCartProdTypeExp", "mathRecpExp", 
                   "mathTypeReceptaclesExp", "mathNestedExp", "mathWhereExp", 
                   "progExp", "progExponential", "progUnary", "progPrimary", 
                   "progLiteral", "progParamExp", "progVariableExp", "progVarDotExp", 
                   "progVarDotArrayExp", "progVarArrayExp", "progVarNameExp" ];

function ResolveParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ResolveParser.prototype = Object.create(antlr4.Parser.prototype);
ResolveParser.prototype.constructor = ResolveParser;

Object.defineProperty(ResolveParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ResolveParser.EOF = antlr4.Token.EOF;
ResolveParser.ABS = 1;
ResolveParser.ABSTRACT_VAR = 2;
ResolveParser.AFFECTS = 3;
ResolveParser.ALTERS = 4;
ResolveParser.AND = 5;
ResolveParser.ARRAY = 6;
ResolveParser.AXIOM = 7;
ResolveParser.BASECASE = 8;
ResolveParser.BIG_CONCAT = 9;
ResolveParser.BIG_INTERSECT = 10;
ResolveParser.BIG_PRODUCT = 11;
ResolveParser.BIG_SUM = 12;
ResolveParser.BIG_UNION = 13;
ResolveParser.BY = 14;
ResolveParser.CARTPROD = 15;
ResolveParser.CASE = 16;
ResolveParser.CATEGORICAL = 17;
ResolveParser.CHANGING = 18;
ResolveParser.CLEARS = 19;
ResolveParser.COMPLEMENT = 20;
ResolveParser.CONCEPT = 21;
ResolveParser.CONFIRM = 22;
ResolveParser.CONSTRAINT = 23;
ResolveParser.CONVENTION = 24;
ResolveParser.COROLLARY = 25;
ResolveParser.CORR = 26;
ResolveParser.DECREASING = 27;
ResolveParser.DEFINES = 28;
ResolveParser.DEFINITION = 29;
ResolveParser.DEPENDENT = 30;
ResolveParser.DIV = 31;
ResolveParser.DO = 32;
ResolveParser.DURATION = 33;
ResolveParser.ELAPSED_TIME = 34;
ResolveParser.ELSE = 35;
ResolveParser.END = 36;
ResolveParser.ENHANCED = 37;
ResolveParser.ENHANCEMENT = 38;
ResolveParser.ENSURES = 39;
ResolveParser.EVALUATES = 40;
ResolveParser.EXEMPLAR = 41;
ResolveParser.EXISTS = 42;
ResolveParser.EXISTS_UNIQUE = 43;
ResolveParser.EXTERNALLY = 44;
ResolveParser.FACILITY = 45;
ResolveParser.FAC_FINAL = 46;
ResolveParser.FAC_INIT = 47;
ResolveParser.FAMILY = 48;
ResolveParser.FINALIZATION = 49;
ResolveParser.FOR = 50;
ResolveParser.FORALL = 51;
ResolveParser.FORGET = 52;
ResolveParser.FROM = 53;
ResolveParser.IF = 54;
ResolveParser.IFF = 55;
ResolveParser.IMPLICIT = 56;
ResolveParser.IMPLIES = 57;
ResolveParser.IN = 58;
ResolveParser.INDEPENDENT = 59;
ResolveParser.INDUCTIVE = 60;
ResolveParser.INDUCTIVE_BASE_NUM = 61;
ResolveParser.INDUCTIVE_HYP_NUM = 62;
ResolveParser.INITIALIZATION = 63;
ResolveParser.INSTANTIATION = 64;
ResolveParser.INTERSECTION = 65;
ResolveParser.INTRODUCES = 66;
ResolveParser.INVOLVES = 67;
ResolveParser.IS = 68;
ResolveParser.ITERATE = 69;
ResolveParser.LAMBDA = 70;
ResolveParser.LEMMA = 71;
ResolveParser.MAINP_DISP = 72;
ResolveParser.MAINTAINING = 73;
ResolveParser.MOD = 74;
ResolveParser.MODELED = 75;
ResolveParser.MODUS = 76;
ResolveParser.NOT = 77;
ResolveParser.NOT_IN = 78;
ResolveParser.NOT_PROP_SUBSET = 79;
ResolveParser.NOT_SUBSET = 80;
ResolveParser.NOT_SUBSTR = 81;
ResolveParser.OF = 82;
ResolveParser.ON = 83;
ResolveParser.OP = 84;
ResolveParser.OPERATION = 85;
ResolveParser.OR = 86;
ResolveParser.OTHERWISE = 87;
ResolveParser.PERF_FINAL = 88;
ResolveParser.PERF_INIT = 89;
ResolveParser.PONENS = 90;
ResolveParser.PRECIS = 91;
ResolveParser.PRESERVES = 92;
ResolveParser.PRESUME = 93;
ResolveParser.PROFILE = 94;
ResolveParser.PROCEDURE = 95;
ResolveParser.PROPERTY = 96;
ResolveParser.PROP_SUBSET = 97;
ResolveParser.REALIZATION = 98;
ResolveParser.REALIZED = 99;
ResolveParser.RECEPTACLES = 100;
ResolveParser.RECORD = 101;
ResolveParser.RECP = 102;
ResolveParser.RECURSIVE = 103;
ResolveParser.RELATED = 104;
ResolveParser.REM = 105;
ResolveParser.REMEMBER = 106;
ResolveParser.REPLACES = 107;
ResolveParser.REPRESENTED = 108;
ResolveParser.REQUIRES = 109;
ResolveParser.RESTORES = 110;
ResolveParser.SHARED = 111;
ResolveParser.SHAREDVARIABLES = 112;
ResolveParser.SHORT_FOR = 113;
ResolveParser.SUBSET = 114;
ResolveParser.SUBSTR = 115;
ResolveParser.SUCHTHAT = 116;
ResolveParser.THEN = 117;
ResolveParser.THEOREM = 118;
ResolveParser.THEOREM_ASSOCIATIVE = 119;
ResolveParser.THEOREM_COMMUTATIVE = 120;
ResolveParser.TYPE = 121;
ResolveParser.UNION = 122;
ResolveParser.UPDATES = 123;
ResolveParser.USES = 124;
ResolveParser.VAR = 125;
ResolveParser.WHERE = 126;
ResolveParser.WHICH_ENTAILS = 127;
ResolveParser.WHILE = 128;
ResolveParser.WITHOUT = 129;
ResolveParser.WITH_PROFILE = 130;
ResolveParser.ASSIGN_OP = 131;
ResolveParser.BAR = 132;
ResolveParser.CARAT = 133;
ResolveParser.COLON = 134;
ResolveParser.COMMA = 135;
ResolveParser.CONCAT = 136;
ResolveParser.DBL_BAR = 137;
ResolveParser.DBL_LBRACE = 138;
ResolveParser.DBL_RBRACE = 139;
ResolveParser.DIVIDE = 140;
ResolveParser.DOT = 141;
ResolveParser.EQL = 142;
ResolveParser.EXP = 143;
ResolveParser.FUNCARROW = 144;
ResolveParser.GG = 145;
ResolveParser.GT = 146;
ResolveParser.GT_EQL = 147;
ResolveParser.HASH = 148;
ResolveParser.LBRACE = 149;
ResolveParser.LL = 150;
ResolveParser.LPAREN = 151;
ResolveParser.LSQBRACK = 152;
ResolveParser.LT = 153;
ResolveParser.LT_EQL = 154;
ResolveParser.MINUS = 155;
ResolveParser.MULTIPLY = 156;
ResolveParser.NOT_EQL = 157;
ResolveParser.PLUS = 158;
ResolveParser.QUALIFIER = 159;
ResolveParser.RANGE = 160;
ResolveParser.RBRACE = 161;
ResolveParser.RPAREN = 162;
ResolveParser.RSQBRACK = 163;
ResolveParser.SEMICOLON = 164;
ResolveParser.SWAP_OP = 165;
ResolveParser.TILDE = 166;
ResolveParser.BOOLEAN_LITERAL = 167;
ResolveParser.INTEGER_LITERAL = 168;
ResolveParser.REAL_LITERAL = 169;
ResolveParser.CHARACTER_LITERAL = 170;
ResolveParser.STRING_LITERAL = 171;
ResolveParser.COMMENT = 172;
ResolveParser.IDENTIFIER = 173;
ResolveParser.LETTER = 174;
ResolveParser.LETTER_OR_DIGIT = 175;
ResolveParser.LINE_COMMENT = 176;
ResolveParser.SPACE = 177;

ResolveParser.RULE_module = 0;
ResolveParser.RULE_precisModule = 1;
ResolveParser.RULE_precisItems = 2;
ResolveParser.RULE_precisItem = 3;
ResolveParser.RULE_facilityModule = 4;
ResolveParser.RULE_facilityItems = 5;
ResolveParser.RULE_facilityItem = 6;
ResolveParser.RULE_shortFacilityModule = 7;
ResolveParser.RULE_conceptModule = 8;
ResolveParser.RULE_conceptItems = 9;
ResolveParser.RULE_conceptItem = 10;
ResolveParser.RULE_conceptImplModule = 11;
ResolveParser.RULE_conceptImplItems = 12;
ResolveParser.RULE_conceptImplItem = 13;
ResolveParser.RULE_enhancementModule = 14;
ResolveParser.RULE_enhancementItems = 15;
ResolveParser.RULE_enhancementItem = 16;
ResolveParser.RULE_enhancementImplModule = 17;
ResolveParser.RULE_implItems = 18;
ResolveParser.RULE_implItem = 19;
ResolveParser.RULE_conceptPerformanceModule = 20;
ResolveParser.RULE_conceptPerformanceItems = 21;
ResolveParser.RULE_conceptPerformanceItem = 22;
ResolveParser.RULE_enhancementPerformanceModule = 23;
ResolveParser.RULE_enhancementPerformanceItems = 24;
ResolveParser.RULE_enhancementPerformanceItem = 25;
ResolveParser.RULE_usesList = 26;
ResolveParser.RULE_usesItem = 27;
ResolveParser.RULE_operationParameterList = 28;
ResolveParser.RULE_moduleParameterList = 29;
ResolveParser.RULE_moduleParameterDecl = 30;
ResolveParser.RULE_definitionParameterDecl = 31;
ResolveParser.RULE_typeParameterDecl = 32;
ResolveParser.RULE_constantParameterDecl = 33;
ResolveParser.RULE_operationParameterDecl = 34;
ResolveParser.RULE_conceptImplParameterDecl = 35;
ResolveParser.RULE_parameterDecl = 36;
ResolveParser.RULE_parameterMode = 37;
ResolveParser.RULE_programNamedType = 38;
ResolveParser.RULE_programArrayType = 39;
ResolveParser.RULE_programRecordType = 40;
ResolveParser.RULE_typeModelDecl = 41;
ResolveParser.RULE_typeRepresentationDecl = 42;
ResolveParser.RULE_facilityTypeRepresentationDecl = 43;
ResolveParser.RULE_performanceTypeModelDecl = 44;
ResolveParser.RULE_definitionVariable = 45;
ResolveParser.RULE_sharedStateDecl = 46;
ResolveParser.RULE_sharedStateRepresentationDecl = 47;
ResolveParser.RULE_specModelInit = 48;
ResolveParser.RULE_specModelFinal = 49;
ResolveParser.RULE_representationInit = 50;
ResolveParser.RULE_representationFinal = 51;
ResolveParser.RULE_facilityRepresentationInit = 52;
ResolveParser.RULE_facilityRepresentationFinal = 53;
ResolveParser.RULE_performanceSpecModelInit = 54;
ResolveParser.RULE_performanceSpecModelFinal = 55;
ResolveParser.RULE_procedureDecl = 56;
ResolveParser.RULE_recursiveProcedureDecl = 57;
ResolveParser.RULE_operationProcedureDecl = 58;
ResolveParser.RULE_recursiveOperationProcedureDecl = 59;
ResolveParser.RULE_operationDecl = 60;
ResolveParser.RULE_performanceOperationDecl = 61;
ResolveParser.RULE_facilityDecl = 62;
ResolveParser.RULE_conceptEnhancementDecl = 63;
ResolveParser.RULE_enhancementPairDecl = 64;
ResolveParser.RULE_moduleArgumentList = 65;
ResolveParser.RULE_moduleArgument = 66;
ResolveParser.RULE_mathVariableDeclGroup = 67;
ResolveParser.RULE_mathVariableDecl = 68;
ResolveParser.RULE_variableDeclGroup = 69;
ResolveParser.RULE_variableDecl = 70;
ResolveParser.RULE_moduleStateVariableDecl = 71;
ResolveParser.RULE_stmt = 72;
ResolveParser.RULE_assignStmt = 73;
ResolveParser.RULE_swapStmt = 74;
ResolveParser.RULE_callStmt = 75;
ResolveParser.RULE_presumeStmt = 76;
ResolveParser.RULE_confirmStmt = 77;
ResolveParser.RULE_memoryStmt = 78;
ResolveParser.RULE_ifStmt = 79;
ResolveParser.RULE_elsePart = 80;
ResolveParser.RULE_whileStmt = 81;
ResolveParser.RULE_mathTypeTheoremDecl = 82;
ResolveParser.RULE_mathAssertionDecl = 83;
ResolveParser.RULE_mathTheoremIdent = 84;
ResolveParser.RULE_mathTypeDefinitionDecl = 85;
ResolveParser.RULE_mathDefinesDecl = 86;
ResolveParser.RULE_mathDefinitionDecl = 87;
ResolveParser.RULE_mathCategoricalDecl = 88;
ResolveParser.RULE_mathImplicitDefinitionDecl = 89;
ResolveParser.RULE_mathInductiveDefinitionDecl = 90;
ResolveParser.RULE_mathStandardDefinitionDecl = 91;
ResolveParser.RULE_categoricalDefinitionSignature = 92;
ResolveParser.RULE_definitionSignature = 93;
ResolveParser.RULE_standardInfixSignature = 94;
ResolveParser.RULE_standardOutfixSignature = 95;
ResolveParser.RULE_standardPrefixSignature = 96;
ResolveParser.RULE_prefixOp = 97;
ResolveParser.RULE_infixOp = 98;
ResolveParser.RULE_definitionParameterList = 99;
ResolveParser.RULE_affectsClause = 100;
ResolveParser.RULE_requiresClause = 101;
ResolveParser.RULE_ensuresClause = 102;
ResolveParser.RULE_constraintClause = 103;
ResolveParser.RULE_changingClause = 104;
ResolveParser.RULE_maintainingClause = 105;
ResolveParser.RULE_decreasingClause = 106;
ResolveParser.RULE_correspondenceClause = 107;
ResolveParser.RULE_conventionClause = 108;
ResolveParser.RULE_durationClause = 109;
ResolveParser.RULE_manipulationDispClause = 110;
ResolveParser.RULE_mathTypeExp = 111;
ResolveParser.RULE_mathExp = 112;
ResolveParser.RULE_mathIteratedExp = 113;
ResolveParser.RULE_mathQuantifiedExp = 114;
ResolveParser.RULE_mathImpliesExp = 115;
ResolveParser.RULE_mathLogicalExp = 116;
ResolveParser.RULE_mathRelationalExp = 117;
ResolveParser.RULE_mathInfixExp = 118;
ResolveParser.RULE_mathTypeAssertionExp = 119;
ResolveParser.RULE_mathFunctionTypeExp = 120;
ResolveParser.RULE_mathAddingExp = 121;
ResolveParser.RULE_mathRepeatAddExp = 122;
ResolveParser.RULE_mathMultiplyingExp = 123;
ResolveParser.RULE_mathRepeatMultExp = 124;
ResolveParser.RULE_mathExponentialExp = 125;
ResolveParser.RULE_mathPrefixExp = 126;
ResolveParser.RULE_mathPrimaryExp = 127;
ResolveParser.RULE_mathAlternativeExp = 128;
ResolveParser.RULE_mathAlternativeExpItem = 129;
ResolveParser.RULE_mathLiteralExp = 130;
ResolveParser.RULE_mathDotExp = 131;
ResolveParser.RULE_mathFunctionApplicationExp = 132;
ResolveParser.RULE_mathCleanFunctionExp = 133;
ResolveParser.RULE_mathVarNameExp = 134;
ResolveParser.RULE_mathOutfixExp = 135;
ResolveParser.RULE_mathSetExp = 136;
ResolveParser.RULE_mathTupleExp = 137;
ResolveParser.RULE_mathLambdaExp = 138;
ResolveParser.RULE_mathTaggedCartProdTypeExp = 139;
ResolveParser.RULE_mathRecpExp = 140;
ResolveParser.RULE_mathTypeReceptaclesExp = 141;
ResolveParser.RULE_mathNestedExp = 142;
ResolveParser.RULE_mathWhereExp = 143;
ResolveParser.RULE_progExp = 144;
ResolveParser.RULE_progExponential = 145;
ResolveParser.RULE_progUnary = 146;
ResolveParser.RULE_progPrimary = 147;
ResolveParser.RULE_progLiteral = 148;
ResolveParser.RULE_progParamExp = 149;
ResolveParser.RULE_progVariableExp = 150;
ResolveParser.RULE_progVarDotExp = 151;
ResolveParser.RULE_progVarDotArrayExp = 152;
ResolveParser.RULE_progVarArrayExp = 153;
ResolveParser.RULE_progVarNameExp = 154;


function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.precisModule = function() {
    return this.getTypedRuleContext(PrecisModuleContext,0);
};

ModuleContext.prototype.facilityModule = function() {
    return this.getTypedRuleContext(FacilityModuleContext,0);
};

ModuleContext.prototype.shortFacilityModule = function() {
    return this.getTypedRuleContext(ShortFacilityModuleContext,0);
};

ModuleContext.prototype.conceptModule = function() {
    return this.getTypedRuleContext(ConceptModuleContext,0);
};

ModuleContext.prototype.enhancementModule = function() {
    return this.getTypedRuleContext(EnhancementModuleContext,0);
};

ModuleContext.prototype.enhancementImplModule = function() {
    return this.getTypedRuleContext(EnhancementImplModuleContext,0);
};

ModuleContext.prototype.conceptImplModule = function() {
    return this.getTypedRuleContext(ConceptImplModuleContext,0);
};

ModuleContext.prototype.conceptPerformanceModule = function() {
    return this.getTypedRuleContext(ConceptPerformanceModuleContext,0);
};

ModuleContext.prototype.enhancementPerformanceModule = function() {
    return this.getTypedRuleContext(EnhancementPerformanceModuleContext,0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModule(this);
	}
};




ResolveParser.ModuleContext = ModuleContext;

ResolveParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ResolveParser.RULE_module);
    try {
        this.state = 319;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 310;
            this.precisModule();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 311;
            this.facilityModule();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 312;
            this.shortFacilityModule();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 313;
            this.conceptModule();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 314;
            this.enhancementModule();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 315;
            this.enhancementImplModule();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 316;
            this.conceptImplModule();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 317;
            this.conceptPerformanceModule();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 318;
            this.enhancementPerformanceModule();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrecisModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_precisModule;
    this.name = null; // Token
    this.closename = null; // Token
    return this;
}

PrecisModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecisModuleContext.prototype.constructor = PrecisModuleContext;

PrecisModuleContext.prototype.PRECIS = function() {
    return this.getToken(ResolveParser.PRECIS, 0);
};

PrecisModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


PrecisModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

PrecisModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


PrecisModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

PrecisModuleContext.prototype.precisItems = function() {
    return this.getTypedRuleContext(PrecisItemsContext,0);
};

PrecisModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPrecisModule(this);
	}
};

PrecisModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPrecisModule(this);
	}
};




ResolveParser.PrecisModuleContext = PrecisModuleContext;

ResolveParser.prototype.precisModule = function() {

    var localctx = new PrecisModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ResolveParser.RULE_precisModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.match(ResolveParser.PRECIS);
        this.state = 322;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 323;
        this.match(ResolveParser.SEMICOLON);
        this.state = 325;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 324;
            this.usesList();
        }

        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.AXIOM) | (1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.COROLLARY) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.LEMMA - 56)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ResolveParser.PROPERTY - 96)) | (1 << (ResolveParser.THEOREM - 96)) | (1 << (ResolveParser.THEOREM_ASSOCIATIVE - 96)) | (1 << (ResolveParser.THEOREM_COMMUTATIVE - 96)) | (1 << (ResolveParser.TYPE - 96)))) !== 0)) {
            this.state = 327;
            this.precisItems();
        }

        this.state = 330;
        this.match(ResolveParser.END);
        this.state = 331;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 332;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrecisItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_precisItems;
    return this;
}

PrecisItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecisItemsContext.prototype.constructor = PrecisItemsContext;

PrecisItemsContext.prototype.precisItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrecisItemContext);
    } else {
        return this.getTypedRuleContext(PrecisItemContext,i);
    }
};

PrecisItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPrecisItems(this);
	}
};

PrecisItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPrecisItems(this);
	}
};




ResolveParser.PrecisItemsContext = PrecisItemsContext;

ResolveParser.prototype.precisItems = function() {

    var localctx = new PrecisItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ResolveParser.RULE_precisItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 334;
            this.precisItem();
            this.state = 337; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.AXIOM) | (1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.COROLLARY) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.LEMMA - 56)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ResolveParser.PROPERTY - 96)) | (1 << (ResolveParser.THEOREM - 96)) | (1 << (ResolveParser.THEOREM_ASSOCIATIVE - 96)) | (1 << (ResolveParser.THEOREM_COMMUTATIVE - 96)) | (1 << (ResolveParser.TYPE - 96)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrecisItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_precisItem;
    return this;
}

PrecisItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecisItemContext.prototype.constructor = PrecisItemContext;

PrecisItemContext.prototype.mathTypeTheoremDecl = function() {
    return this.getTypedRuleContext(MathTypeTheoremDeclContext,0);
};

PrecisItemContext.prototype.mathTypeDefinitionDecl = function() {
    return this.getTypedRuleContext(MathTypeDefinitionDeclContext,0);
};

PrecisItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

PrecisItemContext.prototype.mathAssertionDecl = function() {
    return this.getTypedRuleContext(MathAssertionDeclContext,0);
};

PrecisItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPrecisItem(this);
	}
};

PrecisItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPrecisItem(this);
	}
};




ResolveParser.PrecisItemContext = PrecisItemContext;

ResolveParser.prototype.precisItem = function() {

    var localctx = new PrecisItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ResolveParser.RULE_precisItem);
    try {
        this.state = 343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 339;
            this.mathTypeTheoremDecl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 340;
            this.mathTypeDefinitionDecl();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 341;
            this.mathDefinitionDecl();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 342;
            this.mathAssertionDecl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityModule;
    this.name = null; // Token
    this.closename = null; // Token
    return this;
}

FacilityModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityModuleContext.prototype.constructor = FacilityModuleContext;

FacilityModuleContext.prototype.FACILITY = function() {
    return this.getToken(ResolveParser.FACILITY, 0);
};

FacilityModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


FacilityModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

FacilityModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

FacilityModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


FacilityModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

FacilityModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

FacilityModuleContext.prototype.facilityItems = function() {
    return this.getTypedRuleContext(FacilityItemsContext,0);
};

FacilityModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityModule(this);
	}
};

FacilityModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityModule(this);
	}
};




ResolveParser.FacilityModuleContext = FacilityModuleContext;

ResolveParser.prototype.facilityModule = function() {

    var localctx = new FacilityModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ResolveParser.RULE_facilityModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this.match(ResolveParser.FACILITY);
        this.state = 346;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 347;
        this.match(ResolveParser.SEMICOLON);
        this.state = 349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 348;
            this.usesList();
        }

        this.state = 352;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 351;
            this.requiresClause();
        }

        this.state = 355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (ResolveParser.CATEGORICAL - 17)) | (1 << (ResolveParser.DEFINITION - 17)) | (1 << (ResolveParser.FACILITY - 17)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.TYPE) {
            this.state = 354;
            this.facilityItems();
        }

        this.state = 357;
        this.match(ResolveParser.END);
        this.state = 358;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 359;
        this.match(ResolveParser.SEMICOLON);
        this.state = 360;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityItems;
    return this;
}

FacilityItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityItemsContext.prototype.constructor = FacilityItemsContext;

FacilityItemsContext.prototype.facilityItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityItemContext);
    } else {
        return this.getTypedRuleContext(FacilityItemContext,i);
    }
};

FacilityItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityItems(this);
	}
};

FacilityItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityItems(this);
	}
};




ResolveParser.FacilityItemsContext = FacilityItemsContext;

ResolveParser.prototype.facilityItems = function() {

    var localctx = new FacilityItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ResolveParser.RULE_facilityItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 362;
            this.facilityItem();
            this.state = 365; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (ResolveParser.CATEGORICAL - 17)) | (1 << (ResolveParser.DEFINITION - 17)) | (1 << (ResolveParser.FACILITY - 17)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityItem;
    return this;
}

FacilityItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityItemContext.prototype.constructor = FacilityItemContext;

FacilityItemContext.prototype.facilityDecl = function() {
    return this.getTypedRuleContext(FacilityDeclContext,0);
};

FacilityItemContext.prototype.facilityTypeRepresentationDecl = function() {
    return this.getTypedRuleContext(FacilityTypeRepresentationDeclContext,0);
};

FacilityItemContext.prototype.recursiveOperationProcedureDecl = function() {
    return this.getTypedRuleContext(RecursiveOperationProcedureDeclContext,0);
};

FacilityItemContext.prototype.operationProcedureDecl = function() {
    return this.getTypedRuleContext(OperationProcedureDeclContext,0);
};

FacilityItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

FacilityItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityItem(this);
	}
};

FacilityItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityItem(this);
	}
};




ResolveParser.FacilityItemContext = FacilityItemContext;

ResolveParser.prototype.facilityItem = function() {

    var localctx = new FacilityItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ResolveParser.RULE_facilityItem);
    try {
        this.state = 372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 367;
            this.facilityDecl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 368;
            this.facilityTypeRepresentationDecl();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 369;
            this.recursiveOperationProcedureDecl();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 370;
            this.operationProcedureDecl();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 371;
            this.mathDefinitionDecl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShortFacilityModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_shortFacilityModule;
    return this;
}

ShortFacilityModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortFacilityModuleContext.prototype.constructor = ShortFacilityModuleContext;

ShortFacilityModuleContext.prototype.facilityDecl = function() {
    return this.getTypedRuleContext(FacilityDeclContext,0);
};

ShortFacilityModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

ShortFacilityModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterShortFacilityModule(this);
	}
};

ShortFacilityModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitShortFacilityModule(this);
	}
};




ResolveParser.ShortFacilityModuleContext = ShortFacilityModuleContext;

ResolveParser.prototype.shortFacilityModule = function() {

    var localctx = new ShortFacilityModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ResolveParser.RULE_shortFacilityModule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.facilityDecl();
        this.state = 375;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptModule;
    this.name = null; // Token
    this.closename = null; // Token
    return this;
}

ConceptModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptModuleContext.prototype.constructor = ConceptModuleContext;

ConceptModuleContext.prototype.CONCEPT = function() {
    return this.getToken(ResolveParser.CONCEPT, 0);
};

ConceptModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ConceptModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

ConceptModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

ConceptModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ConceptModuleContext.prototype.SHARED = function() {
    return this.getToken(ResolveParser.SHARED, 0);
};

ConceptModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

ConceptModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

ConceptModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

ConceptModuleContext.prototype.conceptItems = function() {
    return this.getTypedRuleContext(ConceptItemsContext,0);
};

ConceptModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptModule(this);
	}
};

ConceptModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptModule(this);
	}
};




ResolveParser.ConceptModuleContext = ConceptModuleContext;

ResolveParser.prototype.conceptModule = function() {

    var localctx = new ConceptModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ResolveParser.RULE_conceptModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.SHARED) {
            this.state = 377;
            this.match(ResolveParser.SHARED);
        }

        this.state = 380;
        this.match(ResolveParser.CONCEPT);
        this.state = 381;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 382;
            this.moduleParameterList();
        }

        this.state = 385;
        this.match(ResolveParser.SEMICOLON);
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 386;
            this.usesList();
        }

        this.state = 390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 389;
            this.requiresClause();
        }

        this.state = 393;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.CONSTRAINT) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.SHAREDVARIABLES || _la===ResolveParser.TYPE) {
            this.state = 392;
            this.conceptItems();
        }

        this.state = 395;
        this.match(ResolveParser.END);
        this.state = 396;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 397;
        this.match(ResolveParser.SEMICOLON);
        this.state = 398;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptItems;
    return this;
}

ConceptItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptItemsContext.prototype.constructor = ConceptItemsContext;

ConceptItemsContext.prototype.conceptItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConceptItemContext);
    } else {
        return this.getTypedRuleContext(ConceptItemContext,i);
    }
};

ConceptItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptItems(this);
	}
};

ConceptItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptItems(this);
	}
};




ResolveParser.ConceptItemsContext = ConceptItemsContext;

ResolveParser.prototype.conceptItems = function() {

    var localctx = new ConceptItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ResolveParser.RULE_conceptItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 400;
            this.conceptItem();
            this.state = 403; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.CONSTRAINT) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.SHAREDVARIABLES || _la===ResolveParser.TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptItem;
    return this;
}

ConceptItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptItemContext.prototype.constructor = ConceptItemContext;

ConceptItemContext.prototype.constraintClause = function() {
    return this.getTypedRuleContext(ConstraintClauseContext,0);
};

ConceptItemContext.prototype.operationDecl = function() {
    return this.getTypedRuleContext(OperationDeclContext,0);
};

ConceptItemContext.prototype.sharedStateDecl = function() {
    return this.getTypedRuleContext(SharedStateDeclContext,0);
};

ConceptItemContext.prototype.typeModelDecl = function() {
    return this.getTypedRuleContext(TypeModelDeclContext,0);
};

ConceptItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

ConceptItemContext.prototype.mathDefinesDecl = function() {
    return this.getTypedRuleContext(MathDefinesDeclContext,0);
};

ConceptItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptItem(this);
	}
};

ConceptItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptItem(this);
	}
};




ResolveParser.ConceptItemContext = ConceptItemContext;

ResolveParser.prototype.conceptItem = function() {

    var localctx = new ConceptItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ResolveParser.RULE_conceptItem);
    try {
        this.state = 411;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.CONSTRAINT:
            this.enterOuterAlt(localctx, 1);
            this.state = 405;
            this.constraintClause();
            break;
        case ResolveParser.OPERATION:
            this.enterOuterAlt(localctx, 2);
            this.state = 406;
            this.operationDecl();
            break;
        case ResolveParser.SHAREDVARIABLES:
            this.enterOuterAlt(localctx, 3);
            this.state = 407;
            this.sharedStateDecl();
            break;
        case ResolveParser.TYPE:
            this.enterOuterAlt(localctx, 4);
            this.state = 408;
            this.typeModelDecl();
            break;
        case ResolveParser.CATEGORICAL:
        case ResolveParser.DEFINITION:
        case ResolveParser.IMPLICIT:
        case ResolveParser.INDUCTIVE:
            this.enterOuterAlt(localctx, 5);
            this.state = 409;
            this.mathDefinitionDecl();
            break;
        case ResolveParser.DEFINES:
            this.enterOuterAlt(localctx, 6);
            this.state = 410;
            this.mathDefinesDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptImplModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptImplModule;
    this.name = null; // Token
    this.profile = null; // Token
    this.concept = null; // Token
    this.enhancement = null; // Token
    this.closename = null; // Token
    return this;
}

ConceptImplModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptImplModuleContext.prototype.constructor = ConceptImplModuleContext;

ConceptImplModuleContext.prototype.REALIZATION = function() {
    return this.getToken(ResolveParser.REALIZATION, 0);
};

ConceptImplModuleContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

ConceptImplModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ConceptImplModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

ConceptImplModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

ConceptImplModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ConceptImplModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

ConceptImplModuleContext.prototype.WITH_PROFILE = function() {
    return this.getToken(ResolveParser.WITH_PROFILE, 0);
};

ConceptImplModuleContext.prototype.ENHANCED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.ENHANCED);
    } else {
        return this.getToken(ResolveParser.ENHANCED, i);
    }
};


ConceptImplModuleContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.BY);
    } else {
        return this.getToken(ResolveParser.BY, i);
    }
};


ConceptImplModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

ConceptImplModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

ConceptImplModuleContext.prototype.conceptImplItems = function() {
    return this.getTypedRuleContext(ConceptImplItemsContext,0);
};

ConceptImplModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptImplModule(this);
	}
};

ConceptImplModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptImplModule(this);
	}
};




ResolveParser.ConceptImplModuleContext = ConceptImplModuleContext;

ResolveParser.prototype.conceptImplModule = function() {

    var localctx = new ConceptImplModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ResolveParser.RULE_conceptImplModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(ResolveParser.REALIZATION);
        this.state = 414;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 416;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 415;
            this.moduleParameterList();
        }

        this.state = 420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WITH_PROFILE) {
            this.state = 418;
            this.match(ResolveParser.WITH_PROFILE);
            this.state = 419;
            localctx.profile = this.match(ResolveParser.IDENTIFIER);
        }

        this.state = 422;
        this.match(ResolveParser.FOR);
        this.state = 423;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.ENHANCED) {
            this.state = 424;
            this.match(ResolveParser.ENHANCED);
            this.state = 425;
            this.match(ResolveParser.BY);
            this.state = 426;
            localctx.enhancement = this.match(ResolveParser.IDENTIFIER);
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 432;
        this.match(ResolveParser.SEMICOLON);
        this.state = 434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 433;
            this.usesList();
        }

        this.state = 437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 436;
            this.requiresClause();
        }

        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (ResolveParser.CATEGORICAL - 17)) | (1 << (ResolveParser.DEFINITION - 17)) | (1 << (ResolveParser.FACILITY - 17)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || ((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (ResolveParser.PROCEDURE - 95)) | (1 << (ResolveParser.RECURSIVE - 95)) | (1 << (ResolveParser.SHAREDVARIABLES - 95)) | (1 << (ResolveParser.TYPE - 95)))) !== 0)) {
            this.state = 439;
            this.conceptImplItems();
        }

        this.state = 442;
        this.match(ResolveParser.END);
        this.state = 443;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 444;
        this.match(ResolveParser.SEMICOLON);
        this.state = 445;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptImplItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptImplItems;
    return this;
}

ConceptImplItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptImplItemsContext.prototype.constructor = ConceptImplItemsContext;

ConceptImplItemsContext.prototype.conceptImplItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConceptImplItemContext);
    } else {
        return this.getTypedRuleContext(ConceptImplItemContext,i);
    }
};

ConceptImplItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptImplItems(this);
	}
};

ConceptImplItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptImplItems(this);
	}
};




ResolveParser.ConceptImplItemsContext = ConceptImplItemsContext;

ResolveParser.prototype.conceptImplItems = function() {

    var localctx = new ConceptImplItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ResolveParser.RULE_conceptImplItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 447;
            this.conceptImplItem();
            this.state = 450; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (ResolveParser.CATEGORICAL - 17)) | (1 << (ResolveParser.DEFINITION - 17)) | (1 << (ResolveParser.FACILITY - 17)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || ((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (ResolveParser.PROCEDURE - 95)) | (1 << (ResolveParser.RECURSIVE - 95)) | (1 << (ResolveParser.SHAREDVARIABLES - 95)) | (1 << (ResolveParser.TYPE - 95)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptImplItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptImplItem;
    return this;
}

ConceptImplItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptImplItemContext.prototype.constructor = ConceptImplItemContext;

ConceptImplItemContext.prototype.implItem = function() {
    return this.getTypedRuleContext(ImplItemContext,0);
};

ConceptImplItemContext.prototype.sharedStateRepresentationDecl = function() {
    return this.getTypedRuleContext(SharedStateRepresentationDeclContext,0);
};

ConceptImplItemContext.prototype.typeRepresentationDecl = function() {
    return this.getTypedRuleContext(TypeRepresentationDeclContext,0);
};

ConceptImplItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptImplItem(this);
	}
};

ConceptImplItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptImplItem(this);
	}
};




ResolveParser.ConceptImplItemContext = ConceptImplItemContext;

ResolveParser.prototype.conceptImplItem = function() {

    var localctx = new ConceptImplItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ResolveParser.RULE_conceptImplItem);
    try {
        this.state = 455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.CATEGORICAL:
        case ResolveParser.DEFINITION:
        case ResolveParser.FACILITY:
        case ResolveParser.IMPLICIT:
        case ResolveParser.INDUCTIVE:
        case ResolveParser.OPERATION:
        case ResolveParser.PROCEDURE:
        case ResolveParser.RECURSIVE:
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this.implItem();
            break;
        case ResolveParser.SHAREDVARIABLES:
            this.enterOuterAlt(localctx, 2);
            this.state = 453;
            this.sharedStateRepresentationDecl();
            break;
        case ResolveParser.TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 454;
            this.typeRepresentationDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementModule;
    this.name = null; // Token
    this.concept = null; // Token
    this.closename = null; // Token
    return this;
}

EnhancementModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementModuleContext.prototype.constructor = EnhancementModuleContext;

EnhancementModuleContext.prototype.ENHANCEMENT = function() {
    return this.getToken(ResolveParser.ENHANCEMENT, 0);
};

EnhancementModuleContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

EnhancementModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


EnhancementModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

EnhancementModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

EnhancementModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


EnhancementModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

EnhancementModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

EnhancementModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

EnhancementModuleContext.prototype.enhancementItems = function() {
    return this.getTypedRuleContext(EnhancementItemsContext,0);
};

EnhancementModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementModule(this);
	}
};

EnhancementModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementModule(this);
	}
};




ResolveParser.EnhancementModuleContext = EnhancementModuleContext;

ResolveParser.prototype.enhancementModule = function() {

    var localctx = new EnhancementModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ResolveParser.RULE_enhancementModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(ResolveParser.ENHANCEMENT);
        this.state = 458;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 459;
            this.moduleParameterList();
        }

        this.state = 462;
        this.match(ResolveParser.FOR);
        this.state = 463;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 464;
        this.match(ResolveParser.SEMICOLON);
        this.state = 466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 465;
            this.usesList();
        }

        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 468;
            this.requiresClause();
        }

        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0)) {
            this.state = 471;
            this.enhancementItems();
        }

        this.state = 474;
        this.match(ResolveParser.END);
        this.state = 475;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 476;
        this.match(ResolveParser.SEMICOLON);
        this.state = 477;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementItems;
    return this;
}

EnhancementItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementItemsContext.prototype.constructor = EnhancementItemsContext;

EnhancementItemsContext.prototype.enhancementItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnhancementItemContext);
    } else {
        return this.getTypedRuleContext(EnhancementItemContext,i);
    }
};

EnhancementItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementItems(this);
	}
};

EnhancementItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementItems(this);
	}
};




ResolveParser.EnhancementItemsContext = EnhancementItemsContext;

ResolveParser.prototype.enhancementItems = function() {

    var localctx = new EnhancementItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ResolveParser.RULE_enhancementItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 479;
            this.enhancementItem();
            this.state = 482; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementItem;
    return this;
}

EnhancementItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementItemContext.prototype.constructor = EnhancementItemContext;

EnhancementItemContext.prototype.operationDecl = function() {
    return this.getTypedRuleContext(OperationDeclContext,0);
};

EnhancementItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

EnhancementItemContext.prototype.mathDefinesDecl = function() {
    return this.getTypedRuleContext(MathDefinesDeclContext,0);
};

EnhancementItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementItem(this);
	}
};

EnhancementItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementItem(this);
	}
};




ResolveParser.EnhancementItemContext = EnhancementItemContext;

ResolveParser.prototype.enhancementItem = function() {

    var localctx = new EnhancementItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ResolveParser.RULE_enhancementItem);
    try {
        this.state = 487;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.OPERATION:
            this.enterOuterAlt(localctx, 1);
            this.state = 484;
            this.operationDecl();
            break;
        case ResolveParser.CATEGORICAL:
        case ResolveParser.DEFINITION:
        case ResolveParser.IMPLICIT:
        case ResolveParser.INDUCTIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 485;
            this.mathDefinitionDecl();
            break;
        case ResolveParser.DEFINES:
            this.enterOuterAlt(localctx, 3);
            this.state = 486;
            this.mathDefinesDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementImplModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementImplModule;
    this.name = null; // Token
    this.profile = null; // Token
    this.enhancement = null; // Token
    this.concept = null; // Token
    this.closename = null; // Token
    return this;
}

EnhancementImplModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementImplModuleContext.prototype.constructor = EnhancementImplModuleContext;

EnhancementImplModuleContext.prototype.REALIZATION = function() {
    return this.getToken(ResolveParser.REALIZATION, 0);
};

EnhancementImplModuleContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

EnhancementImplModuleContext.prototype.OF = function() {
    return this.getToken(ResolveParser.OF, 0);
};

EnhancementImplModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


EnhancementImplModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

EnhancementImplModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

EnhancementImplModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


EnhancementImplModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

EnhancementImplModuleContext.prototype.WITH_PROFILE = function() {
    return this.getToken(ResolveParser.WITH_PROFILE, 0);
};

EnhancementImplModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

EnhancementImplModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

EnhancementImplModuleContext.prototype.implItems = function() {
    return this.getTypedRuleContext(ImplItemsContext,0);
};

EnhancementImplModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementImplModule(this);
	}
};

EnhancementImplModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementImplModule(this);
	}
};




ResolveParser.EnhancementImplModuleContext = EnhancementImplModuleContext;

ResolveParser.prototype.enhancementImplModule = function() {

    var localctx = new EnhancementImplModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ResolveParser.RULE_enhancementImplModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 489;
        this.match(ResolveParser.REALIZATION);
        this.state = 490;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 491;
            this.moduleParameterList();
        }

        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WITH_PROFILE) {
            this.state = 494;
            this.match(ResolveParser.WITH_PROFILE);
            this.state = 495;
            localctx.profile = this.match(ResolveParser.IDENTIFIER);
        }

        this.state = 498;
        this.match(ResolveParser.FOR);
        this.state = 499;
        localctx.enhancement = this.match(ResolveParser.IDENTIFIER);
        this.state = 500;
        this.match(ResolveParser.OF);
        this.state = 501;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 502;
        this.match(ResolveParser.SEMICOLON);
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 503;
            this.usesList();
        }

        this.state = 507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 506;
            this.requiresClause();
        }

        this.state = 510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CATEGORICAL || _la===ResolveParser.DEFINITION || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (ResolveParser.FACILITY - 45)) | (1 << (ResolveParser.IMPLICIT - 45)) | (1 << (ResolveParser.INDUCTIVE - 45)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (ResolveParser.OPERATION - 85)) | (1 << (ResolveParser.PROCEDURE - 85)) | (1 << (ResolveParser.RECURSIVE - 85)))) !== 0)) {
            this.state = 509;
            this.implItems();
        }

        this.state = 512;
        this.match(ResolveParser.END);
        this.state = 513;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 514;
        this.match(ResolveParser.SEMICOLON);
        this.state = 515;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImplItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_implItems;
    return this;
}

ImplItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplItemsContext.prototype.constructor = ImplItemsContext;

ImplItemsContext.prototype.implItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImplItemContext);
    } else {
        return this.getTypedRuleContext(ImplItemContext,i);
    }
};

ImplItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterImplItems(this);
	}
};

ImplItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitImplItems(this);
	}
};




ResolveParser.ImplItemsContext = ImplItemsContext;

ResolveParser.prototype.implItems = function() {

    var localctx = new ImplItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ResolveParser.RULE_implItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 517;
            this.implItem();
            this.state = 520; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ResolveParser.CATEGORICAL || _la===ResolveParser.DEFINITION || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (ResolveParser.FACILITY - 45)) | (1 << (ResolveParser.IMPLICIT - 45)) | (1 << (ResolveParser.INDUCTIVE - 45)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (ResolveParser.OPERATION - 85)) | (1 << (ResolveParser.PROCEDURE - 85)) | (1 << (ResolveParser.RECURSIVE - 85)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImplItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_implItem;
    return this;
}

ImplItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplItemContext.prototype.constructor = ImplItemContext;

ImplItemContext.prototype.facilityDecl = function() {
    return this.getTypedRuleContext(FacilityDeclContext,0);
};

ImplItemContext.prototype.recursiveOperationProcedureDecl = function() {
    return this.getTypedRuleContext(RecursiveOperationProcedureDeclContext,0);
};

ImplItemContext.prototype.operationProcedureDecl = function() {
    return this.getTypedRuleContext(OperationProcedureDeclContext,0);
};

ImplItemContext.prototype.procedureDecl = function() {
    return this.getTypedRuleContext(ProcedureDeclContext,0);
};

ImplItemContext.prototype.recursiveProcedureDecl = function() {
    return this.getTypedRuleContext(RecursiveProcedureDeclContext,0);
};

ImplItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

ImplItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterImplItem(this);
	}
};

ImplItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitImplItem(this);
	}
};




ResolveParser.ImplItemContext = ImplItemContext;

ResolveParser.prototype.implItem = function() {

    var localctx = new ImplItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ResolveParser.RULE_implItem);
    try {
        this.state = 528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 522;
            this.facilityDecl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 523;
            this.recursiveOperationProcedureDecl();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 524;
            this.operationProcedureDecl();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 525;
            this.procedureDecl();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 526;
            this.recursiveProcedureDecl();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 527;
            this.mathDefinitionDecl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptPerformanceModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptPerformanceModule;
    this.name = null; // Token
    this.fullName = null; // Token
    this.concept = null; // Token
    this.closename = null; // Token
    return this;
}

ConceptPerformanceModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptPerformanceModuleContext.prototype.constructor = ConceptPerformanceModuleContext;

ConceptPerformanceModuleContext.prototype.PROFILE = function() {
    return this.getToken(ResolveParser.PROFILE, 0);
};

ConceptPerformanceModuleContext.prototype.SHORT_FOR = function() {
    return this.getToken(ResolveParser.SHORT_FOR, 0);
};

ConceptPerformanceModuleContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

ConceptPerformanceModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ConceptPerformanceModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

ConceptPerformanceModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

ConceptPerformanceModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ConceptPerformanceModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

ConceptPerformanceModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

ConceptPerformanceModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

ConceptPerformanceModuleContext.prototype.conceptPerformanceItems = function() {
    return this.getTypedRuleContext(ConceptPerformanceItemsContext,0);
};

ConceptPerformanceModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptPerformanceModule(this);
	}
};

ConceptPerformanceModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptPerformanceModule(this);
	}
};




ResolveParser.ConceptPerformanceModuleContext = ConceptPerformanceModuleContext;

ResolveParser.prototype.conceptPerformanceModule = function() {

    var localctx = new ConceptPerformanceModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ResolveParser.RULE_conceptPerformanceModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 530;
        this.match(ResolveParser.PROFILE);
        this.state = 531;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 532;
            this.moduleParameterList();
        }

        this.state = 535;
        this.match(ResolveParser.SHORT_FOR);
        this.state = 536;
        localctx.fullName = this.match(ResolveParser.IDENTIFIER);
        this.state = 537;
        this.match(ResolveParser.FOR);
        this.state = 538;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 539;
        this.match(ResolveParser.SEMICOLON);
        this.state = 541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 540;
            this.usesList();
        }

        this.state = 544;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 543;
            this.requiresClause();
        }

        this.state = 547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.CONSTRAINT) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.TYPE) {
            this.state = 546;
            this.conceptPerformanceItems();
        }

        this.state = 549;
        this.match(ResolveParser.END);
        this.state = 550;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 551;
        this.match(ResolveParser.SEMICOLON);
        this.state = 552;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptPerformanceItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptPerformanceItems;
    return this;
}

ConceptPerformanceItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptPerformanceItemsContext.prototype.constructor = ConceptPerformanceItemsContext;

ConceptPerformanceItemsContext.prototype.conceptPerformanceItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConceptPerformanceItemContext);
    } else {
        return this.getTypedRuleContext(ConceptPerformanceItemContext,i);
    }
};

ConceptPerformanceItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptPerformanceItems(this);
	}
};

ConceptPerformanceItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptPerformanceItems(this);
	}
};




ResolveParser.ConceptPerformanceItemsContext = ConceptPerformanceItemsContext;

ResolveParser.prototype.conceptPerformanceItems = function() {

    var localctx = new ConceptPerformanceItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ResolveParser.RULE_conceptPerformanceItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 554;
            this.conceptPerformanceItem();
            this.state = 557; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.CONSTRAINT) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0) || _la===ResolveParser.TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptPerformanceItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptPerformanceItem;
    return this;
}

ConceptPerformanceItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptPerformanceItemContext.prototype.constructor = ConceptPerformanceItemContext;

ConceptPerformanceItemContext.prototype.constraintClause = function() {
    return this.getTypedRuleContext(ConstraintClauseContext,0);
};

ConceptPerformanceItemContext.prototype.performanceOperationDecl = function() {
    return this.getTypedRuleContext(PerformanceOperationDeclContext,0);
};

ConceptPerformanceItemContext.prototype.performanceTypeModelDecl = function() {
    return this.getTypedRuleContext(PerformanceTypeModelDeclContext,0);
};

ConceptPerformanceItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

ConceptPerformanceItemContext.prototype.mathDefinesDecl = function() {
    return this.getTypedRuleContext(MathDefinesDeclContext,0);
};

ConceptPerformanceItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptPerformanceItem(this);
	}
};

ConceptPerformanceItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptPerformanceItem(this);
	}
};




ResolveParser.ConceptPerformanceItemContext = ConceptPerformanceItemContext;

ResolveParser.prototype.conceptPerformanceItem = function() {

    var localctx = new ConceptPerformanceItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ResolveParser.RULE_conceptPerformanceItem);
    try {
        this.state = 564;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.CONSTRAINT:
            this.enterOuterAlt(localctx, 1);
            this.state = 559;
            this.constraintClause();
            break;
        case ResolveParser.OPERATION:
            this.enterOuterAlt(localctx, 2);
            this.state = 560;
            this.performanceOperationDecl();
            break;
        case ResolveParser.TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 561;
            this.performanceTypeModelDecl();
            break;
        case ResolveParser.CATEGORICAL:
        case ResolveParser.DEFINITION:
        case ResolveParser.IMPLICIT:
        case ResolveParser.INDUCTIVE:
            this.enterOuterAlt(localctx, 4);
            this.state = 562;
            this.mathDefinitionDecl();
            break;
        case ResolveParser.DEFINES:
            this.enterOuterAlt(localctx, 5);
            this.state = 563;
            this.mathDefinesDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementPerformanceModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementPerformanceModule;
    this.name = null; // Token
    this.fullName = null; // Token
    this.enhancement = null; // Token
    this.concept = null; // Token
    this.conceptProfile = null; // Token
    this.closename = null; // Token
    return this;
}

EnhancementPerformanceModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementPerformanceModuleContext.prototype.constructor = EnhancementPerformanceModuleContext;

EnhancementPerformanceModuleContext.prototype.PROFILE = function() {
    return this.getToken(ResolveParser.PROFILE, 0);
};

EnhancementPerformanceModuleContext.prototype.SHORT_FOR = function() {
    return this.getToken(ResolveParser.SHORT_FOR, 0);
};

EnhancementPerformanceModuleContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

EnhancementPerformanceModuleContext.prototype.OF = function() {
    return this.getToken(ResolveParser.OF, 0);
};

EnhancementPerformanceModuleContext.prototype.WITH_PROFILE = function() {
    return this.getToken(ResolveParser.WITH_PROFILE, 0);
};

EnhancementPerformanceModuleContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


EnhancementPerformanceModuleContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

EnhancementPerformanceModuleContext.prototype.EOF = function() {
    return this.getToken(ResolveParser.EOF, 0);
};

EnhancementPerformanceModuleContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


EnhancementPerformanceModuleContext.prototype.moduleParameterList = function() {
    return this.getTypedRuleContext(ModuleParameterListContext,0);
};

EnhancementPerformanceModuleContext.prototype.usesList = function() {
    return this.getTypedRuleContext(UsesListContext,0);
};

EnhancementPerformanceModuleContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

EnhancementPerformanceModuleContext.prototype.enhancementPerformanceItems = function() {
    return this.getTypedRuleContext(EnhancementPerformanceItemsContext,0);
};

EnhancementPerformanceModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementPerformanceModule(this);
	}
};

EnhancementPerformanceModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementPerformanceModule(this);
	}
};




ResolveParser.EnhancementPerformanceModuleContext = EnhancementPerformanceModuleContext;

ResolveParser.prototype.enhancementPerformanceModule = function() {

    var localctx = new EnhancementPerformanceModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ResolveParser.RULE_enhancementPerformanceModule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.match(ResolveParser.PROFILE);
        this.state = 567;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 568;
            this.moduleParameterList();
        }

        this.state = 571;
        this.match(ResolveParser.SHORT_FOR);
        this.state = 572;
        localctx.fullName = this.match(ResolveParser.IDENTIFIER);
        this.state = 573;
        this.match(ResolveParser.FOR);
        this.state = 574;
        localctx.enhancement = this.match(ResolveParser.IDENTIFIER);
        this.state = 575;
        this.match(ResolveParser.OF);
        this.state = 576;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 577;
        this.match(ResolveParser.WITH_PROFILE);
        this.state = 578;
        localctx.conceptProfile = this.match(ResolveParser.IDENTIFIER);
        this.state = 579;
        this.match(ResolveParser.SEMICOLON);
        this.state = 581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.USES) {
            this.state = 580;
            this.usesList();
        }

        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 583;
            this.requiresClause();
        }

        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0)) {
            this.state = 586;
            this.enhancementPerformanceItems();
        }

        this.state = 589;
        this.match(ResolveParser.END);
        this.state = 590;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 591;
        this.match(ResolveParser.SEMICOLON);
        this.state = 592;
        this.match(ResolveParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementPerformanceItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementPerformanceItems;
    return this;
}

EnhancementPerformanceItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementPerformanceItemsContext.prototype.constructor = EnhancementPerformanceItemsContext;

EnhancementPerformanceItemsContext.prototype.enhancementPerformanceItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnhancementPerformanceItemContext);
    } else {
        return this.getTypedRuleContext(EnhancementPerformanceItemContext,i);
    }
};

EnhancementPerformanceItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementPerformanceItems(this);
	}
};

EnhancementPerformanceItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementPerformanceItems(this);
	}
};




ResolveParser.EnhancementPerformanceItemsContext = EnhancementPerformanceItemsContext;

ResolveParser.prototype.enhancementPerformanceItems = function() {

    var localctx = new EnhancementPerformanceItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ResolveParser.RULE_enhancementPerformanceItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 594;
            this.enhancementPerformanceItem();
            this.state = 597; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.CATEGORICAL) | (1 << ResolveParser.DEFINES) | (1 << ResolveParser.DEFINITION))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ResolveParser.IMPLICIT - 56)) | (1 << (ResolveParser.INDUCTIVE - 56)) | (1 << (ResolveParser.OPERATION - 56)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementPerformanceItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementPerformanceItem;
    return this;
}

EnhancementPerformanceItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementPerformanceItemContext.prototype.constructor = EnhancementPerformanceItemContext;

EnhancementPerformanceItemContext.prototype.performanceOperationDecl = function() {
    return this.getTypedRuleContext(PerformanceOperationDeclContext,0);
};

EnhancementPerformanceItemContext.prototype.mathDefinitionDecl = function() {
    return this.getTypedRuleContext(MathDefinitionDeclContext,0);
};

EnhancementPerformanceItemContext.prototype.mathDefinesDecl = function() {
    return this.getTypedRuleContext(MathDefinesDeclContext,0);
};

EnhancementPerformanceItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementPerformanceItem(this);
	}
};

EnhancementPerformanceItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementPerformanceItem(this);
	}
};




ResolveParser.EnhancementPerformanceItemContext = EnhancementPerformanceItemContext;

ResolveParser.prototype.enhancementPerformanceItem = function() {

    var localctx = new EnhancementPerformanceItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ResolveParser.RULE_enhancementPerformanceItem);
    try {
        this.state = 602;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.OPERATION:
            this.enterOuterAlt(localctx, 1);
            this.state = 599;
            this.performanceOperationDecl();
            break;
        case ResolveParser.CATEGORICAL:
        case ResolveParser.DEFINITION:
        case ResolveParser.IMPLICIT:
        case ResolveParser.INDUCTIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 600;
            this.mathDefinitionDecl();
            break;
        case ResolveParser.DEFINES:
            this.enterOuterAlt(localctx, 3);
            this.state = 601;
            this.mathDefinesDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_usesList;
    return this;
}

UsesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsesListContext.prototype.constructor = UsesListContext;

UsesListContext.prototype.USES = function() {
    return this.getToken(ResolveParser.USES, 0);
};

UsesListContext.prototype.usesItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsesItemContext);
    } else {
        return this.getTypedRuleContext(UsesItemContext,i);
    }
};

UsesListContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

UsesListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


UsesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterUsesList(this);
	}
};

UsesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitUsesList(this);
	}
};




ResolveParser.UsesListContext = UsesListContext;

ResolveParser.prototype.usesList = function() {

    var localctx = new UsesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ResolveParser.RULE_usesList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.match(ResolveParser.USES);
        this.state = 605;
        this.usesItem();
        this.state = 610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 606;
            this.match(ResolveParser.COMMA);
            this.state = 607;
            this.usesItem();
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 613;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsesItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_usesItem;
    return this;
}

UsesItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsesItemContext.prototype.constructor = UsesItemContext;

UsesItemContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

UsesItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterUsesItem(this);
	}
};

UsesItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitUsesItem(this);
	}
};




ResolveParser.UsesItemContext = UsesItemContext;

ResolveParser.prototype.usesItem = function() {

    var localctx = new UsesItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ResolveParser.RULE_usesItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperationParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_operationParameterList;
    return this;
}

OperationParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationParameterListContext.prototype.constructor = OperationParameterListContext;

OperationParameterListContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

OperationParameterListContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

OperationParameterListContext.prototype.parameterDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDeclContext);
    } else {
        return this.getTypedRuleContext(ParameterDeclContext,i);
    }
};

OperationParameterListContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


OperationParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterOperationParameterList(this);
	}
};

OperationParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitOperationParameterList(this);
	}
};




ResolveParser.OperationParameterListContext = OperationParameterListContext;

ResolveParser.prototype.operationParameterList = function() {

    var localctx = new OperationParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ResolveParser.RULE_operationParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.match(ResolveParser.LPAREN);
        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ALTERS || _la===ResolveParser.CLEARS || _la===ResolveParser.EVALUATES || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (ResolveParser.PRESERVES - 92)) | (1 << (ResolveParser.REPLACES - 92)) | (1 << (ResolveParser.RESTORES - 92)) | (1 << (ResolveParser.UPDATES - 92)))) !== 0)) {
            this.state = 618;
            this.parameterDecl();
            this.state = 623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ResolveParser.SEMICOLON) {
                this.state = 619;
                this.match(ResolveParser.SEMICOLON);
                this.state = 620;
                this.parameterDecl();
                this.state = 625;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 628;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_moduleParameterList;
    return this;
}

ModuleParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleParameterListContext.prototype.constructor = ModuleParameterListContext;

ModuleParameterListContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

ModuleParameterListContext.prototype.moduleParameterDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleParameterDeclContext);
    } else {
        return this.getTypedRuleContext(ModuleParameterDeclContext,i);
    }
};

ModuleParameterListContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

ModuleParameterListContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ModuleParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModuleParameterList(this);
	}
};

ModuleParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModuleParameterList(this);
	}
};




ResolveParser.ModuleParameterListContext = ModuleParameterListContext;

ResolveParser.prototype.moduleParameterList = function() {

    var localctx = new ModuleParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ResolveParser.RULE_moduleParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(ResolveParser.LPAREN);
        this.state = 631;
        this.moduleParameterDecl();
        this.state = 636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.SEMICOLON) {
            this.state = 632;
            this.match(ResolveParser.SEMICOLON);
            this.state = 633;
            this.moduleParameterDecl();
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 639;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_moduleParameterDecl;
    return this;
}

ModuleParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleParameterDeclContext.prototype.constructor = ModuleParameterDeclContext;

ModuleParameterDeclContext.prototype.definitionParameterDecl = function() {
    return this.getTypedRuleContext(DefinitionParameterDeclContext,0);
};

ModuleParameterDeclContext.prototype.typeParameterDecl = function() {
    return this.getTypedRuleContext(TypeParameterDeclContext,0);
};

ModuleParameterDeclContext.prototype.constantParameterDecl = function() {
    return this.getTypedRuleContext(ConstantParameterDeclContext,0);
};

ModuleParameterDeclContext.prototype.operationParameterDecl = function() {
    return this.getTypedRuleContext(OperationParameterDeclContext,0);
};

ModuleParameterDeclContext.prototype.conceptImplParameterDecl = function() {
    return this.getTypedRuleContext(ConceptImplParameterDeclContext,0);
};

ModuleParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModuleParameterDecl(this);
	}
};

ModuleParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModuleParameterDecl(this);
	}
};




ResolveParser.ModuleParameterDeclContext = ModuleParameterDeclContext;

ResolveParser.prototype.moduleParameterDecl = function() {

    var localctx = new ModuleParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ResolveParser.RULE_moduleParameterDecl);
    try {
        this.state = 646;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.DEFINITION:
            this.enterOuterAlt(localctx, 1);
            this.state = 641;
            this.definitionParameterDecl();
            break;
        case ResolveParser.TYPE:
            this.enterOuterAlt(localctx, 2);
            this.state = 642;
            this.typeParameterDecl();
            break;
        case ResolveParser.EVALUATES:
            this.enterOuterAlt(localctx, 3);
            this.state = 643;
            this.constantParameterDecl();
            break;
        case ResolveParser.OPERATION:
            this.enterOuterAlt(localctx, 4);
            this.state = 644;
            this.operationParameterDecl();
            break;
        case ResolveParser.REALIZATION:
            this.enterOuterAlt(localctx, 5);
            this.state = 645;
            this.conceptImplParameterDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinitionParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_definitionParameterDecl;
    return this;
}

DefinitionParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionParameterDeclContext.prototype.constructor = DefinitionParameterDeclContext;

DefinitionParameterDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

DefinitionParameterDeclContext.prototype.definitionSignature = function() {
    return this.getTypedRuleContext(DefinitionSignatureContext,0);
};

DefinitionParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDefinitionParameterDecl(this);
	}
};

DefinitionParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDefinitionParameterDecl(this);
	}
};




ResolveParser.DefinitionParameterDeclContext = DefinitionParameterDeclContext;

ResolveParser.prototype.definitionParameterDecl = function() {

    var localctx = new DefinitionParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ResolveParser.RULE_definitionParameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(ResolveParser.DEFINITION);
        this.state = 649;
        this.definitionSignature();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_typeParameterDecl;
    this.name = null; // Token
    return this;
}

TypeParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterDeclContext.prototype.constructor = TypeParameterDeclContext;

TypeParameterDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

TypeParameterDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

TypeParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterTypeParameterDecl(this);
	}
};

TypeParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitTypeParameterDecl(this);
	}
};




ResolveParser.TypeParameterDeclContext = TypeParameterDeclContext;

ResolveParser.prototype.typeParameterDecl = function() {

    var localctx = new TypeParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ResolveParser.RULE_typeParameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(ResolveParser.TYPE);
        this.state = 652;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_constantParameterDecl;
    return this;
}

ConstantParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantParameterDeclContext.prototype.constructor = ConstantParameterDeclContext;

ConstantParameterDeclContext.prototype.EVALUATES = function() {
    return this.getToken(ResolveParser.EVALUATES, 0);
};

ConstantParameterDeclContext.prototype.variableDeclGroup = function() {
    return this.getTypedRuleContext(VariableDeclGroupContext,0);
};

ConstantParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConstantParameterDecl(this);
	}
};

ConstantParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConstantParameterDecl(this);
	}
};




ResolveParser.ConstantParameterDeclContext = ConstantParameterDeclContext;

ResolveParser.prototype.constantParameterDecl = function() {

    var localctx = new ConstantParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ResolveParser.RULE_constantParameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.match(ResolveParser.EVALUATES);
        this.state = 655;
        this.variableDeclGroup();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperationParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_operationParameterDecl;
    return this;
}

OperationParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationParameterDeclContext.prototype.constructor = OperationParameterDeclContext;

OperationParameterDeclContext.prototype.operationDecl = function() {
    return this.getTypedRuleContext(OperationDeclContext,0);
};

OperationParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterOperationParameterDecl(this);
	}
};

OperationParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitOperationParameterDecl(this);
	}
};




ResolveParser.OperationParameterDeclContext = OperationParameterDeclContext;

ResolveParser.prototype.operationParameterDecl = function() {

    var localctx = new OperationParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ResolveParser.RULE_operationParameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.operationDecl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptImplParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptImplParameterDecl;
    this.name = null; // Token
    this.concept = null; // Token
    return this;
}

ConceptImplParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptImplParameterDeclContext.prototype.constructor = ConceptImplParameterDeclContext;

ConceptImplParameterDeclContext.prototype.REALIZATION = function() {
    return this.getToken(ResolveParser.REALIZATION, 0);
};

ConceptImplParameterDeclContext.prototype.FOR = function() {
    return this.getToken(ResolveParser.FOR, 0);
};

ConceptImplParameterDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ConceptImplParameterDeclContext.prototype.CONCEPT = function() {
    return this.getToken(ResolveParser.CONCEPT, 0);
};

ConceptImplParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptImplParameterDecl(this);
	}
};

ConceptImplParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptImplParameterDecl(this);
	}
};




ResolveParser.ConceptImplParameterDeclContext = ConceptImplParameterDeclContext;

ResolveParser.prototype.conceptImplParameterDecl = function() {

    var localctx = new ConceptImplParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ResolveParser.RULE_conceptImplParameterDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        this.match(ResolveParser.REALIZATION);
        this.state = 660;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 661;
        this.match(ResolveParser.FOR);
        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONCEPT) {
            this.state = 662;
            this.match(ResolveParser.CONCEPT);
        }

        this.state = 665;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_parameterDecl;
    return this;
}

ParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclContext.prototype.constructor = ParameterDeclContext;

ParameterDeclContext.prototype.parameterMode = function() {
    return this.getTypedRuleContext(ParameterModeContext,0);
};

ParameterDeclContext.prototype.variableDeclGroup = function() {
    return this.getTypedRuleContext(VariableDeclGroupContext,0);
};

ParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterParameterDecl(this);
	}
};

ParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitParameterDecl(this);
	}
};




ResolveParser.ParameterDeclContext = ParameterDeclContext;

ResolveParser.prototype.parameterDecl = function() {

    var localctx = new ParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ResolveParser.RULE_parameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this.parameterMode();
        this.state = 668;
        this.variableDeclGroup();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_parameterMode;
    return this;
}

ParameterModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterModeContext.prototype.constructor = ParameterModeContext;

ParameterModeContext.prototype.ALTERS = function() {
    return this.getToken(ResolveParser.ALTERS, 0);
};

ParameterModeContext.prototype.UPDATES = function() {
    return this.getToken(ResolveParser.UPDATES, 0);
};

ParameterModeContext.prototype.CLEARS = function() {
    return this.getToken(ResolveParser.CLEARS, 0);
};

ParameterModeContext.prototype.RESTORES = function() {
    return this.getToken(ResolveParser.RESTORES, 0);
};

ParameterModeContext.prototype.PRESERVES = function() {
    return this.getToken(ResolveParser.PRESERVES, 0);
};

ParameterModeContext.prototype.REPLACES = function() {
    return this.getToken(ResolveParser.REPLACES, 0);
};

ParameterModeContext.prototype.EVALUATES = function() {
    return this.getToken(ResolveParser.EVALUATES, 0);
};

ParameterModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterParameterMode(this);
	}
};

ParameterModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitParameterMode(this);
	}
};




ResolveParser.ParameterModeContext = ParameterModeContext;

ResolveParser.prototype.parameterMode = function() {

    var localctx = new ParameterModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ResolveParser.RULE_parameterMode);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.ALTERS || _la===ResolveParser.CLEARS || _la===ResolveParser.EVALUATES || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (ResolveParser.PRESERVES - 92)) | (1 << (ResolveParser.REPLACES - 92)) | (1 << (ResolveParser.RESTORES - 92)) | (1 << (ResolveParser.UPDATES - 92)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramNamedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_programNamedType;
    this.qualifier = null; // Token
    this.name = null; // Token
    return this;
}

ProgramNamedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramNamedTypeContext.prototype.constructor = ProgramNamedTypeContext;

ProgramNamedTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ProgramNamedTypeContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

ProgramNamedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgramNamedType(this);
	}
};

ProgramNamedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgramNamedType(this);
	}
};




ResolveParser.ProgramNamedTypeContext = ProgramNamedTypeContext;

ResolveParser.prototype.programNamedType = function() {

    var localctx = new ProgramNamedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ResolveParser.RULE_programNamedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 672;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 673;
            this.match(ResolveParser.QUALIFIER);

        }
        this.state = 676;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_programArrayType;
    return this;
}

ProgramArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramArrayTypeContext.prototype.constructor = ProgramArrayTypeContext;

ProgramArrayTypeContext.prototype.ARRAY = function() {
    return this.getToken(ResolveParser.ARRAY, 0);
};

ProgramArrayTypeContext.prototype.progExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgExpContext);
    } else {
        return this.getTypedRuleContext(ProgExpContext,i);
    }
};

ProgramArrayTypeContext.prototype.RANGE = function() {
    return this.getToken(ResolveParser.RANGE, 0);
};

ProgramArrayTypeContext.prototype.OF = function() {
    return this.getToken(ResolveParser.OF, 0);
};

ProgramArrayTypeContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

ProgramArrayTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgramArrayType(this);
	}
};

ProgramArrayTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgramArrayType(this);
	}
};




ResolveParser.ProgramArrayTypeContext = ProgramArrayTypeContext;

ResolveParser.prototype.programArrayType = function() {

    var localctx = new ProgramArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ResolveParser.RULE_programArrayType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.match(ResolveParser.ARRAY);
        this.state = 679;
        this.progExp(0);
        this.state = 680;
        this.match(ResolveParser.RANGE);
        this.state = 681;
        this.progExp(0);
        this.state = 682;
        this.match(ResolveParser.OF);
        this.state = 683;
        this.programNamedType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramRecordTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_programRecordType;
    return this;
}

ProgramRecordTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramRecordTypeContext.prototype.constructor = ProgramRecordTypeContext;

ProgramRecordTypeContext.prototype.RECORD = function() {
    return this.getToken(ResolveParser.RECORD, 0);
};

ProgramRecordTypeContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

ProgramRecordTypeContext.prototype.variableDeclGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclGroupContext);
    } else {
        return this.getTypedRuleContext(VariableDeclGroupContext,i);
    }
};

ProgramRecordTypeContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ProgramRecordTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgramRecordType(this);
	}
};

ProgramRecordTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgramRecordType(this);
	}
};




ResolveParser.ProgramRecordTypeContext = ProgramRecordTypeContext;

ResolveParser.prototype.programRecordType = function() {

    var localctx = new ProgramRecordTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ResolveParser.RULE_programRecordType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(ResolveParser.RECORD);
        this.state = 689; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 686;
            this.variableDeclGroup();
            this.state = 687;
            this.match(ResolveParser.SEMICOLON);
            this.state = 691; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ResolveParser.IDENTIFIER);
        this.state = 693;
        this.match(ResolveParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeModelDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_typeModelDecl;
    this.name = null; // Token
    this.exemplar = null; // Token
    return this;
}

TypeModelDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeModelDeclContext.prototype.constructor = TypeModelDeclContext;

TypeModelDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

TypeModelDeclContext.prototype.FAMILY = function() {
    return this.getToken(ResolveParser.FAMILY, 0);
};

TypeModelDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

TypeModelDeclContext.prototype.MODELED = function() {
    return this.getToken(ResolveParser.MODELED, 0);
};

TypeModelDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

TypeModelDeclContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

TypeModelDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


TypeModelDeclContext.prototype.EXEMPLAR = function() {
    return this.getToken(ResolveParser.EXEMPLAR, 0);
};

TypeModelDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

TypeModelDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


TypeModelDeclContext.prototype.definitionVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefinitionVariableContext);
    } else {
        return this.getTypedRuleContext(DefinitionVariableContext,i);
    }
};

TypeModelDeclContext.prototype.constraintClause = function() {
    return this.getTypedRuleContext(ConstraintClauseContext,0);
};

TypeModelDeclContext.prototype.specModelInit = function() {
    return this.getTypedRuleContext(SpecModelInitContext,0);
};

TypeModelDeclContext.prototype.specModelFinal = function() {
    return this.getTypedRuleContext(SpecModelFinalContext,0);
};

TypeModelDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterTypeModelDecl(this);
	}
};

TypeModelDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitTypeModelDecl(this);
	}
};




ResolveParser.TypeModelDeclContext = TypeModelDeclContext;

ResolveParser.prototype.typeModelDecl = function() {

    var localctx = new TypeModelDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ResolveParser.RULE_typeModelDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this.match(ResolveParser.TYPE);
        this.state = 696;
        this.match(ResolveParser.FAMILY);
        this.state = 697;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 698;
        this.match(ResolveParser.IS);
        this.state = 699;
        this.match(ResolveParser.MODELED);
        this.state = 700;
        this.match(ResolveParser.BY);
        this.state = 701;
        this.mathTypeExp();
        this.state = 702;
        this.match(ResolveParser.SEMICOLON);
        this.state = 703;
        this.match(ResolveParser.EXEMPLAR);
        this.state = 704;
        localctx.exemplar = this.match(ResolveParser.IDENTIFIER);
        this.state = 705;
        this.match(ResolveParser.SEMICOLON);
        this.state = 709;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.DEFINITION) {
            this.state = 706;
            this.definitionVariable();
            this.state = 711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONSTRAINT) {
            this.state = 712;
            this.constraintClause();
        }

        this.state = 716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 715;
            this.specModelInit();
        }

        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.FINALIZATION) {
            this.state = 718;
            this.specModelFinal();
        }

        this.state = 721;
        this.match(ResolveParser.END);
        this.state = 722;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRepresentationDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_typeRepresentationDecl;
    this.name = null; // Token
    return this;
}

TypeRepresentationDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRepresentationDeclContext.prototype.constructor = TypeRepresentationDeclContext;

TypeRepresentationDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

TypeRepresentationDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


TypeRepresentationDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

TypeRepresentationDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

TypeRepresentationDeclContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

TypeRepresentationDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

TypeRepresentationDeclContext.prototype.REPRESENTED = function() {
    return this.getToken(ResolveParser.REPRESENTED, 0);
};

TypeRepresentationDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

TypeRepresentationDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

TypeRepresentationDeclContext.prototype.programArrayType = function() {
    return this.getTypedRuleContext(ProgramArrayTypeContext,0);
};

TypeRepresentationDeclContext.prototype.programRecordType = function() {
    return this.getTypedRuleContext(ProgramRecordTypeContext,0);
};

TypeRepresentationDeclContext.prototype.conventionClause = function() {
    return this.getTypedRuleContext(ConventionClauseContext,0);
};

TypeRepresentationDeclContext.prototype.correspondenceClause = function() {
    return this.getTypedRuleContext(CorrespondenceClauseContext,0);
};

TypeRepresentationDeclContext.prototype.representationInit = function() {
    return this.getTypedRuleContext(RepresentationInitContext,0);
};

TypeRepresentationDeclContext.prototype.representationFinal = function() {
    return this.getTypedRuleContext(RepresentationFinalContext,0);
};

TypeRepresentationDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterTypeRepresentationDecl(this);
	}
};

TypeRepresentationDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitTypeRepresentationDecl(this);
	}
};




ResolveParser.TypeRepresentationDeclContext = TypeRepresentationDeclContext;

ResolveParser.prototype.typeRepresentationDecl = function() {

    var localctx = new TypeRepresentationDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ResolveParser.RULE_typeRepresentationDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(ResolveParser.TYPE);
        this.state = 725;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 730;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.EQL:
            this.state = 726;
            this.match(ResolveParser.EQL);
            break;
        case ResolveParser.IS:
            this.state = 727;
            this.match(ResolveParser.IS);
            this.state = 728;
            this.match(ResolveParser.REPRESENTED);
            this.state = 729;
            this.match(ResolveParser.BY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 735;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IDENTIFIER:
            this.state = 732;
            this.programNamedType();
            break;
        case ResolveParser.ARRAY:
            this.state = 733;
            this.programArrayType();
            break;
        case ResolveParser.RECORD:
            this.state = 734;
            this.programRecordType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 737;
        this.match(ResolveParser.SEMICOLON);
        this.state = 739;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONVENTION) {
            this.state = 738;
            this.conventionClause();
        }

        this.state = 742;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CORR || _la===ResolveParser.DEPENDENT || _la===ResolveParser.INDEPENDENT) {
            this.state = 741;
            this.correspondenceClause();
        }

        this.state = 745;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 744;
            this.representationInit();
        }

        this.state = 748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.FINALIZATION) {
            this.state = 747;
            this.representationFinal();
        }

        this.state = 750;
        this.match(ResolveParser.END);
        this.state = 751;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityTypeRepresentationDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityTypeRepresentationDecl;
    this.name = null; // Token
    return this;
}

FacilityTypeRepresentationDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityTypeRepresentationDeclContext.prototype.constructor = FacilityTypeRepresentationDeclContext;

FacilityTypeRepresentationDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

FacilityTypeRepresentationDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


FacilityTypeRepresentationDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

FacilityTypeRepresentationDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

FacilityTypeRepresentationDeclContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

FacilityTypeRepresentationDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

FacilityTypeRepresentationDeclContext.prototype.REPRESENTED = function() {
    return this.getToken(ResolveParser.REPRESENTED, 0);
};

FacilityTypeRepresentationDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

FacilityTypeRepresentationDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.programArrayType = function() {
    return this.getTypedRuleContext(ProgramArrayTypeContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.programRecordType = function() {
    return this.getTypedRuleContext(ProgramRecordTypeContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.conventionClause = function() {
    return this.getTypedRuleContext(ConventionClauseContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.facilityRepresentationInit = function() {
    return this.getTypedRuleContext(FacilityRepresentationInitContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.facilityRepresentationFinal = function() {
    return this.getTypedRuleContext(FacilityRepresentationFinalContext,0);
};

FacilityTypeRepresentationDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityTypeRepresentationDecl(this);
	}
};

FacilityTypeRepresentationDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityTypeRepresentationDecl(this);
	}
};




ResolveParser.FacilityTypeRepresentationDeclContext = FacilityTypeRepresentationDeclContext;

ResolveParser.prototype.facilityTypeRepresentationDecl = function() {

    var localctx = new FacilityTypeRepresentationDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ResolveParser.RULE_facilityTypeRepresentationDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this.match(ResolveParser.TYPE);
        this.state = 754;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 759;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.EQL:
            this.state = 755;
            this.match(ResolveParser.EQL);
            break;
        case ResolveParser.IS:
            this.state = 756;
            this.match(ResolveParser.IS);
            this.state = 757;
            this.match(ResolveParser.REPRESENTED);
            this.state = 758;
            this.match(ResolveParser.BY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 764;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IDENTIFIER:
            this.state = 761;
            this.programNamedType();
            break;
        case ResolveParser.ARRAY:
            this.state = 762;
            this.programArrayType();
            break;
        case ResolveParser.RECORD:
            this.state = 763;
            this.programRecordType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 766;
        this.match(ResolveParser.SEMICOLON);
        this.state = 768;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONVENTION) {
            this.state = 767;
            this.conventionClause();
        }

        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 770;
            this.facilityRepresentationInit();
        }

        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.FINALIZATION) {
            this.state = 773;
            this.facilityRepresentationFinal();
        }

        this.state = 776;
        this.match(ResolveParser.END);
        this.state = 777;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PerformanceTypeModelDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_performanceTypeModelDecl;
    this.name = null; // Token
    return this;
}

PerformanceTypeModelDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PerformanceTypeModelDeclContext.prototype.constructor = PerformanceTypeModelDeclContext;

PerformanceTypeModelDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

PerformanceTypeModelDeclContext.prototype.FAMILY = function() {
    return this.getToken(ResolveParser.FAMILY, 0);
};

PerformanceTypeModelDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

PerformanceTypeModelDeclContext.prototype.MODELED = function() {
    return this.getToken(ResolveParser.MODELED, 0);
};

PerformanceTypeModelDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

PerformanceTypeModelDeclContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

PerformanceTypeModelDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


PerformanceTypeModelDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

PerformanceTypeModelDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

PerformanceTypeModelDeclContext.prototype.constraintClause = function() {
    return this.getTypedRuleContext(ConstraintClauseContext,0);
};

PerformanceTypeModelDeclContext.prototype.performanceSpecModelInit = function() {
    return this.getTypedRuleContext(PerformanceSpecModelInitContext,0);
};

PerformanceTypeModelDeclContext.prototype.performanceSpecModelFinal = function() {
    return this.getTypedRuleContext(PerformanceSpecModelFinalContext,0);
};

PerformanceTypeModelDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPerformanceTypeModelDecl(this);
	}
};

PerformanceTypeModelDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPerformanceTypeModelDecl(this);
	}
};




ResolveParser.PerformanceTypeModelDeclContext = PerformanceTypeModelDeclContext;

ResolveParser.prototype.performanceTypeModelDecl = function() {

    var localctx = new PerformanceTypeModelDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ResolveParser.RULE_performanceTypeModelDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.match(ResolveParser.TYPE);
        this.state = 780;
        this.match(ResolveParser.FAMILY);
        this.state = 781;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 782;
        this.match(ResolveParser.IS);
        this.state = 783;
        this.match(ResolveParser.MODELED);
        this.state = 784;
        this.match(ResolveParser.BY);
        this.state = 785;
        this.mathTypeExp();
        this.state = 786;
        this.match(ResolveParser.SEMICOLON);
        this.state = 788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONSTRAINT) {
            this.state = 787;
            this.constraintClause();
        }

        this.state = 791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 790;
            this.performanceSpecModelInit();
        }

        this.state = 794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.FINALIZATION) {
            this.state = 793;
            this.performanceSpecModelFinal();
        }

        this.state = 796;
        this.match(ResolveParser.END);
        this.state = 797;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinitionVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_definitionVariable;
    return this;
}

DefinitionVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionVariableContext.prototype.constructor = DefinitionVariableContext;

DefinitionVariableContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

DefinitionVariableContext.prototype.VAR = function() {
    return this.getToken(ResolveParser.VAR, 0);
};

DefinitionVariableContext.prototype.mathVariableDecl = function() {
    return this.getTypedRuleContext(MathVariableDeclContext,0);
};

DefinitionVariableContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

DefinitionVariableContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

DefinitionVariableContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

DefinitionVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDefinitionVariable(this);
	}
};

DefinitionVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDefinitionVariable(this);
	}
};




ResolveParser.DefinitionVariableContext = DefinitionVariableContext;

ResolveParser.prototype.definitionVariable = function() {

    var localctx = new DefinitionVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ResolveParser.RULE_definitionVariable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.match(ResolveParser.DEFINITION);
        this.state = 800;
        this.match(ResolveParser.VAR);
        this.state = 801;
        this.mathVariableDecl();
        this.state = 804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.EQL) {
            this.state = 802;
            this.match(ResolveParser.EQL);
            this.state = 803;
            this.mathExp();
        }

        this.state = 806;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SharedStateDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_sharedStateDecl;
    return this;
}

SharedStateDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedStateDeclContext.prototype.constructor = SharedStateDeclContext;

SharedStateDeclContext.prototype.SHAREDVARIABLES = function() {
    return this.getToken(ResolveParser.SHAREDVARIABLES, 0);
};

SharedStateDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

SharedStateDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

SharedStateDeclContext.prototype.moduleStateVariableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleStateVariableDeclContext);
    } else {
        return this.getTypedRuleContext(ModuleStateVariableDeclContext,i);
    }
};

SharedStateDeclContext.prototype.constraintClause = function() {
    return this.getTypedRuleContext(ConstraintClauseContext,0);
};

SharedStateDeclContext.prototype.specModelInit = function() {
    return this.getTypedRuleContext(SpecModelInitContext,0);
};

SharedStateDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterSharedStateDecl(this);
	}
};

SharedStateDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitSharedStateDecl(this);
	}
};




ResolveParser.SharedStateDeclContext = SharedStateDeclContext;

ResolveParser.prototype.sharedStateDecl = function() {

    var localctx = new SharedStateDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ResolveParser.RULE_sharedStateDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(ResolveParser.SHAREDVARIABLES);
        this.state = 810; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 809;
            this.moduleStateVariableDecl();
            this.state = 812; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ResolveParser.ABSTRACT_VAR);
        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONSTRAINT) {
            this.state = 814;
            this.constraintClause();
        }

        this.state = 818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 817;
            this.specModelInit();
        }

        this.state = 820;
        this.match(ResolveParser.END);
        this.state = 821;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SharedStateRepresentationDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_sharedStateRepresentationDecl;
    return this;
}

SharedStateRepresentationDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedStateRepresentationDeclContext.prototype.constructor = SharedStateRepresentationDeclContext;

SharedStateRepresentationDeclContext.prototype.SHAREDVARIABLES = function() {
    return this.getToken(ResolveParser.SHAREDVARIABLES, 0);
};

SharedStateRepresentationDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

SharedStateRepresentationDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

SharedStateRepresentationDeclContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

SharedStateRepresentationDeclContext.prototype.conventionClause = function() {
    return this.getTypedRuleContext(ConventionClauseContext,0);
};

SharedStateRepresentationDeclContext.prototype.correspondenceClause = function() {
    return this.getTypedRuleContext(CorrespondenceClauseContext,0);
};

SharedStateRepresentationDeclContext.prototype.representationInit = function() {
    return this.getTypedRuleContext(RepresentationInitContext,0);
};

SharedStateRepresentationDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterSharedStateRepresentationDecl(this);
	}
};

SharedStateRepresentationDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitSharedStateRepresentationDecl(this);
	}
};




ResolveParser.SharedStateRepresentationDeclContext = SharedStateRepresentationDeclContext;

ResolveParser.prototype.sharedStateRepresentationDecl = function() {

    var localctx = new SharedStateRepresentationDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ResolveParser.RULE_sharedStateRepresentationDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 823;
        this.match(ResolveParser.SHAREDVARIABLES);
        this.state = 827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 824;
            this.variableDecl();
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CONVENTION) {
            this.state = 830;
            this.conventionClause();
        }

        this.state = 834;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CORR || _la===ResolveParser.DEPENDENT || _la===ResolveParser.INDEPENDENT) {
            this.state = 833;
            this.correspondenceClause();
        }

        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INITIALIZATION) {
            this.state = 836;
            this.representationInit();
        }

        this.state = 839;
        this.match(ResolveParser.END);
        this.state = 840;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecModelInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_specModelInit;
    return this;
}

SpecModelInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecModelInitContext.prototype.constructor = SpecModelInitContext;

SpecModelInitContext.prototype.INITIALIZATION = function() {
    return this.getToken(ResolveParser.INITIALIZATION, 0);
};

SpecModelInitContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

SpecModelInitContext.prototype.ensuresClause = function() {
    return this.getTypedRuleContext(EnsuresClauseContext,0);
};

SpecModelInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterSpecModelInit(this);
	}
};

SpecModelInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitSpecModelInit(this);
	}
};




ResolveParser.SpecModelInitContext = SpecModelInitContext;

ResolveParser.prototype.specModelInit = function() {

    var localctx = new SpecModelInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ResolveParser.RULE_specModelInit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(ResolveParser.INITIALIZATION);
        this.state = 844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 843;
            this.affectsClause();
        }

        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ENSURES) {
            this.state = 846;
            this.ensuresClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecModelFinalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_specModelFinal;
    return this;
}

SpecModelFinalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecModelFinalContext.prototype.constructor = SpecModelFinalContext;

SpecModelFinalContext.prototype.FINALIZATION = function() {
    return this.getToken(ResolveParser.FINALIZATION, 0);
};

SpecModelFinalContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

SpecModelFinalContext.prototype.ensuresClause = function() {
    return this.getTypedRuleContext(EnsuresClauseContext,0);
};

SpecModelFinalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterSpecModelFinal(this);
	}
};

SpecModelFinalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitSpecModelFinal(this);
	}
};




ResolveParser.SpecModelFinalContext = SpecModelFinalContext;

ResolveParser.prototype.specModelFinal = function() {

    var localctx = new SpecModelFinalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ResolveParser.RULE_specModelFinal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this.match(ResolveParser.FINALIZATION);
        this.state = 851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 850;
            this.affectsClause();
        }

        this.state = 854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ENSURES) {
            this.state = 853;
            this.ensuresClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepresentationInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_representationInit;
    return this;
}

RepresentationInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepresentationInitContext.prototype.constructor = RepresentationInitContext;

RepresentationInitContext.prototype.INITIALIZATION = function() {
    return this.getToken(ResolveParser.INITIALIZATION, 0);
};

RepresentationInitContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

RepresentationInitContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

RepresentationInitContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

RepresentationInitContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

RepresentationInitContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

RepresentationInitContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

RepresentationInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterRepresentationInit(this);
	}
};

RepresentationInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitRepresentationInit(this);
	}
};




ResolveParser.RepresentationInitContext = RepresentationInitContext;

ResolveParser.prototype.representationInit = function() {

    var localctx = new RepresentationInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ResolveParser.RULE_representationInit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this.match(ResolveParser.INITIALIZATION);
        this.state = 858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 857;
            this.affectsClause();
        }

        this.state = 863;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 860;
            this.facilityDecl();
            this.state = 865;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 869;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 866;
            this.variableDecl();
            this.state = 871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 875;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 872;
            this.stmt();
            this.state = 877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 878;
        this.match(ResolveParser.END);
        this.state = 879;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepresentationFinalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_representationFinal;
    return this;
}

RepresentationFinalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepresentationFinalContext.prototype.constructor = RepresentationFinalContext;

RepresentationFinalContext.prototype.FINALIZATION = function() {
    return this.getToken(ResolveParser.FINALIZATION, 0);
};

RepresentationFinalContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

RepresentationFinalContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

RepresentationFinalContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

RepresentationFinalContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

RepresentationFinalContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

RepresentationFinalContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

RepresentationFinalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterRepresentationFinal(this);
	}
};

RepresentationFinalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitRepresentationFinal(this);
	}
};




ResolveParser.RepresentationFinalContext = RepresentationFinalContext;

ResolveParser.prototype.representationFinal = function() {

    var localctx = new RepresentationFinalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ResolveParser.RULE_representationFinal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        this.match(ResolveParser.FINALIZATION);
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 882;
            this.affectsClause();
        }

        this.state = 888;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 885;
            this.facilityDecl();
            this.state = 890;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 891;
            this.variableDecl();
            this.state = 896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 897;
            this.stmt();
            this.state = 902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 903;
        this.match(ResolveParser.END);
        this.state = 904;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityRepresentationInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityRepresentationInit;
    return this;
}

FacilityRepresentationInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityRepresentationInitContext.prototype.constructor = FacilityRepresentationInitContext;

FacilityRepresentationInitContext.prototype.INITIALIZATION = function() {
    return this.getToken(ResolveParser.INITIALIZATION, 0);
};

FacilityRepresentationInitContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

FacilityRepresentationInitContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

FacilityRepresentationInitContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

FacilityRepresentationInitContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

FacilityRepresentationInitContext.prototype.ensuresClause = function() {
    return this.getTypedRuleContext(EnsuresClauseContext,0);
};

FacilityRepresentationInitContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

FacilityRepresentationInitContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

FacilityRepresentationInitContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

FacilityRepresentationInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityRepresentationInit(this);
	}
};

FacilityRepresentationInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityRepresentationInit(this);
	}
};




ResolveParser.FacilityRepresentationInitContext = FacilityRepresentationInitContext;

ResolveParser.prototype.facilityRepresentationInit = function() {

    var localctx = new FacilityRepresentationInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ResolveParser.RULE_facilityRepresentationInit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.match(ResolveParser.INITIALIZATION);
        this.state = 908;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 907;
            this.affectsClause();
        }

        this.state = 911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 910;
            this.requiresClause();
        }

        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ENSURES) {
            this.state = 913;
            this.ensuresClause();
        }

        this.state = 919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 916;
            this.facilityDecl();
            this.state = 921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 922;
            this.variableDecl();
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 931;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 928;
            this.stmt();
            this.state = 933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 934;
        this.match(ResolveParser.END);
        this.state = 935;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityRepresentationFinalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityRepresentationFinal;
    return this;
}

FacilityRepresentationFinalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityRepresentationFinalContext.prototype.constructor = FacilityRepresentationFinalContext;

FacilityRepresentationFinalContext.prototype.FINALIZATION = function() {
    return this.getToken(ResolveParser.FINALIZATION, 0);
};

FacilityRepresentationFinalContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

FacilityRepresentationFinalContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

FacilityRepresentationFinalContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

FacilityRepresentationFinalContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

FacilityRepresentationFinalContext.prototype.ensuresClause = function() {
    return this.getTypedRuleContext(EnsuresClauseContext,0);
};

FacilityRepresentationFinalContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

FacilityRepresentationFinalContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

FacilityRepresentationFinalContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

FacilityRepresentationFinalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityRepresentationFinal(this);
	}
};

FacilityRepresentationFinalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityRepresentationFinal(this);
	}
};




ResolveParser.FacilityRepresentationFinalContext = FacilityRepresentationFinalContext;

ResolveParser.prototype.facilityRepresentationFinal = function() {

    var localctx = new FacilityRepresentationFinalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ResolveParser.RULE_facilityRepresentationFinal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.match(ResolveParser.FINALIZATION);
        this.state = 939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 938;
            this.affectsClause();
        }

        this.state = 942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 941;
            this.requiresClause();
        }

        this.state = 945;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ENSURES) {
            this.state = 944;
            this.ensuresClause();
        }

        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 947;
            this.facilityDecl();
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 956;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 953;
            this.variableDecl();
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 959;
            this.stmt();
            this.state = 964;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 965;
        this.match(ResolveParser.END);
        this.state = 966;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PerformanceSpecModelInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_performanceSpecModelInit;
    return this;
}

PerformanceSpecModelInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PerformanceSpecModelInitContext.prototype.constructor = PerformanceSpecModelInitContext;

PerformanceSpecModelInitContext.prototype.INITIALIZATION = function() {
    return this.getToken(ResolveParser.INITIALIZATION, 0);
};

PerformanceSpecModelInitContext.prototype.durationClause = function() {
    return this.getTypedRuleContext(DurationClauseContext,0);
};

PerformanceSpecModelInitContext.prototype.manipulationDispClause = function() {
    return this.getTypedRuleContext(ManipulationDispClauseContext,0);
};

PerformanceSpecModelInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPerformanceSpecModelInit(this);
	}
};

PerformanceSpecModelInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPerformanceSpecModelInit(this);
	}
};




ResolveParser.PerformanceSpecModelInitContext = PerformanceSpecModelInitContext;

ResolveParser.prototype.performanceSpecModelInit = function() {

    var localctx = new PerformanceSpecModelInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ResolveParser.RULE_performanceSpecModelInit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 968;
        this.match(ResolveParser.INITIALIZATION);
        this.state = 970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.DURATION) {
            this.state = 969;
            this.durationClause();
        }

        this.state = 973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.MAINP_DISP) {
            this.state = 972;
            this.manipulationDispClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PerformanceSpecModelFinalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_performanceSpecModelFinal;
    return this;
}

PerformanceSpecModelFinalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PerformanceSpecModelFinalContext.prototype.constructor = PerformanceSpecModelFinalContext;

PerformanceSpecModelFinalContext.prototype.FINALIZATION = function() {
    return this.getToken(ResolveParser.FINALIZATION, 0);
};

PerformanceSpecModelFinalContext.prototype.durationClause = function() {
    return this.getTypedRuleContext(DurationClauseContext,0);
};

PerformanceSpecModelFinalContext.prototype.manipulationDispClause = function() {
    return this.getTypedRuleContext(ManipulationDispClauseContext,0);
};

PerformanceSpecModelFinalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPerformanceSpecModelFinal(this);
	}
};

PerformanceSpecModelFinalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPerformanceSpecModelFinal(this);
	}
};




ResolveParser.PerformanceSpecModelFinalContext = PerformanceSpecModelFinalContext;

ResolveParser.prototype.performanceSpecModelFinal = function() {

    var localctx = new PerformanceSpecModelFinalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ResolveParser.RULE_performanceSpecModelFinal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.match(ResolveParser.FINALIZATION);
        this.state = 977;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.DURATION) {
            this.state = 976;
            this.durationClause();
        }

        this.state = 980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.MAINP_DISP) {
            this.state = 979;
            this.manipulationDispClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_procedureDecl;
    this.name = null; // Token
    this.closename = null; // Token
    return this;
}

ProcedureDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureDeclContext.prototype.constructor = ProcedureDeclContext;

ProcedureDeclContext.prototype.PROCEDURE = function() {
    return this.getToken(ResolveParser.PROCEDURE, 0);
};

ProcedureDeclContext.prototype.operationParameterList = function() {
    return this.getTypedRuleContext(OperationParameterListContext,0);
};

ProcedureDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


ProcedureDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

ProcedureDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ProcedureDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

ProcedureDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

ProcedureDeclContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

ProcedureDeclContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

ProcedureDeclContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

ProcedureDeclContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

ProcedureDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProcedureDecl(this);
	}
};

ProcedureDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProcedureDecl(this);
	}
};




ResolveParser.ProcedureDeclContext = ProcedureDeclContext;

ResolveParser.prototype.procedureDecl = function() {

    var localctx = new ProcedureDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ResolveParser.RULE_procedureDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 982;
        this.match(ResolveParser.PROCEDURE);
        this.state = 983;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 984;
        this.operationParameterList();
        this.state = 987;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.COLON) {
            this.state = 985;
            this.match(ResolveParser.COLON);
            this.state = 986;
            this.programNamedType();
        }

        this.state = 989;
        this.match(ResolveParser.SEMICOLON);
        this.state = 991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 990;
            this.affectsClause();
        }

        this.state = 996;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 993;
            this.facilityDecl();
            this.state = 998;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1002;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 999;
            this.variableDecl();
            this.state = 1004;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1005;
            this.stmt();
            this.state = 1010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1011;
        this.match(ResolveParser.END);
        this.state = 1012;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 1013;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecursiveProcedureDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_recursiveProcedureDecl;
    this.name = null; // Token
    this.closename = null; // Token
    return this;
}

RecursiveProcedureDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecursiveProcedureDeclContext.prototype.constructor = RecursiveProcedureDeclContext;

RecursiveProcedureDeclContext.prototype.RECURSIVE = function() {
    return this.getToken(ResolveParser.RECURSIVE, 0);
};

RecursiveProcedureDeclContext.prototype.PROCEDURE = function() {
    return this.getToken(ResolveParser.PROCEDURE, 0);
};

RecursiveProcedureDeclContext.prototype.operationParameterList = function() {
    return this.getTypedRuleContext(OperationParameterListContext,0);
};

RecursiveProcedureDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


RecursiveProcedureDeclContext.prototype.decreasingClause = function() {
    return this.getTypedRuleContext(DecreasingClauseContext,0);
};

RecursiveProcedureDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

RecursiveProcedureDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


RecursiveProcedureDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

RecursiveProcedureDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

RecursiveProcedureDeclContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

RecursiveProcedureDeclContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

RecursiveProcedureDeclContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

RecursiveProcedureDeclContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

RecursiveProcedureDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterRecursiveProcedureDecl(this);
	}
};

RecursiveProcedureDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitRecursiveProcedureDecl(this);
	}
};




ResolveParser.RecursiveProcedureDeclContext = RecursiveProcedureDeclContext;

ResolveParser.prototype.recursiveProcedureDecl = function() {

    var localctx = new RecursiveProcedureDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ResolveParser.RULE_recursiveProcedureDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1015;
        this.match(ResolveParser.RECURSIVE);
        this.state = 1016;
        this.match(ResolveParser.PROCEDURE);
        this.state = 1017;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1018;
        this.operationParameterList();
        this.state = 1021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.COLON) {
            this.state = 1019;
            this.match(ResolveParser.COLON);
            this.state = 1020;
            this.programNamedType();
        }

        this.state = 1023;
        this.match(ResolveParser.SEMICOLON);
        this.state = 1025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 1024;
            this.affectsClause();
        }

        this.state = 1027;
        this.decreasingClause();
        this.state = 1031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 1028;
            this.facilityDecl();
            this.state = 1033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 1034;
            this.variableDecl();
            this.state = 1039;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1040;
            this.stmt();
            this.state = 1045;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1046;
        this.match(ResolveParser.END);
        this.state = 1047;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 1048;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperationProcedureDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_operationProcedureDecl;
    this.closename = null; // Token
    return this;
}

OperationProcedureDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationProcedureDeclContext.prototype.constructor = OperationProcedureDeclContext;

OperationProcedureDeclContext.prototype.operationDecl = function() {
    return this.getTypedRuleContext(OperationDeclContext,0);
};

OperationProcedureDeclContext.prototype.PROCEDURE = function() {
    return this.getToken(ResolveParser.PROCEDURE, 0);
};

OperationProcedureDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

OperationProcedureDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

OperationProcedureDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

OperationProcedureDeclContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

OperationProcedureDeclContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

OperationProcedureDeclContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

OperationProcedureDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterOperationProcedureDecl(this);
	}
};

OperationProcedureDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitOperationProcedureDecl(this);
	}
};




ResolveParser.OperationProcedureDeclContext = OperationProcedureDeclContext;

ResolveParser.prototype.operationProcedureDecl = function() {

    var localctx = new OperationProcedureDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ResolveParser.RULE_operationProcedureDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.operationDecl();
        this.state = 1051;
        this.match(ResolveParser.PROCEDURE);
        this.state = 1055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 1052;
            this.facilityDecl();
            this.state = 1057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1061;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 1058;
            this.variableDecl();
            this.state = 1063;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1064;
            this.stmt();
            this.state = 1069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1070;
        this.match(ResolveParser.END);
        this.state = 1071;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 1072;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecursiveOperationProcedureDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_recursiveOperationProcedureDecl;
    this.closename = null; // Token
    return this;
}

RecursiveOperationProcedureDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecursiveOperationProcedureDeclContext.prototype.constructor = RecursiveOperationProcedureDeclContext;

RecursiveOperationProcedureDeclContext.prototype.operationDecl = function() {
    return this.getTypedRuleContext(OperationDeclContext,0);
};

RecursiveOperationProcedureDeclContext.prototype.RECURSIVE = function() {
    return this.getToken(ResolveParser.RECURSIVE, 0);
};

RecursiveOperationProcedureDeclContext.prototype.PROCEDURE = function() {
    return this.getToken(ResolveParser.PROCEDURE, 0);
};

RecursiveOperationProcedureDeclContext.prototype.decreasingClause = function() {
    return this.getTypedRuleContext(DecreasingClauseContext,0);
};

RecursiveOperationProcedureDeclContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

RecursiveOperationProcedureDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

RecursiveOperationProcedureDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

RecursiveOperationProcedureDeclContext.prototype.facilityDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacilityDeclContext);
    } else {
        return this.getTypedRuleContext(FacilityDeclContext,i);
    }
};

RecursiveOperationProcedureDeclContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

RecursiveOperationProcedureDeclContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

RecursiveOperationProcedureDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterRecursiveOperationProcedureDecl(this);
	}
};

RecursiveOperationProcedureDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitRecursiveOperationProcedureDecl(this);
	}
};




ResolveParser.RecursiveOperationProcedureDeclContext = RecursiveOperationProcedureDeclContext;

ResolveParser.prototype.recursiveOperationProcedureDecl = function() {

    var localctx = new RecursiveOperationProcedureDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ResolveParser.RULE_recursiveOperationProcedureDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this.operationDecl();
        this.state = 1075;
        this.match(ResolveParser.RECURSIVE);
        this.state = 1076;
        this.match(ResolveParser.PROCEDURE);
        this.state = 1077;
        this.decreasingClause();
        this.state = 1081;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.FACILITY) {
            this.state = 1078;
            this.facilityDecl();
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1087;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.VAR) {
            this.state = 1084;
            this.variableDecl();
            this.state = 1089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1093;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1090;
            this.stmt();
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1096;
        this.match(ResolveParser.END);
        this.state = 1097;
        localctx.closename = this.match(ResolveParser.IDENTIFIER);
        this.state = 1098;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperationDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_operationDecl;
    this.name = null; // Token
    return this;
}

OperationDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperationDeclContext.prototype.constructor = OperationDeclContext;

OperationDeclContext.prototype.OPERATION = function() {
    return this.getToken(ResolveParser.OPERATION, 0);
};

OperationDeclContext.prototype.operationParameterList = function() {
    return this.getTypedRuleContext(OperationParameterListContext,0);
};

OperationDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

OperationDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

OperationDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

OperationDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

OperationDeclContext.prototype.affectsClause = function() {
    return this.getTypedRuleContext(AffectsClauseContext,0);
};

OperationDeclContext.prototype.requiresClause = function() {
    return this.getTypedRuleContext(RequiresClauseContext,0);
};

OperationDeclContext.prototype.ensuresClause = function() {
    return this.getTypedRuleContext(EnsuresClauseContext,0);
};

OperationDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterOperationDecl(this);
	}
};

OperationDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitOperationDecl(this);
	}
};




ResolveParser.OperationDeclContext = OperationDeclContext;

ResolveParser.prototype.operationDecl = function() {

    var localctx = new OperationDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ResolveParser.RULE_operationDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this.match(ResolveParser.OPERATION);
        this.state = 1101;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1102;
        this.operationParameterList();
        this.state = 1105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.COLON) {
            this.state = 1103;
            this.match(ResolveParser.COLON);
            this.state = 1104;
            this.programNamedType();
        }

        this.state = 1107;
        this.match(ResolveParser.SEMICOLON);
        this.state = 1109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.AFFECTS) {
            this.state = 1108;
            this.affectsClause();
        }

        this.state = 1112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.REQUIRES) {
            this.state = 1111;
            this.requiresClause();
        }

        this.state = 1115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ENSURES) {
            this.state = 1114;
            this.ensuresClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PerformanceOperationDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_performanceOperationDecl;
    this.name = null; // Token
    return this;
}

PerformanceOperationDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PerformanceOperationDeclContext.prototype.constructor = PerformanceOperationDeclContext;

PerformanceOperationDeclContext.prototype.OPERATION = function() {
    return this.getToken(ResolveParser.OPERATION, 0);
};

PerformanceOperationDeclContext.prototype.operationParameterList = function() {
    return this.getTypedRuleContext(OperationParameterListContext,0);
};

PerformanceOperationDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

PerformanceOperationDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

PerformanceOperationDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

PerformanceOperationDeclContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

PerformanceOperationDeclContext.prototype.durationClause = function() {
    return this.getTypedRuleContext(DurationClauseContext,0);
};

PerformanceOperationDeclContext.prototype.manipulationDispClause = function() {
    return this.getTypedRuleContext(ManipulationDispClauseContext,0);
};

PerformanceOperationDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPerformanceOperationDecl(this);
	}
};

PerformanceOperationDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPerformanceOperationDecl(this);
	}
};




ResolveParser.PerformanceOperationDeclContext = PerformanceOperationDeclContext;

ResolveParser.prototype.performanceOperationDecl = function() {

    var localctx = new PerformanceOperationDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ResolveParser.RULE_performanceOperationDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1117;
        this.match(ResolveParser.OPERATION);
        this.state = 1118;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1119;
        this.operationParameterList();
        this.state = 1122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.COLON) {
            this.state = 1120;
            this.match(ResolveParser.COLON);
            this.state = 1121;
            this.programNamedType();
        }

        this.state = 1124;
        this.match(ResolveParser.SEMICOLON);
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.DURATION) {
            this.state = 1125;
            this.durationClause();
        }

        this.state = 1129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.MAINP_DISP) {
            this.state = 1128;
            this.manipulationDispClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FacilityDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_facilityDecl;
    this.name = null; // Token
    this.concept = null; // Token
    this.specArgs = null; // ModuleArgumentListContext
    this.externally = null; // Token
    this.impl = null; // Token
    this.profile = null; // Token
    this.implArgs = null; // ModuleArgumentListContext
    return this;
}

FacilityDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacilityDeclContext.prototype.constructor = FacilityDeclContext;

FacilityDeclContext.prototype.FACILITY = function() {
    return this.getToken(ResolveParser.FACILITY, 0);
};

FacilityDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

FacilityDeclContext.prototype.REALIZED = function() {
    return this.getToken(ResolveParser.REALIZED, 0);
};

FacilityDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

FacilityDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

FacilityDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


FacilityDeclContext.prototype.conceptEnhancementDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConceptEnhancementDeclContext);
    } else {
        return this.getTypedRuleContext(ConceptEnhancementDeclContext,i);
    }
};

FacilityDeclContext.prototype.WITH_PROFILE = function() {
    return this.getToken(ResolveParser.WITH_PROFILE, 0);
};

FacilityDeclContext.prototype.enhancementPairDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnhancementPairDeclContext);
    } else {
        return this.getTypedRuleContext(EnhancementPairDeclContext,i);
    }
};

FacilityDeclContext.prototype.moduleArgumentList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleArgumentListContext);
    } else {
        return this.getTypedRuleContext(ModuleArgumentListContext,i);
    }
};

FacilityDeclContext.prototype.EXTERNALLY = function() {
    return this.getToken(ResolveParser.EXTERNALLY, 0);
};

FacilityDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterFacilityDecl(this);
	}
};

FacilityDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitFacilityDecl(this);
	}
};




ResolveParser.FacilityDeclContext = FacilityDeclContext;

ResolveParser.prototype.facilityDecl = function() {

    var localctx = new FacilityDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ResolveParser.RULE_facilityDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1131;
        this.match(ResolveParser.FACILITY);
        this.state = 1132;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1133;
        this.match(ResolveParser.IS);
        this.state = 1134;
        localctx.concept = this.match(ResolveParser.IDENTIFIER);
        this.state = 1136;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1135;
            localctx.specArgs = this.moduleArgumentList();
        }

        this.state = 1141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.ENHANCED) {
            this.state = 1138;
            this.conceptEnhancementDecl();
            this.state = 1143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1145;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.EXTERNALLY) {
            this.state = 1144;
            localctx.externally = this.match(ResolveParser.EXTERNALLY);
        }

        this.state = 1147;
        this.match(ResolveParser.REALIZED);
        this.state = 1148;
        this.match(ResolveParser.BY);
        this.state = 1149;
        localctx.impl = this.match(ResolveParser.IDENTIFIER);
        this.state = 1152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WITH_PROFILE) {
            this.state = 1150;
            this.match(ResolveParser.WITH_PROFILE);
            this.state = 1151;
            localctx.profile = this.match(ResolveParser.IDENTIFIER);
        }

        this.state = 1155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1154;
            localctx.implArgs = this.moduleArgumentList();
        }

        this.state = 1160;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.ENHANCED) {
            this.state = 1157;
            this.enhancementPairDecl();
            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1163;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptEnhancementDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conceptEnhancementDecl;
    this.spec = null; // Token
    this.specArgs = null; // ModuleArgumentListContext
    return this;
}

ConceptEnhancementDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptEnhancementDeclContext.prototype.constructor = ConceptEnhancementDeclContext;

ConceptEnhancementDeclContext.prototype.ENHANCED = function() {
    return this.getToken(ResolveParser.ENHANCED, 0);
};

ConceptEnhancementDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

ConceptEnhancementDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

ConceptEnhancementDeclContext.prototype.moduleArgumentList = function() {
    return this.getTypedRuleContext(ModuleArgumentListContext,0);
};

ConceptEnhancementDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConceptEnhancementDecl(this);
	}
};

ConceptEnhancementDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConceptEnhancementDecl(this);
	}
};




ResolveParser.ConceptEnhancementDeclContext = ConceptEnhancementDeclContext;

ResolveParser.prototype.conceptEnhancementDecl = function() {

    var localctx = new ConceptEnhancementDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ResolveParser.RULE_conceptEnhancementDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.match(ResolveParser.ENHANCED);
        this.state = 1166;
        this.match(ResolveParser.BY);
        this.state = 1167;
        localctx.spec = this.match(ResolveParser.IDENTIFIER);
        this.state = 1169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1168;
            localctx.specArgs = this.moduleArgumentList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancementPairDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_enhancementPairDecl;
    this.spec = null; // Token
    this.specArgs = null; // ModuleArgumentListContext
    this.impl = null; // Token
    this.profile = null; // Token
    this.implArgs = null; // ModuleArgumentListContext
    return this;
}

EnhancementPairDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancementPairDeclContext.prototype.constructor = EnhancementPairDeclContext;

EnhancementPairDeclContext.prototype.ENHANCED = function() {
    return this.getToken(ResolveParser.ENHANCED, 0);
};

EnhancementPairDeclContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.BY);
    } else {
        return this.getToken(ResolveParser.BY, i);
    }
};


EnhancementPairDeclContext.prototype.REALIZED = function() {
    return this.getToken(ResolveParser.REALIZED, 0);
};

EnhancementPairDeclContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


EnhancementPairDeclContext.prototype.WITH_PROFILE = function() {
    return this.getToken(ResolveParser.WITH_PROFILE, 0);
};

EnhancementPairDeclContext.prototype.moduleArgumentList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleArgumentListContext);
    } else {
        return this.getTypedRuleContext(ModuleArgumentListContext,i);
    }
};

EnhancementPairDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnhancementPairDecl(this);
	}
};

EnhancementPairDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnhancementPairDecl(this);
	}
};




ResolveParser.EnhancementPairDeclContext = EnhancementPairDeclContext;

ResolveParser.prototype.enhancementPairDecl = function() {

    var localctx = new EnhancementPairDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ResolveParser.RULE_enhancementPairDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1171;
        this.match(ResolveParser.ENHANCED);
        this.state = 1172;
        this.match(ResolveParser.BY);
        this.state = 1173;
        localctx.spec = this.match(ResolveParser.IDENTIFIER);
        this.state = 1175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1174;
            localctx.specArgs = this.moduleArgumentList();
        }

        this.state = 1177;
        this.match(ResolveParser.REALIZED);
        this.state = 1178;
        this.match(ResolveParser.BY);
        this.state = 1179;
        localctx.impl = this.match(ResolveParser.IDENTIFIER);
        this.state = 1182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WITH_PROFILE) {
            this.state = 1180;
            this.match(ResolveParser.WITH_PROFILE);
            this.state = 1181;
            localctx.profile = this.match(ResolveParser.IDENTIFIER);
        }

        this.state = 1185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1184;
            localctx.implArgs = this.moduleArgumentList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_moduleArgumentList;
    return this;
}

ModuleArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleArgumentListContext.prototype.constructor = ModuleArgumentListContext;

ModuleArgumentListContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

ModuleArgumentListContext.prototype.moduleArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleArgumentContext);
    } else {
        return this.getTypedRuleContext(ModuleArgumentContext,i);
    }
};

ModuleArgumentListContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

ModuleArgumentListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


ModuleArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModuleArgumentList(this);
	}
};

ModuleArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModuleArgumentList(this);
	}
};




ResolveParser.ModuleArgumentListContext = ModuleArgumentListContext;

ResolveParser.prototype.moduleArgumentList = function() {

    var localctx = new ModuleArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ResolveParser.RULE_moduleArgumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1187;
        this.match(ResolveParser.LPAREN);
        this.state = 1188;
        this.moduleArgument();
        this.state = 1193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1189;
            this.match(ResolveParser.COMMA);
            this.state = 1190;
            this.moduleArgument();
            this.state = 1195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1196;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_moduleArgument;
    return this;
}

ModuleArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleArgumentContext.prototype.constructor = ModuleArgumentContext;

ModuleArgumentContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

ModuleArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModuleArgument(this);
	}
};

ModuleArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModuleArgument(this);
	}
};




ResolveParser.ModuleArgumentContext = ModuleArgumentContext;

ResolveParser.prototype.moduleArgument = function() {

    var localctx = new ModuleArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ResolveParser.RULE_moduleArgument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1198;
        this.progExp(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathVariableDeclGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathVariableDeclGroup;
    return this;
}

MathVariableDeclGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathVariableDeclGroupContext.prototype.constructor = MathVariableDeclGroupContext;

MathVariableDeclGroupContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


MathVariableDeclGroupContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

MathVariableDeclGroupContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

MathVariableDeclGroupContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


MathVariableDeclGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathVariableDeclGroup(this);
	}
};

MathVariableDeclGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathVariableDeclGroup(this);
	}
};




ResolveParser.MathVariableDeclGroupContext = MathVariableDeclGroupContext;

ResolveParser.prototype.mathVariableDeclGroup = function() {

    var localctx = new MathVariableDeclGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ResolveParser.RULE_mathVariableDeclGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1200;
        this.match(ResolveParser.IDENTIFIER);
        this.state = 1205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1201;
            this.match(ResolveParser.COMMA);
            this.state = 1202;
            this.match(ResolveParser.IDENTIFIER);
            this.state = 1207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1208;
        this.match(ResolveParser.COLON);
        this.state = 1209;
        this.mathTypeExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathVariableDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathVariableDecl;
    return this;
}

MathVariableDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathVariableDeclContext.prototype.constructor = MathVariableDeclContext;

MathVariableDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathVariableDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

MathVariableDeclContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

MathVariableDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathVariableDecl(this);
	}
};

MathVariableDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathVariableDecl(this);
	}
};




ResolveParser.MathVariableDeclContext = MathVariableDeclContext;

ResolveParser.prototype.mathVariableDecl = function() {

    var localctx = new MathVariableDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ResolveParser.RULE_mathVariableDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1211;
        this.match(ResolveParser.IDENTIFIER);
        this.state = 1212;
        this.match(ResolveParser.COLON);
        this.state = 1213;
        this.mathTypeExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_variableDeclGroup;
    return this;
}

VariableDeclGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclGroupContext.prototype.constructor = VariableDeclGroupContext;

VariableDeclGroupContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


VariableDeclGroupContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

VariableDeclGroupContext.prototype.programNamedType = function() {
    return this.getTypedRuleContext(ProgramNamedTypeContext,0);
};

VariableDeclGroupContext.prototype.programArrayType = function() {
    return this.getTypedRuleContext(ProgramArrayTypeContext,0);
};

VariableDeclGroupContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


VariableDeclGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterVariableDeclGroup(this);
	}
};

VariableDeclGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitVariableDeclGroup(this);
	}
};




ResolveParser.VariableDeclGroupContext = VariableDeclGroupContext;

ResolveParser.prototype.variableDeclGroup = function() {

    var localctx = new VariableDeclGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ResolveParser.RULE_variableDeclGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.match(ResolveParser.IDENTIFIER);
        this.state = 1220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1216;
            this.match(ResolveParser.COMMA);
            this.state = 1217;
            this.match(ResolveParser.IDENTIFIER);
            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1223;
        this.match(ResolveParser.COLON);
        this.state = 1226;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IDENTIFIER:
            this.state = 1224;
            this.programNamedType();
            break;
        case ResolveParser.ARRAY:
            this.state = 1225;
            this.programArrayType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_variableDecl;
    return this;
}

VariableDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclContext.prototype.constructor = VariableDeclContext;

VariableDeclContext.prototype.VAR = function() {
    return this.getToken(ResolveParser.VAR, 0);
};

VariableDeclContext.prototype.variableDeclGroup = function() {
    return this.getTypedRuleContext(VariableDeclGroupContext,0);
};

VariableDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

VariableDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterVariableDecl(this);
	}
};

VariableDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitVariableDecl(this);
	}
};




ResolveParser.VariableDeclContext = VariableDeclContext;

ResolveParser.prototype.variableDecl = function() {

    var localctx = new VariableDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ResolveParser.RULE_variableDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1228;
        this.match(ResolveParser.VAR);
        this.state = 1229;
        this.variableDeclGroup();
        this.state = 1230;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleStateVariableDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_moduleStateVariableDecl;
    return this;
}

ModuleStateVariableDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleStateVariableDeclContext.prototype.constructor = ModuleStateVariableDeclContext;

ModuleStateVariableDeclContext.prototype.ABSTRACT_VAR = function() {
    return this.getToken(ResolveParser.ABSTRACT_VAR, 0);
};

ModuleStateVariableDeclContext.prototype.mathVariableDeclGroup = function() {
    return this.getTypedRuleContext(MathVariableDeclGroupContext,0);
};

ModuleStateVariableDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ModuleStateVariableDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterModuleStateVariableDecl(this);
	}
};

ModuleStateVariableDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitModuleStateVariableDecl(this);
	}
};




ResolveParser.ModuleStateVariableDeclContext = ModuleStateVariableDeclContext;

ResolveParser.prototype.moduleStateVariableDecl = function() {

    var localctx = new ModuleStateVariableDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ResolveParser.RULE_moduleStateVariableDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(ResolveParser.ABSTRACT_VAR);
        this.state = 1233;
        this.mathVariableDeclGroup();
        this.state = 1234;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.assignStmt = function() {
    return this.getTypedRuleContext(AssignStmtContext,0);
};

StmtContext.prototype.swapStmt = function() {
    return this.getTypedRuleContext(SwapStmtContext,0);
};

StmtContext.prototype.callStmt = function() {
    return this.getTypedRuleContext(CallStmtContext,0);
};

StmtContext.prototype.presumeStmt = function() {
    return this.getTypedRuleContext(PresumeStmtContext,0);
};

StmtContext.prototype.confirmStmt = function() {
    return this.getTypedRuleContext(ConfirmStmtContext,0);
};

StmtContext.prototype.memoryStmt = function() {
    return this.getTypedRuleContext(MemoryStmtContext,0);
};

StmtContext.prototype.ifStmt = function() {
    return this.getTypedRuleContext(IfStmtContext,0);
};

StmtContext.prototype.whileStmt = function() {
    return this.getTypedRuleContext(WhileStmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitStmt(this);
	}
};




ResolveParser.StmtContext = StmtContext;

ResolveParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ResolveParser.RULE_stmt);
    try {
        this.state = 1244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1236;
            this.assignStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1237;
            this.swapStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1238;
            this.callStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1239;
            this.presumeStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1240;
            this.confirmStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1241;
            this.memoryStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1242;
            this.ifStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1243;
            this.whileStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_assignStmt;
    this.left = null; // ProgVariableExpContext
    this.right = null; // ProgExpContext
    return this;
}

AssignStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignStmtContext.prototype.constructor = AssignStmtContext;

AssignStmtContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ResolveParser.ASSIGN_OP, 0);
};

AssignStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

AssignStmtContext.prototype.progVariableExp = function() {
    return this.getTypedRuleContext(ProgVariableExpContext,0);
};

AssignStmtContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

AssignStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterAssignStmt(this);
	}
};

AssignStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitAssignStmt(this);
	}
};




ResolveParser.AssignStmtContext = AssignStmtContext;

ResolveParser.prototype.assignStmt = function() {

    var localctx = new AssignStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ResolveParser.RULE_assignStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1246;
        localctx.left = this.progVariableExp();
        this.state = 1247;
        this.match(ResolveParser.ASSIGN_OP);
        this.state = 1248;
        localctx.right = this.progExp(0);
        this.state = 1249;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwapStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_swapStmt;
    this.left = null; // ProgVariableExpContext
    this.right = null; // ProgVariableExpContext
    return this;
}

SwapStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwapStmtContext.prototype.constructor = SwapStmtContext;

SwapStmtContext.prototype.SWAP_OP = function() {
    return this.getToken(ResolveParser.SWAP_OP, 0);
};

SwapStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

SwapStmtContext.prototype.progVariableExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgVariableExpContext);
    } else {
        return this.getTypedRuleContext(ProgVariableExpContext,i);
    }
};

SwapStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterSwapStmt(this);
	}
};

SwapStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitSwapStmt(this);
	}
};




ResolveParser.SwapStmtContext = SwapStmtContext;

ResolveParser.prototype.swapStmt = function() {

    var localctx = new SwapStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ResolveParser.RULE_swapStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1251;
        localctx.left = this.progVariableExp();
        this.state = 1252;
        this.match(ResolveParser.SWAP_OP);
        this.state = 1253;
        localctx.right = this.progVariableExp();
        this.state = 1254;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_callStmt;
    return this;
}

CallStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallStmtContext.prototype.constructor = CallStmtContext;

CallStmtContext.prototype.progParamExp = function() {
    return this.getTypedRuleContext(ProgParamExpContext,0);
};

CallStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

CallStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterCallStmt(this);
	}
};

CallStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitCallStmt(this);
	}
};




ResolveParser.CallStmtContext = CallStmtContext;

ResolveParser.prototype.callStmt = function() {

    var localctx = new CallStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ResolveParser.RULE_callStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.progParamExp();
        this.state = 1257;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PresumeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_presumeStmt;
    return this;
}

PresumeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PresumeStmtContext.prototype.constructor = PresumeStmtContext;

PresumeStmtContext.prototype.PRESUME = function() {
    return this.getToken(ResolveParser.PRESUME, 0);
};

PresumeStmtContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

PresumeStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

PresumeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPresumeStmt(this);
	}
};

PresumeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPresumeStmt(this);
	}
};




ResolveParser.PresumeStmtContext = PresumeStmtContext;

ResolveParser.prototype.presumeStmt = function() {

    var localctx = new PresumeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ResolveParser.RULE_presumeStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1259;
        this.match(ResolveParser.PRESUME);
        this.state = 1260;
        this.mathExp();
        this.state = 1261;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConfirmStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_confirmStmt;
    return this;
}

ConfirmStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConfirmStmtContext.prototype.constructor = ConfirmStmtContext;

ConfirmStmtContext.prototype.CONFIRM = function() {
    return this.getToken(ResolveParser.CONFIRM, 0);
};

ConfirmStmtContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

ConfirmStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ConfirmStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConfirmStmt(this);
	}
};

ConfirmStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConfirmStmt(this);
	}
};




ResolveParser.ConfirmStmtContext = ConfirmStmtContext;

ResolveParser.prototype.confirmStmt = function() {

    var localctx = new ConfirmStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ResolveParser.RULE_confirmStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1263;
        this.match(ResolveParser.CONFIRM);
        this.state = 1264;
        this.mathExp();
        this.state = 1265;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemoryStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_memoryStmt;
    return this;
}

MemoryStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemoryStmtContext.prototype.constructor = MemoryStmtContext;

MemoryStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MemoryStmtContext.prototype.REMEMBER = function() {
    return this.getToken(ResolveParser.REMEMBER, 0);
};

MemoryStmtContext.prototype.FORGET = function() {
    return this.getToken(ResolveParser.FORGET, 0);
};

MemoryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMemoryStmt(this);
	}
};

MemoryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMemoryStmt(this);
	}
};




ResolveParser.MemoryStmtContext = MemoryStmtContext;

ResolveParser.prototype.memoryStmt = function() {

    var localctx = new MemoryStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ResolveParser.RULE_memoryStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1267;
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.FORGET || _la===ResolveParser.REMEMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1268;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_ifStmt;
    return this;
}

IfStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStmtContext.prototype.constructor = IfStmtContext;

IfStmtContext.prototype.IF = function() {
    return this.getToken(ResolveParser.IF, 0);
};

IfStmtContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

IfStmtContext.prototype.THEN = function() {
    return this.getToken(ResolveParser.THEN, 0);
};

IfStmtContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

IfStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

IfStmtContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

IfStmtContext.prototype.elsePart = function() {
    return this.getTypedRuleContext(ElsePartContext,0);
};

IfStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterIfStmt(this);
	}
};

IfStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitIfStmt(this);
	}
};




ResolveParser.IfStmtContext = IfStmtContext;

ResolveParser.prototype.ifStmt = function() {

    var localctx = new IfStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ResolveParser.RULE_ifStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1270;
        this.match(ResolveParser.IF);
        this.state = 1271;
        this.progExp(0);
        this.state = 1272;
        this.match(ResolveParser.THEN);
        this.state = 1276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1273;
            this.stmt();
            this.state = 1278;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1280;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.ELSE) {
            this.state = 1279;
            this.elsePart();
        }

        this.state = 1282;
        this.match(ResolveParser.END);
        this.state = 1283;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElsePartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_elsePart;
    return this;
}

ElsePartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElsePartContext.prototype.constructor = ElsePartContext;

ElsePartContext.prototype.ELSE = function() {
    return this.getToken(ResolveParser.ELSE, 0);
};

ElsePartContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

ElsePartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterElsePart(this);
	}
};

ElsePartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitElsePart(this);
	}
};




ResolveParser.ElsePartContext = ElsePartContext;

ResolveParser.prototype.elsePart = function() {

    var localctx = new ElsePartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ResolveParser.RULE_elsePart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1285;
        this.match(ResolveParser.ELSE);
        this.state = 1289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1286;
            this.stmt();
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_whileStmt;
    return this;
}

WhileStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStmtContext.prototype.constructor = WhileStmtContext;

WhileStmtContext.prototype.WHILE = function() {
    return this.getToken(ResolveParser.WHILE, 0);
};

WhileStmtContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

WhileStmtContext.prototype.DO = function() {
    return this.getToken(ResolveParser.DO, 0);
};

WhileStmtContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

WhileStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

WhileStmtContext.prototype.decreasingClause = function() {
    return this.getTypedRuleContext(DecreasingClauseContext,0);
};

WhileStmtContext.prototype.changingClause = function() {
    return this.getTypedRuleContext(ChangingClauseContext,0);
};

WhileStmtContext.prototype.maintainingClause = function() {
    return this.getTypedRuleContext(MaintainingClauseContext,0);
};

WhileStmtContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

WhileStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterWhileStmt(this);
	}
};

WhileStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitWhileStmt(this);
	}
};




ResolveParser.WhileStmtContext = WhileStmtContext;

ResolveParser.prototype.whileStmt = function() {

    var localctx = new WhileStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ResolveParser.RULE_whileStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1292;
        this.match(ResolveParser.WHILE);
        this.state = 1293;
        this.progExp(0);
        this.state = 1295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.CHANGING) {
            this.state = 1294;
            this.changingClause();
        }

        this.state = 1298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.MAINTAINING) {
            this.state = 1297;
            this.maintainingClause();
        }

        this.state = 1300;
        this.decreasingClause();
        this.state = 1301;
        this.match(ResolveParser.DO);
        this.state = 1305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.CONFIRM || _la===ResolveParser.FORGET || _la===ResolveParser.IF || _la===ResolveParser.PRESUME || _la===ResolveParser.REMEMBER || _la===ResolveParser.WHILE || _la===ResolveParser.IDENTIFIER) {
            this.state = 1302;
            this.stmt();
            this.state = 1307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1308;
        this.match(ResolveParser.END);
        this.state = 1309;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTypeTheoremDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTypeTheoremDecl;
    this.name = null; // Token
    return this;
}

MathTypeTheoremDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTypeTheoremDeclContext.prototype.constructor = MathTypeTheoremDeclContext;

MathTypeTheoremDeclContext.prototype.TYPE = function() {
    return this.getToken(ResolveParser.TYPE, 0);
};

MathTypeTheoremDeclContext.prototype.THEOREM = function() {
    return this.getToken(ResolveParser.THEOREM, 0);
};

MathTypeTheoremDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

MathTypeTheoremDeclContext.prototype.mathImpliesExp = function() {
    return this.getTypedRuleContext(MathImpliesExpContext,0);
};

MathTypeTheoremDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathTypeTheoremDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathTypeTheoremDeclContext.prototype.FORALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.FORALL);
    } else {
        return this.getToken(ResolveParser.FORALL, i);
    }
};


MathTypeTheoremDeclContext.prototype.mathVariableDeclGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVariableDeclGroupContext);
    } else {
        return this.getTypedRuleContext(MathVariableDeclGroupContext,i);
    }
};

MathTypeTheoremDeclContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


MathTypeTheoremDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeTheoremDecl(this);
	}
};

MathTypeTheoremDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeTheoremDecl(this);
	}
};




ResolveParser.MathTypeTheoremDeclContext = MathTypeTheoremDeclContext;

ResolveParser.prototype.mathTypeTheoremDecl = function() {

    var localctx = new MathTypeTheoremDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ResolveParser.RULE_mathTypeTheoremDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1311;
        this.match(ResolveParser.TYPE);
        this.state = 1312;
        this.match(ResolveParser.THEOREM);
        this.state = 1313;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1314;
        this.match(ResolveParser.COLON);
        this.state = 1319; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1315;
            this.match(ResolveParser.FORALL);
            this.state = 1316;
            this.mathVariableDeclGroup();
            this.state = 1317;
            this.match(ResolveParser.COMMA);
            this.state = 1321; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ResolveParser.FORALL);
        this.state = 1323;
        this.mathImpliesExp();
        this.state = 1324;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathAssertionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathAssertionDecl;
    this.assertionType = null; // Token
    this.name = null; // MathTheoremIdentContext
    return this;
}

MathAssertionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathAssertionDeclContext.prototype.constructor = MathAssertionDeclContext;

MathAssertionDeclContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

MathAssertionDeclContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathAssertionDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathAssertionDeclContext.prototype.mathTheoremIdent = function() {
    return this.getTypedRuleContext(MathTheoremIdentContext,0);
};

MathAssertionDeclContext.prototype.AXIOM = function() {
    return this.getToken(ResolveParser.AXIOM, 0);
};

MathAssertionDeclContext.prototype.COROLLARY = function() {
    return this.getToken(ResolveParser.COROLLARY, 0);
};

MathAssertionDeclContext.prototype.LEMMA = function() {
    return this.getToken(ResolveParser.LEMMA, 0);
};

MathAssertionDeclContext.prototype.PROPERTY = function() {
    return this.getToken(ResolveParser.PROPERTY, 0);
};

MathAssertionDeclContext.prototype.THEOREM = function() {
    return this.getToken(ResolveParser.THEOREM, 0);
};

MathAssertionDeclContext.prototype.THEOREM_ASSOCIATIVE = function() {
    return this.getToken(ResolveParser.THEOREM_ASSOCIATIVE, 0);
};

MathAssertionDeclContext.prototype.THEOREM_COMMUTATIVE = function() {
    return this.getToken(ResolveParser.THEOREM_COMMUTATIVE, 0);
};

MathAssertionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathAssertionDecl(this);
	}
};

MathAssertionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathAssertionDecl(this);
	}
};




ResolveParser.MathAssertionDeclContext = MathAssertionDeclContext;

ResolveParser.prototype.mathAssertionDecl = function() {

    var localctx = new MathAssertionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ResolveParser.RULE_mathAssertionDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1326;
        localctx.assertionType = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.AXIOM || _la===ResolveParser.COROLLARY || _la===ResolveParser.LEMMA || _la===ResolveParser.PROPERTY || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (ResolveParser.THEOREM - 118)) | (1 << (ResolveParser.THEOREM_ASSOCIATIVE - 118)) | (1 << (ResolveParser.THEOREM_COMMUTATIVE - 118)))) !== 0))) {
            localctx.assertionType = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1327;
        localctx.name = this.mathTheoremIdent();
        this.state = 1328;
        this.match(ResolveParser.COLON);
        this.state = 1329;
        this.mathExp();
        this.state = 1330;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTheoremIdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTheoremIdent;
    return this;
}

MathTheoremIdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTheoremIdentContext.prototype.constructor = MathTheoremIdentContext;

MathTheoremIdentContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathTheoremIdentContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ResolveParser.INTEGER_LITERAL, 0);
};

MathTheoremIdentContext.prototype.REAL_LITERAL = function() {
    return this.getToken(ResolveParser.REAL_LITERAL, 0);
};

MathTheoremIdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTheoremIdent(this);
	}
};

MathTheoremIdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTheoremIdent(this);
	}
};




ResolveParser.MathTheoremIdentContext = MathTheoremIdentContext;

ResolveParser.prototype.mathTheoremIdent = function() {

    var localctx = new MathTheoremIdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ResolveParser.RULE_mathTheoremIdent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1332;
        _la = this._input.LA(1);
        if(!(((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (ResolveParser.INTEGER_LITERAL - 168)) | (1 << (ResolveParser.REAL_LITERAL - 168)) | (1 << (ResolveParser.IDENTIFIER - 168)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTypeDefinitionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTypeDefinitionDecl;
    this.name = null; // Token
    return this;
}

MathTypeDefinitionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTypeDefinitionDeclContext.prototype.constructor = MathTypeDefinitionDeclContext;

MathTypeDefinitionDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

MathTypeDefinitionDeclContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

MathTypeDefinitionDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathTypeDefinitionDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathTypeDefinitionDeclContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

MathTypeDefinitionDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

MathTypeDefinitionDeclContext.prototype.REPRESENTED = function() {
    return this.getToken(ResolveParser.REPRESENTED, 0);
};

MathTypeDefinitionDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

MathTypeDefinitionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeDefinitionDecl(this);
	}
};

MathTypeDefinitionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeDefinitionDecl(this);
	}
};




ResolveParser.MathTypeDefinitionDeclContext = MathTypeDefinitionDeclContext;

ResolveParser.prototype.mathTypeDefinitionDecl = function() {

    var localctx = new MathTypeDefinitionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ResolveParser.RULE_mathTypeDefinitionDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334;
        this.match(ResolveParser.DEFINITION);
        this.state = 1335;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1340;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.EQL:
            this.state = 1336;
            this.match(ResolveParser.EQL);
            break;
        case ResolveParser.IS:
            this.state = 1337;
            this.match(ResolveParser.IS);
            this.state = 1338;
            this.match(ResolveParser.REPRESENTED);
            this.state = 1339;
            this.match(ResolveParser.BY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1342;
        this.mathTypeExp();
        this.state = 1343;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathDefinesDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathDefinesDecl;
    return this;
}

MathDefinesDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathDefinesDeclContext.prototype.constructor = MathDefinesDeclContext;

MathDefinesDeclContext.prototype.DEFINES = function() {
    return this.getToken(ResolveParser.DEFINES, 0);
};

MathDefinesDeclContext.prototype.definitionSignature = function() {
    return this.getTypedRuleContext(DefinitionSignatureContext,0);
};

MathDefinesDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathDefinesDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathDefinesDecl(this);
	}
};

MathDefinesDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathDefinesDecl(this);
	}
};




ResolveParser.MathDefinesDeclContext = MathDefinesDeclContext;

ResolveParser.prototype.mathDefinesDecl = function() {

    var localctx = new MathDefinesDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ResolveParser.RULE_mathDefinesDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1345;
        this.match(ResolveParser.DEFINES);
        this.state = 1346;
        this.definitionSignature();
        this.state = 1347;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathDefinitionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathDefinitionDecl;
    return this;
}

MathDefinitionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathDefinitionDeclContext.prototype.constructor = MathDefinitionDeclContext;

MathDefinitionDeclContext.prototype.mathImplicitDefinitionDecl = function() {
    return this.getTypedRuleContext(MathImplicitDefinitionDeclContext,0);
};

MathDefinitionDeclContext.prototype.mathStandardDefinitionDecl = function() {
    return this.getTypedRuleContext(MathStandardDefinitionDeclContext,0);
};

MathDefinitionDeclContext.prototype.mathInductiveDefinitionDecl = function() {
    return this.getTypedRuleContext(MathInductiveDefinitionDeclContext,0);
};

MathDefinitionDeclContext.prototype.mathCategoricalDecl = function() {
    return this.getTypedRuleContext(MathCategoricalDeclContext,0);
};

MathDefinitionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathDefinitionDecl(this);
	}
};

MathDefinitionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathDefinitionDecl(this);
	}
};




ResolveParser.MathDefinitionDeclContext = MathDefinitionDeclContext;

ResolveParser.prototype.mathDefinitionDecl = function() {

    var localctx = new MathDefinitionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ResolveParser.RULE_mathDefinitionDecl);
    try {
        this.state = 1353;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IMPLICIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1349;
            this.mathImplicitDefinitionDecl();
            break;
        case ResolveParser.DEFINITION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1350;
            this.mathStandardDefinitionDecl();
            break;
        case ResolveParser.INDUCTIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1351;
            this.mathInductiveDefinitionDecl();
            break;
        case ResolveParser.CATEGORICAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1352;
            this.mathCategoricalDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathCategoricalDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathCategoricalDecl;
    return this;
}

MathCategoricalDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathCategoricalDeclContext.prototype.constructor = MathCategoricalDeclContext;

MathCategoricalDeclContext.prototype.CATEGORICAL = function() {
    return this.getToken(ResolveParser.CATEGORICAL, 0);
};

MathCategoricalDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

MathCategoricalDeclContext.prototype.INTRODUCES = function() {
    return this.getToken(ResolveParser.INTRODUCES, 0);
};

MathCategoricalDeclContext.prototype.categoricalDefinitionSignature = function() {
    return this.getTypedRuleContext(CategoricalDefinitionSignatureContext,0);
};

MathCategoricalDeclContext.prototype.RELATED = function() {
    return this.getToken(ResolveParser.RELATED, 0);
};

MathCategoricalDeclContext.prototype.BY = function() {
    return this.getToken(ResolveParser.BY, 0);
};

MathCategoricalDeclContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathCategoricalDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathCategoricalDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathCategoricalDecl(this);
	}
};

MathCategoricalDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathCategoricalDecl(this);
	}
};




ResolveParser.MathCategoricalDeclContext = MathCategoricalDeclContext;

ResolveParser.prototype.mathCategoricalDecl = function() {

    var localctx = new MathCategoricalDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ResolveParser.RULE_mathCategoricalDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this.match(ResolveParser.CATEGORICAL);
        this.state = 1356;
        this.match(ResolveParser.DEFINITION);
        this.state = 1357;
        this.match(ResolveParser.INTRODUCES);
        this.state = 1358;
        this.categoricalDefinitionSignature();
        this.state = 1359;
        this.match(ResolveParser.RELATED);
        this.state = 1360;
        this.match(ResolveParser.BY);
        this.state = 1361;
        this.mathExp();
        this.state = 1362;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathImplicitDefinitionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathImplicitDefinitionDecl;
    return this;
}

MathImplicitDefinitionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathImplicitDefinitionDeclContext.prototype.constructor = MathImplicitDefinitionDeclContext;

MathImplicitDefinitionDeclContext.prototype.IMPLICIT = function() {
    return this.getToken(ResolveParser.IMPLICIT, 0);
};

MathImplicitDefinitionDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

MathImplicitDefinitionDeclContext.prototype.definitionSignature = function() {
    return this.getTypedRuleContext(DefinitionSignatureContext,0);
};

MathImplicitDefinitionDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

MathImplicitDefinitionDeclContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathImplicitDefinitionDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathImplicitDefinitionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathImplicitDefinitionDecl(this);
	}
};

MathImplicitDefinitionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathImplicitDefinitionDecl(this);
	}
};




ResolveParser.MathImplicitDefinitionDeclContext = MathImplicitDefinitionDeclContext;

ResolveParser.prototype.mathImplicitDefinitionDecl = function() {

    var localctx = new MathImplicitDefinitionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ResolveParser.RULE_mathImplicitDefinitionDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1364;
        this.match(ResolveParser.IMPLICIT);
        this.state = 1365;
        this.match(ResolveParser.DEFINITION);
        this.state = 1366;
        this.definitionSignature();
        this.state = 1367;
        this.match(ResolveParser.IS);
        this.state = 1368;
        this.mathExp();
        this.state = 1369;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathInductiveDefinitionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathInductiveDefinitionDecl;
    return this;
}

MathInductiveDefinitionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathInductiveDefinitionDeclContext.prototype.constructor = MathInductiveDefinitionDeclContext;

MathInductiveDefinitionDeclContext.prototype.INDUCTIVE = function() {
    return this.getToken(ResolveParser.INDUCTIVE, 0);
};

MathInductiveDefinitionDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

MathInductiveDefinitionDeclContext.prototype.definitionSignature = function() {
    return this.getTypedRuleContext(DefinitionSignatureContext,0);
};

MathInductiveDefinitionDeclContext.prototype.IS = function() {
    return this.getToken(ResolveParser.IS, 0);
};

MathInductiveDefinitionDeclContext.prototype.INDUCTIVE_BASE_NUM = function() {
    return this.getToken(ResolveParser.INDUCTIVE_BASE_NUM, 0);
};

MathInductiveDefinitionDeclContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

MathInductiveDefinitionDeclContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


MathInductiveDefinitionDeclContext.prototype.INDUCTIVE_HYP_NUM = function() {
    return this.getToken(ResolveParser.INDUCTIVE_HYP_NUM, 0);
};

MathInductiveDefinitionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathInductiveDefinitionDecl(this);
	}
};

MathInductiveDefinitionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathInductiveDefinitionDecl(this);
	}
};




ResolveParser.MathInductiveDefinitionDeclContext = MathInductiveDefinitionDeclContext;

ResolveParser.prototype.mathInductiveDefinitionDecl = function() {

    var localctx = new MathInductiveDefinitionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ResolveParser.RULE_mathInductiveDefinitionDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1371;
        this.match(ResolveParser.INDUCTIVE);
        this.state = 1372;
        this.match(ResolveParser.DEFINITION);
        this.state = 1373;
        this.definitionSignature();
        this.state = 1374;
        this.match(ResolveParser.IS);
        this.state = 1375;
        this.match(ResolveParser.INDUCTIVE_BASE_NUM);
        this.state = 1376;
        this.mathExp();
        this.state = 1377;
        this.match(ResolveParser.SEMICOLON);
        this.state = 1378;
        this.match(ResolveParser.INDUCTIVE_HYP_NUM);
        this.state = 1379;
        this.mathExp();
        this.state = 1380;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathStandardDefinitionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathStandardDefinitionDecl;
    return this;
}

MathStandardDefinitionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathStandardDefinitionDeclContext.prototype.constructor = MathStandardDefinitionDeclContext;

MathStandardDefinitionDeclContext.prototype.DEFINITION = function() {
    return this.getToken(ResolveParser.DEFINITION, 0);
};

MathStandardDefinitionDeclContext.prototype.definitionSignature = function() {
    return this.getTypedRuleContext(DefinitionSignatureContext,0);
};

MathStandardDefinitionDeclContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathStandardDefinitionDeclContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

MathStandardDefinitionDeclContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathStandardDefinitionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathStandardDefinitionDecl(this);
	}
};

MathStandardDefinitionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathStandardDefinitionDecl(this);
	}
};




ResolveParser.MathStandardDefinitionDeclContext = MathStandardDefinitionDeclContext;

ResolveParser.prototype.mathStandardDefinitionDecl = function() {

    var localctx = new MathStandardDefinitionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ResolveParser.RULE_mathStandardDefinitionDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1382;
        this.match(ResolveParser.DEFINITION);
        this.state = 1383;
        this.definitionSignature();
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.EQL) {
            this.state = 1384;
            this.match(ResolveParser.EQL);
            this.state = 1385;
            this.mathExp();
        }

        this.state = 1388;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CategoricalDefinitionSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_categoricalDefinitionSignature;
    return this;
}

CategoricalDefinitionSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoricalDefinitionSignatureContext.prototype.constructor = CategoricalDefinitionSignatureContext;

CategoricalDefinitionSignatureContext.prototype.definitionSignature = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefinitionSignatureContext);
    } else {
        return this.getTypedRuleContext(DefinitionSignatureContext,i);
    }
};

CategoricalDefinitionSignatureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


CategoricalDefinitionSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterCategoricalDefinitionSignature(this);
	}
};

CategoricalDefinitionSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitCategoricalDefinitionSignature(this);
	}
};




ResolveParser.CategoricalDefinitionSignatureContext = CategoricalDefinitionSignatureContext;

ResolveParser.prototype.categoricalDefinitionSignature = function() {

    var localctx = new CategoricalDefinitionSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ResolveParser.RULE_categoricalDefinitionSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.definitionSignature();
        this.state = 1395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1391;
            this.match(ResolveParser.COMMA);
            this.state = 1392;
            this.definitionSignature();
            this.state = 1397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinitionSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_definitionSignature;
    return this;
}

DefinitionSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionSignatureContext.prototype.constructor = DefinitionSignatureContext;

DefinitionSignatureContext.prototype.standardInfixSignature = function() {
    return this.getTypedRuleContext(StandardInfixSignatureContext,0);
};

DefinitionSignatureContext.prototype.standardOutfixSignature = function() {
    return this.getTypedRuleContext(StandardOutfixSignatureContext,0);
};

DefinitionSignatureContext.prototype.standardPrefixSignature = function() {
    return this.getTypedRuleContext(StandardPrefixSignatureContext,0);
};

DefinitionSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDefinitionSignature(this);
	}
};

DefinitionSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDefinitionSignature(this);
	}
};




ResolveParser.DefinitionSignatureContext = DefinitionSignatureContext;

ResolveParser.prototype.definitionSignature = function() {

    var localctx = new DefinitionSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ResolveParser.RULE_definitionSignature);
    try {
        this.state = 1401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1398;
            this.standardInfixSignature();
            break;
        case ResolveParser.BAR:
        case ResolveParser.DBL_BAR:
        case ResolveParser.LL:
        case ResolveParser.LT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1399;
            this.standardOutfixSignature();
            break;
        case ResolveParser.ABS:
        case ResolveParser.COMPLEMENT:
        case ResolveParser.NOT:
        case ResolveParser.MINUS:
        case ResolveParser.PLUS:
        case ResolveParser.INTEGER_LITERAL:
        case ResolveParser.REAL_LITERAL:
        case ResolveParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1400;
            this.standardPrefixSignature();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandardInfixSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_standardInfixSignature;
    return this;
}

StandardInfixSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardInfixSignatureContext.prototype.constructor = StandardInfixSignatureContext;

StandardInfixSignatureContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.LPAREN);
    } else {
        return this.getToken(ResolveParser.LPAREN, i);
    }
};


StandardInfixSignatureContext.prototype.mathVariableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVariableDeclContext);
    } else {
        return this.getTypedRuleContext(MathVariableDeclContext,i);
    }
};

StandardInfixSignatureContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.RPAREN);
    } else {
        return this.getToken(ResolveParser.RPAREN, i);
    }
};


StandardInfixSignatureContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

StandardInfixSignatureContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

StandardInfixSignatureContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

StandardInfixSignatureContext.prototype.infixOp = function() {
    return this.getTypedRuleContext(InfixOpContext,0);
};

StandardInfixSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterStandardInfixSignature(this);
	}
};

StandardInfixSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitStandardInfixSignature(this);
	}
};




ResolveParser.StandardInfixSignatureContext = StandardInfixSignatureContext;

ResolveParser.prototype.standardInfixSignature = function() {

    var localctx = new StandardInfixSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ResolveParser.RULE_standardInfixSignature);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.match(ResolveParser.LPAREN);
        this.state = 1404;
        this.mathVariableDecl();
        this.state = 1405;
        this.match(ResolveParser.RPAREN);
        this.state = 1408;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IDENTIFIER:
            this.state = 1406;
            this.match(ResolveParser.IDENTIFIER);
            break;
        case ResolveParser.AND:
        case ResolveParser.DIV:
        case ResolveParser.IFF:
        case ResolveParser.IMPLIES:
        case ResolveParser.IN:
        case ResolveParser.INTERSECTION:
        case ResolveParser.MOD:
        case ResolveParser.NOT_IN:
        case ResolveParser.NOT_PROP_SUBSET:
        case ResolveParser.NOT_SUBSET:
        case ResolveParser.NOT_SUBSTR:
        case ResolveParser.OR:
        case ResolveParser.PROP_SUBSET:
        case ResolveParser.REM:
        case ResolveParser.SUBSET:
        case ResolveParser.SUBSTR:
        case ResolveParser.UNION:
        case ResolveParser.WITHOUT:
        case ResolveParser.CONCAT:
        case ResolveParser.DIVIDE:
        case ResolveParser.EQL:
        case ResolveParser.EXP:
        case ResolveParser.FUNCARROW:
        case ResolveParser.GT:
        case ResolveParser.GT_EQL:
        case ResolveParser.LT:
        case ResolveParser.LT_EQL:
        case ResolveParser.MINUS:
        case ResolveParser.MULTIPLY:
        case ResolveParser.NOT_EQL:
        case ResolveParser.PLUS:
        case ResolveParser.RANGE:
            this.state = 1407;
            this.infixOp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1410;
        this.match(ResolveParser.LPAREN);
        this.state = 1411;
        this.mathVariableDecl();
        this.state = 1412;
        this.match(ResolveParser.RPAREN);
        this.state = 1413;
        this.match(ResolveParser.COLON);
        this.state = 1414;
        this.mathTypeExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandardOutfixSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_standardOutfixSignature;
    this.lOp = null; // Token
    this.rOp = null; // Token
    return this;
}

StandardOutfixSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardOutfixSignatureContext.prototype.constructor = StandardOutfixSignatureContext;

StandardOutfixSignatureContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

StandardOutfixSignatureContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

StandardOutfixSignatureContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

StandardOutfixSignatureContext.prototype.mathVariableDecl = function() {
    return this.getTypedRuleContext(MathVariableDeclContext,0);
};

StandardOutfixSignatureContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

StandardOutfixSignatureContext.prototype.BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.BAR);
    } else {
        return this.getToken(ResolveParser.BAR, i);
    }
};


StandardOutfixSignatureContext.prototype.DBL_BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.DBL_BAR);
    } else {
        return this.getToken(ResolveParser.DBL_BAR, i);
    }
};


StandardOutfixSignatureContext.prototype.LT = function() {
    return this.getToken(ResolveParser.LT, 0);
};

StandardOutfixSignatureContext.prototype.GT = function() {
    return this.getToken(ResolveParser.GT, 0);
};

StandardOutfixSignatureContext.prototype.LL = function() {
    return this.getToken(ResolveParser.LL, 0);
};

StandardOutfixSignatureContext.prototype.GG = function() {
    return this.getToken(ResolveParser.GG, 0);
};

StandardOutfixSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterStandardOutfixSignature(this);
	}
};

StandardOutfixSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitStandardOutfixSignature(this);
	}
};




ResolveParser.StandardOutfixSignatureContext = StandardOutfixSignatureContext;

ResolveParser.prototype.standardOutfixSignature = function() {

    var localctx = new StandardOutfixSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ResolveParser.RULE_standardOutfixSignature);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1440;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.BAR:
            this.state = 1416;
            localctx.lOp = this.match(ResolveParser.BAR);
            this.state = 1417;
            this.match(ResolveParser.LPAREN);
            this.state = 1418;
            this.mathVariableDecl();
            this.state = 1419;
            this.match(ResolveParser.RPAREN);
            this.state = 1420;
            localctx.rOp = this.match(ResolveParser.BAR);
            break;
        case ResolveParser.DBL_BAR:
            this.state = 1422;
            localctx.lOp = this.match(ResolveParser.DBL_BAR);
            this.state = 1423;
            this.match(ResolveParser.LPAREN);
            this.state = 1424;
            this.mathVariableDecl();
            this.state = 1425;
            this.match(ResolveParser.RPAREN);
            this.state = 1426;
            localctx.rOp = this.match(ResolveParser.DBL_BAR);
            break;
        case ResolveParser.LT:
            this.state = 1428;
            localctx.lOp = this.match(ResolveParser.LT);
            this.state = 1429;
            this.match(ResolveParser.LPAREN);
            this.state = 1430;
            this.mathVariableDecl();
            this.state = 1431;
            this.match(ResolveParser.RPAREN);
            this.state = 1432;
            localctx.rOp = this.match(ResolveParser.GT);
            break;
        case ResolveParser.LL:
            this.state = 1434;
            localctx.lOp = this.match(ResolveParser.LL);
            this.state = 1435;
            this.match(ResolveParser.LPAREN);
            this.state = 1436;
            this.mathVariableDecl();
            this.state = 1437;
            this.match(ResolveParser.RPAREN);
            this.state = 1438;
            localctx.rOp = this.match(ResolveParser.GG);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1442;
        this.match(ResolveParser.COLON);
        this.state = 1443;
        this.mathTypeExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandardPrefixSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_standardPrefixSignature;
    return this;
}

StandardPrefixSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardPrefixSignatureContext.prototype.constructor = StandardPrefixSignatureContext;

StandardPrefixSignatureContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

StandardPrefixSignatureContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

StandardPrefixSignatureContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

StandardPrefixSignatureContext.prototype.prefixOp = function() {
    return this.getTypedRuleContext(PrefixOpContext,0);
};

StandardPrefixSignatureContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ResolveParser.INTEGER_LITERAL, 0);
};

StandardPrefixSignatureContext.prototype.REAL_LITERAL = function() {
    return this.getToken(ResolveParser.REAL_LITERAL, 0);
};

StandardPrefixSignatureContext.prototype.definitionParameterList = function() {
    return this.getTypedRuleContext(DefinitionParameterListContext,0);
};

StandardPrefixSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterStandardPrefixSignature(this);
	}
};

StandardPrefixSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitStandardPrefixSignature(this);
	}
};




ResolveParser.StandardPrefixSignatureContext = StandardPrefixSignatureContext;

ResolveParser.prototype.standardPrefixSignature = function() {

    var localctx = new StandardPrefixSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ResolveParser.RULE_standardPrefixSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1449;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IDENTIFIER:
            this.state = 1445;
            this.match(ResolveParser.IDENTIFIER);
            break;
        case ResolveParser.ABS:
        case ResolveParser.COMPLEMENT:
        case ResolveParser.NOT:
        case ResolveParser.MINUS:
        case ResolveParser.PLUS:
            this.state = 1446;
            this.prefixOp();
            break;
        case ResolveParser.INTEGER_LITERAL:
            this.state = 1447;
            this.match(ResolveParser.INTEGER_LITERAL);
            break;
        case ResolveParser.REAL_LITERAL:
            this.state = 1448;
            this.match(ResolveParser.REAL_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1452;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.LPAREN) {
            this.state = 1451;
            this.definitionParameterList();
        }

        this.state = 1454;
        this.match(ResolveParser.COLON);
        this.state = 1455;
        this.mathTypeExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_prefixOp;
    this.op = null; // Token
    return this;
}

PrefixOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixOpContext.prototype.constructor = PrefixOpContext;

PrefixOpContext.prototype.PLUS = function() {
    return this.getToken(ResolveParser.PLUS, 0);
};

PrefixOpContext.prototype.MINUS = function() {
    return this.getToken(ResolveParser.MINUS, 0);
};

PrefixOpContext.prototype.NOT = function() {
    return this.getToken(ResolveParser.NOT, 0);
};

PrefixOpContext.prototype.ABS = function() {
    return this.getToken(ResolveParser.ABS, 0);
};

PrefixOpContext.prototype.COMPLEMENT = function() {
    return this.getToken(ResolveParser.COMPLEMENT, 0);
};

PrefixOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterPrefixOp(this);
	}
};

PrefixOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitPrefixOp(this);
	}
};




ResolveParser.PrefixOpContext = PrefixOpContext;

ResolveParser.prototype.prefixOp = function() {

    var localctx = new PrefixOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ResolveParser.RULE_prefixOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1457;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.ABS || _la===ResolveParser.COMPLEMENT || _la===ResolveParser.NOT || _la===ResolveParser.MINUS || _la===ResolveParser.PLUS)) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_infixOp;
    this.op = null; // Token
    return this;
}

InfixOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixOpContext.prototype.constructor = InfixOpContext;

InfixOpContext.prototype.IMPLIES = function() {
    return this.getToken(ResolveParser.IMPLIES, 0);
};

InfixOpContext.prototype.PLUS = function() {
    return this.getToken(ResolveParser.PLUS, 0);
};

InfixOpContext.prototype.CONCAT = function() {
    return this.getToken(ResolveParser.CONCAT, 0);
};

InfixOpContext.prototype.MINUS = function() {
    return this.getToken(ResolveParser.MINUS, 0);
};

InfixOpContext.prototype.DIVIDE = function() {
    return this.getToken(ResolveParser.DIVIDE, 0);
};

InfixOpContext.prototype.MULTIPLY = function() {
    return this.getToken(ResolveParser.MULTIPLY, 0);
};

InfixOpContext.prototype.EXP = function() {
    return this.getToken(ResolveParser.EXP, 0);
};

InfixOpContext.prototype.MOD = function() {
    return this.getToken(ResolveParser.MOD, 0);
};

InfixOpContext.prototype.REM = function() {
    return this.getToken(ResolveParser.REM, 0);
};

InfixOpContext.prototype.DIV = function() {
    return this.getToken(ResolveParser.DIV, 0);
};

InfixOpContext.prototype.IFF = function() {
    return this.getToken(ResolveParser.IFF, 0);
};

InfixOpContext.prototype.FUNCARROW = function() {
    return this.getToken(ResolveParser.FUNCARROW, 0);
};

InfixOpContext.prototype.RANGE = function() {
    return this.getToken(ResolveParser.RANGE, 0);
};

InfixOpContext.prototype.AND = function() {
    return this.getToken(ResolveParser.AND, 0);
};

InfixOpContext.prototype.OR = function() {
    return this.getToken(ResolveParser.OR, 0);
};

InfixOpContext.prototype.UNION = function() {
    return this.getToken(ResolveParser.UNION, 0);
};

InfixOpContext.prototype.INTERSECTION = function() {
    return this.getToken(ResolveParser.INTERSECTION, 0);
};

InfixOpContext.prototype.IN = function() {
    return this.getToken(ResolveParser.IN, 0);
};

InfixOpContext.prototype.NOT_IN = function() {
    return this.getToken(ResolveParser.NOT_IN, 0);
};

InfixOpContext.prototype.SUBSET = function() {
    return this.getToken(ResolveParser.SUBSET, 0);
};

InfixOpContext.prototype.NOT_SUBSET = function() {
    return this.getToken(ResolveParser.NOT_SUBSET, 0);
};

InfixOpContext.prototype.PROP_SUBSET = function() {
    return this.getToken(ResolveParser.PROP_SUBSET, 0);
};

InfixOpContext.prototype.NOT_PROP_SUBSET = function() {
    return this.getToken(ResolveParser.NOT_PROP_SUBSET, 0);
};

InfixOpContext.prototype.SUBSTR = function() {
    return this.getToken(ResolveParser.SUBSTR, 0);
};

InfixOpContext.prototype.NOT_SUBSTR = function() {
    return this.getToken(ResolveParser.NOT_SUBSTR, 0);
};

InfixOpContext.prototype.WITHOUT = function() {
    return this.getToken(ResolveParser.WITHOUT, 0);
};

InfixOpContext.prototype.GT = function() {
    return this.getToken(ResolveParser.GT, 0);
};

InfixOpContext.prototype.LT = function() {
    return this.getToken(ResolveParser.LT, 0);
};

InfixOpContext.prototype.GT_EQL = function() {
    return this.getToken(ResolveParser.GT_EQL, 0);
};

InfixOpContext.prototype.LT_EQL = function() {
    return this.getToken(ResolveParser.LT_EQL, 0);
};

InfixOpContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

InfixOpContext.prototype.NOT_EQL = function() {
    return this.getToken(ResolveParser.NOT_EQL, 0);
};

InfixOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterInfixOp(this);
	}
};

InfixOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitInfixOp(this);
	}
};




ResolveParser.InfixOpContext = InfixOpContext;

ResolveParser.prototype.infixOp = function() {

    var localctx = new InfixOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ResolveParser.RULE_infixOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.AND || _la===ResolveParser.DIV || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (ResolveParser.IFF - 55)) | (1 << (ResolveParser.IMPLIES - 55)) | (1 << (ResolveParser.IN - 55)) | (1 << (ResolveParser.INTERSECTION - 55)) | (1 << (ResolveParser.MOD - 55)) | (1 << (ResolveParser.NOT_IN - 55)) | (1 << (ResolveParser.NOT_PROP_SUBSET - 55)) | (1 << (ResolveParser.NOT_SUBSET - 55)) | (1 << (ResolveParser.NOT_SUBSTR - 55)) | (1 << (ResolveParser.OR - 55)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ResolveParser.PROP_SUBSET - 97)) | (1 << (ResolveParser.REM - 97)) | (1 << (ResolveParser.SUBSET - 97)) | (1 << (ResolveParser.SUBSTR - 97)) | (1 << (ResolveParser.UNION - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ResolveParser.WITHOUT - 129)) | (1 << (ResolveParser.CONCAT - 129)) | (1 << (ResolveParser.DIVIDE - 129)) | (1 << (ResolveParser.EQL - 129)) | (1 << (ResolveParser.EXP - 129)) | (1 << (ResolveParser.FUNCARROW - 129)) | (1 << (ResolveParser.GT - 129)) | (1 << (ResolveParser.GT_EQL - 129)) | (1 << (ResolveParser.LT - 129)) | (1 << (ResolveParser.LT_EQL - 129)) | (1 << (ResolveParser.MINUS - 129)) | (1 << (ResolveParser.MULTIPLY - 129)) | (1 << (ResolveParser.NOT_EQL - 129)) | (1 << (ResolveParser.PLUS - 129)) | (1 << (ResolveParser.RANGE - 129)))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinitionParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_definitionParameterList;
    return this;
}

DefinitionParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionParameterListContext.prototype.constructor = DefinitionParameterListContext;

DefinitionParameterListContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

DefinitionParameterListContext.prototype.mathVariableDeclGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVariableDeclGroupContext);
    } else {
        return this.getTypedRuleContext(MathVariableDeclGroupContext,i);
    }
};

DefinitionParameterListContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

DefinitionParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


DefinitionParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDefinitionParameterList(this);
	}
};

DefinitionParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDefinitionParameterList(this);
	}
};




ResolveParser.DefinitionParameterListContext = DefinitionParameterListContext;

ResolveParser.prototype.definitionParameterList = function() {

    var localctx = new DefinitionParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ResolveParser.RULE_definitionParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1461;
        this.match(ResolveParser.LPAREN);
        this.state = 1462;
        this.mathVariableDeclGroup();
        this.state = 1467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1463;
            this.match(ResolveParser.COMMA);
            this.state = 1464;
            this.mathVariableDeclGroup();
            this.state = 1469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1470;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AffectsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_affectsClause;
    return this;
}

AffectsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AffectsClauseContext.prototype.constructor = AffectsClauseContext;

AffectsClauseContext.prototype.AFFECTS = function() {
    return this.getToken(ResolveParser.AFFECTS, 0);
};

AffectsClauseContext.prototype.mathVarNameExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVarNameExpContext);
    } else {
        return this.getTypedRuleContext(MathVarNameExpContext,i);
    }
};

AffectsClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

AffectsClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


AffectsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterAffectsClause(this);
	}
};

AffectsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitAffectsClause(this);
	}
};




ResolveParser.AffectsClauseContext = AffectsClauseContext;

ResolveParser.prototype.affectsClause = function() {

    var localctx = new AffectsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ResolveParser.RULE_affectsClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1472;
        this.match(ResolveParser.AFFECTS);
        this.state = 1473;
        this.mathVarNameExp();
        this.state = 1478;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1474;
            this.match(ResolveParser.COMMA);
            this.state = 1475;
            this.mathVarNameExp();
            this.state = 1480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1481;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequiresClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_requiresClause;
    return this;
}

RequiresClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiresClauseContext.prototype.constructor = RequiresClauseContext;

RequiresClauseContext.prototype.REQUIRES = function() {
    return this.getToken(ResolveParser.REQUIRES, 0);
};

RequiresClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

RequiresClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

RequiresClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

RequiresClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterRequiresClause(this);
	}
};

RequiresClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitRequiresClause(this);
	}
};




ResolveParser.RequiresClauseContext = RequiresClauseContext;

ResolveParser.prototype.requiresClause = function() {

    var localctx = new RequiresClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ResolveParser.RULE_requiresClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.match(ResolveParser.REQUIRES);
        this.state = 1484;
        this.mathExp();
        this.state = 1487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1485;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1486;
            this.mathExp();
        }

        this.state = 1489;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnsuresClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_ensuresClause;
    return this;
}

EnsuresClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnsuresClauseContext.prototype.constructor = EnsuresClauseContext;

EnsuresClauseContext.prototype.ENSURES = function() {
    return this.getToken(ResolveParser.ENSURES, 0);
};

EnsuresClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

EnsuresClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

EnsuresClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

EnsuresClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterEnsuresClause(this);
	}
};

EnsuresClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitEnsuresClause(this);
	}
};




ResolveParser.EnsuresClauseContext = EnsuresClauseContext;

ResolveParser.prototype.ensuresClause = function() {

    var localctx = new EnsuresClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ResolveParser.RULE_ensuresClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1491;
        this.match(ResolveParser.ENSURES);
        this.state = 1492;
        this.mathExp();
        this.state = 1495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1493;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1494;
            this.mathExp();
        }

        this.state = 1497;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_constraintClause;
    return this;
}

ConstraintClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintClauseContext.prototype.constructor = ConstraintClauseContext;

ConstraintClauseContext.prototype.CONSTRAINT = function() {
    return this.getToken(ResolveParser.CONSTRAINT, 0);
};

ConstraintClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

ConstraintClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ConstraintClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

ConstraintClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConstraintClause(this);
	}
};

ConstraintClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConstraintClause(this);
	}
};




ResolveParser.ConstraintClauseContext = ConstraintClauseContext;

ResolveParser.prototype.constraintClause = function() {

    var localctx = new ConstraintClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ResolveParser.RULE_constraintClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this.match(ResolveParser.CONSTRAINT);
        this.state = 1500;
        this.mathExp();
        this.state = 1503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1501;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1502;
            this.mathExp();
        }

        this.state = 1505;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_changingClause;
    return this;
}

ChangingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangingClauseContext.prototype.constructor = ChangingClauseContext;

ChangingClauseContext.prototype.CHANGING = function() {
    return this.getToken(ResolveParser.CHANGING, 0);
};

ChangingClauseContext.prototype.progVarNameExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgVarNameExpContext);
    } else {
        return this.getTypedRuleContext(ProgVarNameExpContext,i);
    }
};

ChangingClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ChangingClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


ChangingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterChangingClause(this);
	}
};

ChangingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitChangingClause(this);
	}
};




ResolveParser.ChangingClauseContext = ChangingClauseContext;

ResolveParser.prototype.changingClause = function() {

    var localctx = new ChangingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ResolveParser.RULE_changingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1507;
        this.match(ResolveParser.CHANGING);
        this.state = 1508;
        this.progVarNameExp();
        this.state = 1513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1509;
            this.match(ResolveParser.COMMA);
            this.state = 1510;
            this.progVarNameExp();
            this.state = 1515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1516;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MaintainingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_maintainingClause;
    return this;
}

MaintainingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaintainingClauseContext.prototype.constructor = MaintainingClauseContext;

MaintainingClauseContext.prototype.MAINTAINING = function() {
    return this.getToken(ResolveParser.MAINTAINING, 0);
};

MaintainingClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

MaintainingClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MaintainingClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

MaintainingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMaintainingClause(this);
	}
};

MaintainingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMaintainingClause(this);
	}
};




ResolveParser.MaintainingClauseContext = MaintainingClauseContext;

ResolveParser.prototype.maintainingClause = function() {

    var localctx = new MaintainingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ResolveParser.RULE_maintainingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this.match(ResolveParser.MAINTAINING);
        this.state = 1519;
        this.mathExp();
        this.state = 1522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1520;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1521;
            this.mathExp();
        }

        this.state = 1524;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecreasingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_decreasingClause;
    return this;
}

DecreasingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecreasingClauseContext.prototype.constructor = DecreasingClauseContext;

DecreasingClauseContext.prototype.DECREASING = function() {
    return this.getToken(ResolveParser.DECREASING, 0);
};

DecreasingClauseContext.prototype.mathAddingExp = function() {
    return this.getTypedRuleContext(MathAddingExpContext,0);
};

DecreasingClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

DecreasingClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

DecreasingClauseContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

DecreasingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDecreasingClause(this);
	}
};

DecreasingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDecreasingClause(this);
	}
};




ResolveParser.DecreasingClauseContext = DecreasingClauseContext;

ResolveParser.prototype.decreasingClause = function() {

    var localctx = new DecreasingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ResolveParser.RULE_decreasingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1526;
        this.match(ResolveParser.DECREASING);
        this.state = 1527;
        this.mathAddingExp();
        this.state = 1530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1528;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1529;
            this.mathExp();
        }

        this.state = 1532;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CorrespondenceClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_correspondenceClause;
    this.type = null; // Token
    return this;
}

CorrespondenceClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CorrespondenceClauseContext.prototype.constructor = CorrespondenceClauseContext;

CorrespondenceClauseContext.prototype.CORR = function() {
    return this.getToken(ResolveParser.CORR, 0);
};

CorrespondenceClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

CorrespondenceClauseContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


CorrespondenceClauseContext.prototype.INVOLVES = function() {
    return this.getToken(ResolveParser.INVOLVES, 0);
};

CorrespondenceClauseContext.prototype.mathVarNameExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVarNameExpContext);
    } else {
        return this.getTypedRuleContext(MathVarNameExpContext,i);
    }
};

CorrespondenceClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

CorrespondenceClauseContext.prototype.INDEPENDENT = function() {
    return this.getToken(ResolveParser.INDEPENDENT, 0);
};

CorrespondenceClauseContext.prototype.DEPENDENT = function() {
    return this.getToken(ResolveParser.DEPENDENT, 0);
};

CorrespondenceClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


CorrespondenceClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterCorrespondenceClause(this);
	}
};

CorrespondenceClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitCorrespondenceClause(this);
	}
};




ResolveParser.CorrespondenceClauseContext = CorrespondenceClauseContext;

ResolveParser.prototype.correspondenceClause = function() {

    var localctx = new CorrespondenceClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ResolveParser.RULE_correspondenceClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.DEPENDENT || _la===ResolveParser.INDEPENDENT) {
            this.state = 1534;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.DEPENDENT || _la===ResolveParser.INDEPENDENT)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1537;
        this.match(ResolveParser.CORR);
        this.state = 1549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.INVOLVES) {
            this.state = 1538;
            this.match(ResolveParser.INVOLVES);
            this.state = 1539;
            this.mathVarNameExp();
            this.state = 1544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ResolveParser.COMMA) {
                this.state = 1540;
                this.match(ResolveParser.COMMA);
                this.state = 1541;
                this.mathVarNameExp();
                this.state = 1546;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1547;
            this.match(ResolveParser.SEMICOLON);
        }

        this.state = 1551;
        this.mathExp();
        this.state = 1554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1552;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1553;
            this.mathExp();
        }

        this.state = 1556;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConventionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_conventionClause;
    return this;
}

ConventionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConventionClauseContext.prototype.constructor = ConventionClauseContext;

ConventionClauseContext.prototype.CONVENTION = function() {
    return this.getToken(ResolveParser.CONVENTION, 0);
};

ConventionClauseContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

ConventionClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ConventionClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

ConventionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterConventionClause(this);
	}
};

ConventionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitConventionClause(this);
	}
};




ResolveParser.ConventionClauseContext = ConventionClauseContext;

ResolveParser.prototype.conventionClause = function() {

    var localctx = new ConventionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ResolveParser.RULE_conventionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1558;
        this.match(ResolveParser.CONVENTION);
        this.state = 1559;
        this.mathExp();
        this.state = 1562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1560;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1561;
            this.mathExp();
        }

        this.state = 1564;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DurationClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_durationClause;
    return this;
}

DurationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DurationClauseContext.prototype.constructor = DurationClauseContext;

DurationClauseContext.prototype.DURATION = function() {
    return this.getToken(ResolveParser.DURATION, 0);
};

DurationClauseContext.prototype.mathAddingExp = function() {
    return this.getTypedRuleContext(MathAddingExpContext,0);
};

DurationClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

DurationClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

DurationClauseContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

DurationClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterDurationClause(this);
	}
};

DurationClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitDurationClause(this);
	}
};




ResolveParser.DurationClauseContext = DurationClauseContext;

ResolveParser.prototype.durationClause = function() {

    var localctx = new DurationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ResolveParser.RULE_durationClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1566;
        this.match(ResolveParser.DURATION);
        this.state = 1567;
        this.mathAddingExp();
        this.state = 1570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1568;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1569;
            this.mathExp();
        }

        this.state = 1572;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ManipulationDispClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_manipulationDispClause;
    return this;
}

ManipulationDispClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ManipulationDispClauseContext.prototype.constructor = ManipulationDispClauseContext;

ManipulationDispClauseContext.prototype.MAINP_DISP = function() {
    return this.getToken(ResolveParser.MAINP_DISP, 0);
};

ManipulationDispClauseContext.prototype.mathAddingExp = function() {
    return this.getTypedRuleContext(MathAddingExpContext,0);
};

ManipulationDispClauseContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

ManipulationDispClauseContext.prototype.WHICH_ENTAILS = function() {
    return this.getToken(ResolveParser.WHICH_ENTAILS, 0);
};

ManipulationDispClauseContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

ManipulationDispClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterManipulationDispClause(this);
	}
};

ManipulationDispClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitManipulationDispClause(this);
	}
};




ResolveParser.ManipulationDispClauseContext = ManipulationDispClauseContext;

ResolveParser.prototype.manipulationDispClause = function() {

    var localctx = new ManipulationDispClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ResolveParser.RULE_manipulationDispClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1574;
        this.match(ResolveParser.MAINP_DISP);
        this.state = 1575;
        this.mathAddingExp();
        this.state = 1578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHICH_ENTAILS) {
            this.state = 1576;
            this.match(ResolveParser.WHICH_ENTAILS);
            this.state = 1577;
            this.mathExp();
        }

        this.state = 1580;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTypeExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTypeExp;
    return this;
}

MathTypeExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTypeExpContext.prototype.constructor = MathTypeExpContext;

MathTypeExpContext.prototype.mathInfixExp = function() {
    return this.getTypedRuleContext(MathInfixExpContext,0);
};

MathTypeExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeExp(this);
	}
};

MathTypeExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeExp(this);
	}
};




ResolveParser.MathTypeExpContext = MathTypeExpContext;

ResolveParser.prototype.mathTypeExp = function() {

    var localctx = new MathTypeExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ResolveParser.RULE_mathTypeExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1582;
        this.mathInfixExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathExp;
    return this;
}

MathExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathExpContext.prototype.constructor = MathExpContext;

MathExpContext.prototype.mathIteratedExp = function() {
    return this.getTypedRuleContext(MathIteratedExpContext,0);
};

MathExpContext.prototype.mathQuantifiedExp = function() {
    return this.getTypedRuleContext(MathQuantifiedExpContext,0);
};

MathExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathExp(this);
	}
};

MathExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathExp(this);
	}
};




ResolveParser.MathExpContext = MathExpContext;

ResolveParser.prototype.mathExp = function() {

    var localctx = new MathExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ResolveParser.RULE_mathExp);
    try {
        this.state = 1586;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1584;
            this.mathIteratedExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1585;
            this.mathQuantifiedExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathIteratedExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathIteratedExp;
    this.op = null; // Token
    return this;
}

MathIteratedExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathIteratedExpContext.prototype.constructor = MathIteratedExpContext;

MathIteratedExpContext.prototype.mathVariableDecl = function() {
    return this.getTypedRuleContext(MathVariableDeclContext,0);
};

MathIteratedExpContext.prototype.LBRACE = function() {
    return this.getToken(ResolveParser.LBRACE, 0);
};

MathIteratedExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathIteratedExpContext.prototype.RBRACE = function() {
    return this.getToken(ResolveParser.RBRACE, 0);
};

MathIteratedExpContext.prototype.COMMA = function() {
    return this.getToken(ResolveParser.COMMA, 0);
};

MathIteratedExpContext.prototype.OF = function() {
    return this.getToken(ResolveParser.OF, 0);
};

MathIteratedExpContext.prototype.BIG_CONCAT = function() {
    return this.getToken(ResolveParser.BIG_CONCAT, 0);
};

MathIteratedExpContext.prototype.BIG_INTERSECT = function() {
    return this.getToken(ResolveParser.BIG_INTERSECT, 0);
};

MathIteratedExpContext.prototype.BIG_PRODUCT = function() {
    return this.getToken(ResolveParser.BIG_PRODUCT, 0);
};

MathIteratedExpContext.prototype.BIG_SUM = function() {
    return this.getToken(ResolveParser.BIG_SUM, 0);
};

MathIteratedExpContext.prototype.BIG_UNION = function() {
    return this.getToken(ResolveParser.BIG_UNION, 0);
};

MathIteratedExpContext.prototype.mathWhereExp = function() {
    return this.getTypedRuleContext(MathWhereExpContext,0);
};

MathIteratedExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathIteratedExp(this);
	}
};

MathIteratedExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathIteratedExp(this);
	}
};




ResolveParser.MathIteratedExpContext = MathIteratedExpContext;

ResolveParser.prototype.mathIteratedExp = function() {

    var localctx = new MathIteratedExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ResolveParser.RULE_mathIteratedExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1588;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.BIG_CONCAT) | (1 << ResolveParser.BIG_INTERSECT) | (1 << ResolveParser.BIG_PRODUCT) | (1 << ResolveParser.BIG_SUM) | (1 << ResolveParser.BIG_UNION))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1589;
        this.mathVariableDecl();
        this.state = 1591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.WHERE) {
            this.state = 1590;
            this.mathWhereExp();
        }

        this.state = 1593;
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.OF || _la===ResolveParser.COMMA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1594;
        this.match(ResolveParser.LBRACE);
        this.state = 1595;
        this.mathExp();
        this.state = 1596;
        this.match(ResolveParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathQuantifiedExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathQuantifiedExp;
    return this;
}

MathQuantifiedExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathQuantifiedExpContext.prototype.constructor = MathQuantifiedExpContext;

MathQuantifiedExpContext.prototype.mathImpliesExp = function() {
    return this.getTypedRuleContext(MathImpliesExpContext,0);
};

MathQuantifiedExpContext.prototype.FORALL = function() {
    return this.getToken(ResolveParser.FORALL, 0);
};

MathQuantifiedExpContext.prototype.mathVariableDeclGroup = function() {
    return this.getTypedRuleContext(MathVariableDeclGroupContext,0);
};

MathQuantifiedExpContext.prototype.mathQuantifiedExp = function() {
    return this.getTypedRuleContext(MathQuantifiedExpContext,0);
};

MathQuantifiedExpContext.prototype.SUCHTHAT = function() {
    return this.getToken(ResolveParser.SUCHTHAT, 0);
};

MathQuantifiedExpContext.prototype.COMMA = function() {
    return this.getToken(ResolveParser.COMMA, 0);
};

MathQuantifiedExpContext.prototype.mathWhereExp = function() {
    return this.getTypedRuleContext(MathWhereExpContext,0);
};

MathQuantifiedExpContext.prototype.EXISTS_UNIQUE = function() {
    return this.getToken(ResolveParser.EXISTS_UNIQUE, 0);
};

MathQuantifiedExpContext.prototype.EXISTS = function() {
    return this.getToken(ResolveParser.EXISTS, 0);
};

MathQuantifiedExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathQuantifiedExp(this);
	}
};

MathQuantifiedExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathQuantifiedExp(this);
	}
};




ResolveParser.MathQuantifiedExpContext = MathQuantifiedExpContext;

ResolveParser.prototype.mathQuantifiedExp = function() {

    var localctx = new MathQuantifiedExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ResolveParser.RULE_mathQuantifiedExp);
    var _la = 0; // Token type
    try {
        this.state = 1623;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.ABS:
        case ResolveParser.BIG_CONCAT:
        case ResolveParser.BIG_INTERSECT:
        case ResolveParser.BIG_PRODUCT:
        case ResolveParser.BIG_SUM:
        case ResolveParser.BIG_UNION:
        case ResolveParser.CARTPROD:
        case ResolveParser.COMPLEMENT:
        case ResolveParser.IF:
        case ResolveParser.LAMBDA:
        case ResolveParser.NOT:
        case ResolveParser.OP:
        case ResolveParser.RECP:
        case ResolveParser.BAR:
        case ResolveParser.DBL_BAR:
        case ResolveParser.DBL_LBRACE:
        case ResolveParser.HASH:
        case ResolveParser.LBRACE:
        case ResolveParser.LL:
        case ResolveParser.LPAREN:
        case ResolveParser.LT:
        case ResolveParser.MINUS:
        case ResolveParser.PLUS:
        case ResolveParser.BOOLEAN_LITERAL:
        case ResolveParser.INTEGER_LITERAL:
        case ResolveParser.REAL_LITERAL:
        case ResolveParser.CHARACTER_LITERAL:
        case ResolveParser.STRING_LITERAL:
        case ResolveParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1598;
            this.mathImpliesExp();
            break;
        case ResolveParser.FORALL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1599;
            this.match(ResolveParser.FORALL);
            this.state = 1600;
            this.mathVariableDeclGroup();
            this.state = 1602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.WHERE) {
                this.state = 1601;
                this.mathWhereExp();
            }

            this.state = 1604;
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.SUCHTHAT || _la===ResolveParser.COMMA)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1605;
            this.mathQuantifiedExp();
            break;
        case ResolveParser.EXISTS_UNIQUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1607;
            this.match(ResolveParser.EXISTS_UNIQUE);
            this.state = 1608;
            this.mathVariableDeclGroup();
            this.state = 1610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.WHERE) {
                this.state = 1609;
                this.mathWhereExp();
            }

            this.state = 1612;
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.SUCHTHAT || _la===ResolveParser.COMMA)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1613;
            this.mathQuantifiedExp();
            break;
        case ResolveParser.EXISTS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1615;
            this.match(ResolveParser.EXISTS);
            this.state = 1616;
            this.mathVariableDeclGroup();
            this.state = 1618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.WHERE) {
                this.state = 1617;
                this.mathWhereExp();
            }

            this.state = 1620;
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.SUCHTHAT || _la===ResolveParser.COMMA)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1621;
            this.mathQuantifiedExp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathImpliesExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathImpliesExp;
    this.op = null; // Token
    return this;
}

MathImpliesExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathImpliesExpContext.prototype.constructor = MathImpliesExpContext;

MathImpliesExpContext.prototype.mathLogicalExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathLogicalExpContext);
    } else {
        return this.getTypedRuleContext(MathLogicalExpContext,i);
    }
};

MathImpliesExpContext.prototype.IMPLIES = function() {
    return this.getToken(ResolveParser.IMPLIES, 0);
};

MathImpliesExpContext.prototype.IFF = function() {
    return this.getToken(ResolveParser.IFF, 0);
};

MathImpliesExpContext.prototype.IF = function() {
    return this.getToken(ResolveParser.IF, 0);
};

MathImpliesExpContext.prototype.THEN = function() {
    return this.getToken(ResolveParser.THEN, 0);
};

MathImpliesExpContext.prototype.ELSE = function() {
    return this.getToken(ResolveParser.ELSE, 0);
};

MathImpliesExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathImpliesExp(this);
	}
};

MathImpliesExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathImpliesExp(this);
	}
};




ResolveParser.MathImpliesExpContext = MathImpliesExpContext;

ResolveParser.prototype.mathImpliesExp = function() {

    var localctx = new MathImpliesExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ResolveParser.RULE_mathImpliesExp);
    var _la = 0; // Token type
    try {
        this.state = 1637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.ABS:
        case ResolveParser.BIG_CONCAT:
        case ResolveParser.BIG_INTERSECT:
        case ResolveParser.BIG_PRODUCT:
        case ResolveParser.BIG_SUM:
        case ResolveParser.BIG_UNION:
        case ResolveParser.CARTPROD:
        case ResolveParser.COMPLEMENT:
        case ResolveParser.LAMBDA:
        case ResolveParser.NOT:
        case ResolveParser.OP:
        case ResolveParser.RECP:
        case ResolveParser.BAR:
        case ResolveParser.DBL_BAR:
        case ResolveParser.DBL_LBRACE:
        case ResolveParser.HASH:
        case ResolveParser.LBRACE:
        case ResolveParser.LL:
        case ResolveParser.LPAREN:
        case ResolveParser.LT:
        case ResolveParser.MINUS:
        case ResolveParser.PLUS:
        case ResolveParser.BOOLEAN_LITERAL:
        case ResolveParser.INTEGER_LITERAL:
        case ResolveParser.REAL_LITERAL:
        case ResolveParser.CHARACTER_LITERAL:
        case ResolveParser.STRING_LITERAL:
        case ResolveParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1625;
            this.mathLogicalExp();
            this.state = 1628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.IFF || _la===ResolveParser.IMPLIES) {
                this.state = 1626;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===ResolveParser.IFF || _la===ResolveParser.IMPLIES)) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1627;
                this.mathLogicalExp();
            }

            break;
        case ResolveParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1630;
            this.match(ResolveParser.IF);
            this.state = 1631;
            this.mathLogicalExp();
            this.state = 1632;
            this.match(ResolveParser.THEN);
            this.state = 1633;
            this.mathLogicalExp();
            this.state = 1634;
            this.match(ResolveParser.ELSE);
            this.state = 1635;
            this.mathLogicalExp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathLogicalExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathLogicalExp;
    this.op = null; // Token
    return this;
}

MathLogicalExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathLogicalExpContext.prototype.constructor = MathLogicalExpContext;

MathLogicalExpContext.prototype.mathRelationalExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathRelationalExpContext);
    } else {
        return this.getTypedRuleContext(MathRelationalExpContext,i);
    }
};

MathLogicalExpContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.AND);
    } else {
        return this.getToken(ResolveParser.AND, i);
    }
};


MathLogicalExpContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.OR);
    } else {
        return this.getToken(ResolveParser.OR, i);
    }
};


MathLogicalExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathLogicalExp(this);
	}
};

MathLogicalExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathLogicalExp(this);
	}
};




ResolveParser.MathLogicalExpContext = MathLogicalExpContext;

ResolveParser.prototype.mathLogicalExp = function() {

    var localctx = new MathLogicalExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ResolveParser.RULE_mathLogicalExp);
    var _la = 0; // Token type
    try {
        this.state = 1654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1639;
            this.mathRelationalExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1640;
            this.mathRelationalExp();
            this.state = 1643; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1641;
                localctx.op = this.match(ResolveParser.AND);
                this.state = 1642;
                this.mathRelationalExp();
                this.state = 1645; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ResolveParser.AND);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1647;
            this.mathRelationalExp();
            this.state = 1650; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1648;
                localctx.op = this.match(ResolveParser.OR);
                this.state = 1649;
                this.mathRelationalExp();
                this.state = 1652; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ResolveParser.OR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathRelationalExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathRelationalExp;
    this.op1 = null; // Token
    this.op2 = null; // Token
    this.op = null; // Token
    return this;
}

MathRelationalExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathRelationalExpContext.prototype.constructor = MathRelationalExpContext;

MathRelationalExpContext.prototype.mathInfixExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathInfixExpContext);
    } else {
        return this.getTypedRuleContext(MathInfixExpContext,i);
    }
};

MathRelationalExpContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.LT);
    } else {
        return this.getToken(ResolveParser.LT, i);
    }
};


MathRelationalExpContext.prototype.LT_EQL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.LT_EQL);
    } else {
        return this.getToken(ResolveParser.LT_EQL, i);
    }
};


MathRelationalExpContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

MathRelationalExpContext.prototype.NOT_EQL = function() {
    return this.getToken(ResolveParser.NOT_EQL, 0);
};

MathRelationalExpContext.prototype.GT = function() {
    return this.getToken(ResolveParser.GT, 0);
};

MathRelationalExpContext.prototype.GT_EQL = function() {
    return this.getToken(ResolveParser.GT_EQL, 0);
};

MathRelationalExpContext.prototype.IN = function() {
    return this.getToken(ResolveParser.IN, 0);
};

MathRelationalExpContext.prototype.NOT_IN = function() {
    return this.getToken(ResolveParser.NOT_IN, 0);
};

MathRelationalExpContext.prototype.SUBSET = function() {
    return this.getToken(ResolveParser.SUBSET, 0);
};

MathRelationalExpContext.prototype.NOT_SUBSET = function() {
    return this.getToken(ResolveParser.NOT_SUBSET, 0);
};

MathRelationalExpContext.prototype.PROP_SUBSET = function() {
    return this.getToken(ResolveParser.PROP_SUBSET, 0);
};

MathRelationalExpContext.prototype.NOT_PROP_SUBSET = function() {
    return this.getToken(ResolveParser.NOT_PROP_SUBSET, 0);
};

MathRelationalExpContext.prototype.SUBSTR = function() {
    return this.getToken(ResolveParser.SUBSTR, 0);
};

MathRelationalExpContext.prototype.NOT_SUBSTR = function() {
    return this.getToken(ResolveParser.NOT_SUBSTR, 0);
};

MathRelationalExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathRelationalExp(this);
	}
};

MathRelationalExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathRelationalExp(this);
	}
};




ResolveParser.MathRelationalExpContext = MathRelationalExpContext;

ResolveParser.prototype.mathRelationalExp = function() {

    var localctx = new MathRelationalExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ResolveParser.RULE_mathRelationalExp);
    var _la = 0; // Token type
    try {
        this.state = 1667;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1656;
            this.mathInfixExp();

            this.state = 1657;
            localctx.op1 = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.LT || _la===ResolveParser.LT_EQL)) {
                localctx.op1 = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1658;
            this.mathInfixExp();

            this.state = 1659;
            localctx.op2 = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.LT || _la===ResolveParser.LT_EQL)) {
                localctx.op2 = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1660;
            this.mathInfixExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1662;
            this.mathInfixExp();
            this.state = 1665;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (ResolveParser.IN - 58)) | (1 << (ResolveParser.NOT_IN - 58)) | (1 << (ResolveParser.NOT_PROP_SUBSET - 58)) | (1 << (ResolveParser.NOT_SUBSET - 58)) | (1 << (ResolveParser.NOT_SUBSTR - 58)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ResolveParser.PROP_SUBSET - 97)) | (1 << (ResolveParser.SUBSET - 97)) | (1 << (ResolveParser.SUBSTR - 97)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ResolveParser.EQL - 142)) | (1 << (ResolveParser.GT - 142)) | (1 << (ResolveParser.GT_EQL - 142)) | (1 << (ResolveParser.LT - 142)) | (1 << (ResolveParser.LT_EQL - 142)) | (1 << (ResolveParser.NOT_EQL - 142)))) !== 0)) {
                this.state = 1663;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (ResolveParser.IN - 58)) | (1 << (ResolveParser.NOT_IN - 58)) | (1 << (ResolveParser.NOT_PROP_SUBSET - 58)) | (1 << (ResolveParser.NOT_SUBSET - 58)) | (1 << (ResolveParser.NOT_SUBSTR - 58)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ResolveParser.PROP_SUBSET - 97)) | (1 << (ResolveParser.SUBSET - 97)) | (1 << (ResolveParser.SUBSTR - 97)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ResolveParser.EQL - 142)) | (1 << (ResolveParser.GT - 142)) | (1 << (ResolveParser.GT_EQL - 142)) | (1 << (ResolveParser.LT - 142)) | (1 << (ResolveParser.LT_EQL - 142)) | (1 << (ResolveParser.NOT_EQL - 142)))) !== 0))) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1664;
                this.mathInfixExp();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathInfixExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathInfixExp;
    return this;
}

MathInfixExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathInfixExpContext.prototype.constructor = MathInfixExpContext;

MathInfixExpContext.prototype.mathTypeAssertionExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathTypeAssertionExpContext);
    } else {
        return this.getTypedRuleContext(MathTypeAssertionExpContext,i);
    }
};

MathInfixExpContext.prototype.RANGE = function() {
    return this.getToken(ResolveParser.RANGE, 0);
};

MathInfixExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathInfixExp(this);
	}
};

MathInfixExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathInfixExp(this);
	}
};




ResolveParser.MathInfixExpContext = MathInfixExpContext;

ResolveParser.prototype.mathInfixExp = function() {

    var localctx = new MathInfixExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ResolveParser.RULE_mathInfixExp);
    try {
        this.state = 1674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1669;
            this.mathTypeAssertionExp();
            this.state = 1670;
            this.match(ResolveParser.RANGE);
            this.state = 1671;
            this.mathTypeAssertionExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1673;
            this.mathTypeAssertionExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTypeAssertionExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTypeAssertionExp;
    return this;
}

MathTypeAssertionExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTypeAssertionExpContext.prototype.constructor = MathTypeAssertionExpContext;

MathTypeAssertionExpContext.prototype.mathFunctionTypeExp = function() {
    return this.getTypedRuleContext(MathFunctionTypeExpContext,0);
};

MathTypeAssertionExpContext.prototype.COLON = function() {
    return this.getToken(ResolveParser.COLON, 0);
};

MathTypeAssertionExpContext.prototype.mathTypeExp = function() {
    return this.getTypedRuleContext(MathTypeExpContext,0);
};

MathTypeAssertionExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeAssertionExp(this);
	}
};

MathTypeAssertionExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeAssertionExp(this);
	}
};




ResolveParser.MathTypeAssertionExpContext = MathTypeAssertionExpContext;

ResolveParser.prototype.mathTypeAssertionExp = function() {

    var localctx = new MathTypeAssertionExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ResolveParser.RULE_mathTypeAssertionExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1676;
        this.mathFunctionTypeExp();
        this.state = 1679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.COLON) {
            this.state = 1677;
            this.match(ResolveParser.COLON);
            this.state = 1678;
            this.mathTypeExp();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathFunctionTypeExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathFunctionTypeExp;
    return this;
}

MathFunctionTypeExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathFunctionTypeExpContext.prototype.constructor = MathFunctionTypeExpContext;

MathFunctionTypeExpContext.prototype.mathAddingExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathAddingExpContext);
    } else {
        return this.getTypedRuleContext(MathAddingExpContext,i);
    }
};

MathFunctionTypeExpContext.prototype.FUNCARROW = function() {
    return this.getToken(ResolveParser.FUNCARROW, 0);
};

MathFunctionTypeExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathFunctionTypeExp(this);
	}
};

MathFunctionTypeExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathFunctionTypeExp(this);
	}
};




ResolveParser.MathFunctionTypeExpContext = MathFunctionTypeExpContext;

ResolveParser.prototype.mathFunctionTypeExp = function() {

    var localctx = new MathFunctionTypeExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ResolveParser.RULE_mathFunctionTypeExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1681;
        this.mathAddingExp();
        this.state = 1684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.FUNCARROW) {
            this.state = 1682;
            this.match(ResolveParser.FUNCARROW);
            this.state = 1683;
            this.mathAddingExp();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathAddingExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathAddingExp;
    return this;
}

MathAddingExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathAddingExpContext.prototype.constructor = MathAddingExpContext;

MathAddingExpContext.prototype.mathMultiplyingExp = function() {
    return this.getTypedRuleContext(MathMultiplyingExpContext,0);
};

MathAddingExpContext.prototype.mathRepeatAddExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathRepeatAddExpContext);
    } else {
        return this.getTypedRuleContext(MathRepeatAddExpContext,i);
    }
};

MathAddingExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathAddingExp(this);
	}
};

MathAddingExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathAddingExp(this);
	}
};




ResolveParser.MathAddingExpContext = MathAddingExpContext;

ResolveParser.prototype.mathAddingExp = function() {

    var localctx = new MathAddingExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ResolveParser.RULE_mathAddingExp);
    var _la = 0; // Token type
    try {
        this.state = 1693;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1686;
            this.mathMultiplyingExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1687;
            this.mathMultiplyingExp();
            this.state = 1689; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1688;
                this.mathRepeatAddExp();
                this.state = 1691; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ResolveParser.INTERSECTION || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (ResolveParser.UNION - 122)) | (1 << (ResolveParser.WITHOUT - 122)) | (1 << (ResolveParser.CONCAT - 122)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ResolveParser.MINUS - 155)) | (1 << (ResolveParser.PLUS - 155)) | (1 << (ResolveParser.TILDE - 155)) | (1 << (ResolveParser.IDENTIFIER - 155)))) !== 0));
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathRepeatAddExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathRepeatAddExp;
    this.qualifier = null; // Token
    this.op = null; // Token
    return this;
}

MathRepeatAddExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathRepeatAddExpContext.prototype.constructor = MathRepeatAddExpContext;

MathRepeatAddExpContext.prototype.mathMultiplyingExp = function() {
    return this.getTypedRuleContext(MathMultiplyingExpContext,0);
};

MathRepeatAddExpContext.prototype.PLUS = function() {
    return this.getToken(ResolveParser.PLUS, 0);
};

MathRepeatAddExpContext.prototype.MINUS = function() {
    return this.getToken(ResolveParser.MINUS, 0);
};

MathRepeatAddExpContext.prototype.CONCAT = function() {
    return this.getToken(ResolveParser.CONCAT, 0);
};

MathRepeatAddExpContext.prototype.UNION = function() {
    return this.getToken(ResolveParser.UNION, 0);
};

MathRepeatAddExpContext.prototype.INTERSECTION = function() {
    return this.getToken(ResolveParser.INTERSECTION, 0);
};

MathRepeatAddExpContext.prototype.WITHOUT = function() {
    return this.getToken(ResolveParser.WITHOUT, 0);
};

MathRepeatAddExpContext.prototype.TILDE = function() {
    return this.getToken(ResolveParser.TILDE, 0);
};

MathRepeatAddExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathRepeatAddExpContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathRepeatAddExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathRepeatAddExp(this);
	}
};

MathRepeatAddExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathRepeatAddExp(this);
	}
};




ResolveParser.MathRepeatAddExpContext = MathRepeatAddExpContext;

ResolveParser.prototype.mathRepeatAddExp = function() {

    var localctx = new MathRepeatAddExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ResolveParser.RULE_mathRepeatAddExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.IDENTIFIER) {
            this.state = 1695;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 1696;
            this.match(ResolveParser.QUALIFIER);
        }

        this.state = 1699;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.INTERSECTION || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (ResolveParser.UNION - 122)) | (1 << (ResolveParser.WITHOUT - 122)) | (1 << (ResolveParser.CONCAT - 122)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ResolveParser.MINUS - 155)) | (1 << (ResolveParser.PLUS - 155)) | (1 << (ResolveParser.TILDE - 155)))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1700;
        this.mathMultiplyingExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathMultiplyingExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathMultiplyingExp;
    return this;
}

MathMultiplyingExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathMultiplyingExpContext.prototype.constructor = MathMultiplyingExpContext;

MathMultiplyingExpContext.prototype.mathExponentialExp = function() {
    return this.getTypedRuleContext(MathExponentialExpContext,0);
};

MathMultiplyingExpContext.prototype.mathRepeatMultExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathRepeatMultExpContext);
    } else {
        return this.getTypedRuleContext(MathRepeatMultExpContext,i);
    }
};

MathMultiplyingExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathMultiplyingExp(this);
	}
};

MathMultiplyingExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathMultiplyingExp(this);
	}
};




ResolveParser.MathMultiplyingExpContext = MathMultiplyingExpContext;

ResolveParser.prototype.mathMultiplyingExp = function() {

    var localctx = new MathMultiplyingExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ResolveParser.RULE_mathMultiplyingExp);
    try {
        this.state = 1709;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1702;
            this.mathExponentialExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1703;
            this.mathExponentialExp();
            this.state = 1705; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1704;
            		this.mathRepeatMultExp();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1707; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,200, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathRepeatMultExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathRepeatMultExp;
    this.qualifier = null; // Token
    this.op = null; // Token
    return this;
}

MathRepeatMultExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathRepeatMultExpContext.prototype.constructor = MathRepeatMultExpContext;

MathRepeatMultExpContext.prototype.mathExponentialExp = function() {
    return this.getTypedRuleContext(MathExponentialExpContext,0);
};

MathRepeatMultExpContext.prototype.MULTIPLY = function() {
    return this.getToken(ResolveParser.MULTIPLY, 0);
};

MathRepeatMultExpContext.prototype.DIVIDE = function() {
    return this.getToken(ResolveParser.DIVIDE, 0);
};

MathRepeatMultExpContext.prototype.MOD = function() {
    return this.getToken(ResolveParser.MOD, 0);
};

MathRepeatMultExpContext.prototype.REM = function() {
    return this.getToken(ResolveParser.REM, 0);
};

MathRepeatMultExpContext.prototype.DIV = function() {
    return this.getToken(ResolveParser.DIV, 0);
};

MathRepeatMultExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathRepeatMultExpContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathRepeatMultExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathRepeatMultExp(this);
	}
};

MathRepeatMultExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathRepeatMultExp(this);
	}
};




ResolveParser.MathRepeatMultExpContext = MathRepeatMultExpContext;

ResolveParser.prototype.mathRepeatMultExp = function() {

    var localctx = new MathRepeatMultExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ResolveParser.RULE_mathRepeatMultExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.IDENTIFIER) {
            this.state = 1711;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 1712;
            this.match(ResolveParser.QUALIFIER);
        }

        this.state = 1715;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===ResolveParser.DIV || _la===ResolveParser.MOD || _la===ResolveParser.REM || _la===ResolveParser.DIVIDE || _la===ResolveParser.MULTIPLY)) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1716;
        this.mathExponentialExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathExponentialExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathExponentialExp;
    return this;
}

MathExponentialExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathExponentialExpContext.prototype.constructor = MathExponentialExpContext;

MathExponentialExpContext.prototype.mathPrefixExp = function() {
    return this.getTypedRuleContext(MathPrefixExpContext,0);
};

MathExponentialExpContext.prototype.EXP = function() {
    return this.getToken(ResolveParser.EXP, 0);
};

MathExponentialExpContext.prototype.mathExponentialExp = function() {
    return this.getTypedRuleContext(MathExponentialExpContext,0);
};

MathExponentialExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathExponentialExp(this);
	}
};

MathExponentialExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathExponentialExp(this);
	}
};




ResolveParser.MathExponentialExpContext = MathExponentialExpContext;

ResolveParser.prototype.mathExponentialExp = function() {

    var localctx = new MathExponentialExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ResolveParser.RULE_mathExponentialExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1718;
        this.mathPrefixExp();
        this.state = 1721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.EXP) {
            this.state = 1719;
            this.match(ResolveParser.EXP);
            this.state = 1720;
            this.mathExponentialExp();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathPrefixExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathPrefixExp;
    this.qualifier = null; // Token
    return this;
}

MathPrefixExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathPrefixExpContext.prototype.constructor = MathPrefixExpContext;

MathPrefixExpContext.prototype.prefixOp = function() {
    return this.getTypedRuleContext(PrefixOpContext,0);
};

MathPrefixExpContext.prototype.mathPrimaryExp = function() {
    return this.getTypedRuleContext(MathPrimaryExpContext,0);
};

MathPrefixExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathPrefixExpContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};

MathPrefixExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathPrefixExp(this);
	}
};

MathPrefixExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathPrefixExp(this);
	}
};




ResolveParser.MathPrefixExpContext = MathPrefixExpContext;

ResolveParser.prototype.mathPrefixExp = function() {

    var localctx = new MathPrefixExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ResolveParser.RULE_mathPrefixExp);
    var _la = 0; // Token type
    try {
        this.state = 1731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.IDENTIFIER) {
                this.state = 1723;
                localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
                this.state = 1724;
                this.match(ResolveParser.QUALIFIER);
            }

            this.state = 1727;
            this.prefixOp();
            this.state = 1728;
            this.mathPrimaryExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1730;
            this.mathPrimaryExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathPrimaryExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathPrimaryExp;
    return this;
}

MathPrimaryExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathPrimaryExpContext.prototype.constructor = MathPrimaryExpContext;

MathPrimaryExpContext.prototype.mathAlternativeExp = function() {
    return this.getTypedRuleContext(MathAlternativeExpContext,0);
};

MathPrimaryExpContext.prototype.mathIteratedExp = function() {
    return this.getTypedRuleContext(MathIteratedExpContext,0);
};

MathPrimaryExpContext.prototype.mathLiteralExp = function() {
    return this.getTypedRuleContext(MathLiteralExpContext,0);
};

MathPrimaryExpContext.prototype.mathDotExp = function() {
    return this.getTypedRuleContext(MathDotExpContext,0);
};

MathPrimaryExpContext.prototype.mathOutfixExp = function() {
    return this.getTypedRuleContext(MathOutfixExpContext,0);
};

MathPrimaryExpContext.prototype.mathSetExp = function() {
    return this.getTypedRuleContext(MathSetExpContext,0);
};

MathPrimaryExpContext.prototype.mathTupleExp = function() {
    return this.getTypedRuleContext(MathTupleExpContext,0);
};

MathPrimaryExpContext.prototype.mathLambdaExp = function() {
    return this.getTypedRuleContext(MathLambdaExpContext,0);
};

MathPrimaryExpContext.prototype.mathTaggedCartProdTypeExp = function() {
    return this.getTypedRuleContext(MathTaggedCartProdTypeExpContext,0);
};

MathPrimaryExpContext.prototype.mathNestedExp = function() {
    return this.getTypedRuleContext(MathNestedExpContext,0);
};

MathPrimaryExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathPrimaryExp(this);
	}
};

MathPrimaryExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathPrimaryExp(this);
	}
};




ResolveParser.MathPrimaryExpContext = MathPrimaryExpContext;

ResolveParser.prototype.mathPrimaryExp = function() {

    var localctx = new MathPrimaryExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ResolveParser.RULE_mathPrimaryExp);
    try {
        this.state = 1743;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1733;
            this.mathAlternativeExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1734;
            this.mathIteratedExp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1735;
            this.mathLiteralExp();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1736;
            this.mathDotExp();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1737;
            this.mathOutfixExp();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1738;
            this.mathSetExp();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1739;
            this.mathTupleExp();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1740;
            this.mathLambdaExp();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1741;
            this.mathTaggedCartProdTypeExp();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1742;
            this.mathNestedExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathAlternativeExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathAlternativeExp;
    return this;
}

MathAlternativeExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathAlternativeExpContext.prototype.constructor = MathAlternativeExpContext;

MathAlternativeExpContext.prototype.DBL_LBRACE = function() {
    return this.getToken(ResolveParser.DBL_LBRACE, 0);
};

MathAlternativeExpContext.prototype.DBL_RBRACE = function() {
    return this.getToken(ResolveParser.DBL_RBRACE, 0);
};

MathAlternativeExpContext.prototype.mathAlternativeExpItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathAlternativeExpItemContext);
    } else {
        return this.getTypedRuleContext(MathAlternativeExpItemContext,i);
    }
};

MathAlternativeExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathAlternativeExp(this);
	}
};

MathAlternativeExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathAlternativeExp(this);
	}
};




ResolveParser.MathAlternativeExpContext = MathAlternativeExpContext;

ResolveParser.prototype.mathAlternativeExp = function() {

    var localctx = new MathAlternativeExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ResolveParser.RULE_mathAlternativeExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1745;
        this.match(ResolveParser.DBL_LBRACE);
        this.state = 1747; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1746;
            this.mathAlternativeExpItem();
            this.state = 1749; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.ABS) | (1 << ResolveParser.BIG_CONCAT) | (1 << ResolveParser.BIG_INTERSECT) | (1 << ResolveParser.BIG_PRODUCT) | (1 << ResolveParser.BIG_SUM) | (1 << ResolveParser.BIG_UNION) | (1 << ResolveParser.CARTPROD) | (1 << ResolveParser.COMPLEMENT))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ResolveParser.LAMBDA - 70)) | (1 << (ResolveParser.NOT - 70)) | (1 << (ResolveParser.OP - 70)))) !== 0) || _la===ResolveParser.RECP || _la===ResolveParser.BAR || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (ResolveParser.DBL_BAR - 137)) | (1 << (ResolveParser.DBL_LBRACE - 137)) | (1 << (ResolveParser.HASH - 137)) | (1 << (ResolveParser.LBRACE - 137)) | (1 << (ResolveParser.LL - 137)) | (1 << (ResolveParser.LPAREN - 137)) | (1 << (ResolveParser.LT - 137)) | (1 << (ResolveParser.MINUS - 137)) | (1 << (ResolveParser.PLUS - 137)) | (1 << (ResolveParser.BOOLEAN_LITERAL - 137)) | (1 << (ResolveParser.INTEGER_LITERAL - 137)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (ResolveParser.REAL_LITERAL - 169)) | (1 << (ResolveParser.CHARACTER_LITERAL - 169)) | (1 << (ResolveParser.STRING_LITERAL - 169)) | (1 << (ResolveParser.IDENTIFIER - 169)))) !== 0));
        this.state = 1751;
        this.match(ResolveParser.DBL_RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathAlternativeExpItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathAlternativeExpItem;
    return this;
}

MathAlternativeExpItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathAlternativeExpItemContext.prototype.constructor = MathAlternativeExpItemContext;

MathAlternativeExpItemContext.prototype.mathAddingExp = function() {
    return this.getTypedRuleContext(MathAddingExpContext,0);
};

MathAlternativeExpItemContext.prototype.SEMICOLON = function() {
    return this.getToken(ResolveParser.SEMICOLON, 0);
};

MathAlternativeExpItemContext.prototype.IF = function() {
    return this.getToken(ResolveParser.IF, 0);
};

MathAlternativeExpItemContext.prototype.mathLogicalExp = function() {
    return this.getTypedRuleContext(MathLogicalExpContext,0);
};

MathAlternativeExpItemContext.prototype.OTHERWISE = function() {
    return this.getToken(ResolveParser.OTHERWISE, 0);
};

MathAlternativeExpItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathAlternativeExpItem(this);
	}
};

MathAlternativeExpItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathAlternativeExpItem(this);
	}
};




ResolveParser.MathAlternativeExpItemContext = MathAlternativeExpItemContext;

ResolveParser.prototype.mathAlternativeExpItem = function() {

    var localctx = new MathAlternativeExpItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ResolveParser.RULE_mathAlternativeExpItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1753;
        this.mathAddingExp();
        this.state = 1757;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.IF:
            this.state = 1754;
            this.match(ResolveParser.IF);
            this.state = 1755;
            this.mathLogicalExp();
            break;
        case ResolveParser.OTHERWISE:
            this.state = 1756;
            this.match(ResolveParser.OTHERWISE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1759;
        this.match(ResolveParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathLiteralExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathLiteralExp;
    return this;
}

MathLiteralExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathLiteralExpContext.prototype.constructor = MathLiteralExpContext;


 
MathLiteralExpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MathCharacterExpContext(parser, ctx) {
	MathLiteralExpContext.call(this, parser);
    MathLiteralExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathCharacterExpContext.prototype = Object.create(MathLiteralExpContext.prototype);
MathCharacterExpContext.prototype.constructor = MathCharacterExpContext;

ResolveParser.MathCharacterExpContext = MathCharacterExpContext;

MathCharacterExpContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(ResolveParser.CHARACTER_LITERAL, 0);
};
MathCharacterExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathCharacterExp(this);
	}
};

MathCharacterExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathCharacterExp(this);
	}
};


function MathBooleanExpContext(parser, ctx) {
	MathLiteralExpContext.call(this, parser);
    MathLiteralExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathBooleanExpContext.prototype = Object.create(MathLiteralExpContext.prototype);
MathBooleanExpContext.prototype.constructor = MathBooleanExpContext;

ResolveParser.MathBooleanExpContext = MathBooleanExpContext;

MathBooleanExpContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(ResolveParser.BOOLEAN_LITERAL, 0);
};
MathBooleanExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathBooleanExp(this);
	}
};

MathBooleanExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathBooleanExp(this);
	}
};


function MathRealExpContext(parser, ctx) {
	MathLiteralExpContext.call(this, parser);
    MathLiteralExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathRealExpContext.prototype = Object.create(MathLiteralExpContext.prototype);
MathRealExpContext.prototype.constructor = MathRealExpContext;

ResolveParser.MathRealExpContext = MathRealExpContext;

MathRealExpContext.prototype.REAL_LITERAL = function() {
    return this.getToken(ResolveParser.REAL_LITERAL, 0);
};
MathRealExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathRealExp(this);
	}
};

MathRealExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathRealExp(this);
	}
};


function MathStringExpContext(parser, ctx) {
	MathLiteralExpContext.call(this, parser);
    MathLiteralExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathStringExpContext.prototype = Object.create(MathLiteralExpContext.prototype);
MathStringExpContext.prototype.constructor = MathStringExpContext;

ResolveParser.MathStringExpContext = MathStringExpContext;

MathStringExpContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ResolveParser.STRING_LITERAL, 0);
};
MathStringExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathStringExp(this);
	}
};

MathStringExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathStringExp(this);
	}
};


function MathIntegerExpContext(parser, ctx) {
	MathLiteralExpContext.call(this, parser);
    this.qualifier = null; // Token;
    MathLiteralExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathIntegerExpContext.prototype = Object.create(MathLiteralExpContext.prototype);
MathIntegerExpContext.prototype.constructor = MathIntegerExpContext;

ResolveParser.MathIntegerExpContext = MathIntegerExpContext;

MathIntegerExpContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ResolveParser.INTEGER_LITERAL, 0);
};

MathIntegerExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathIntegerExpContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};
MathIntegerExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathIntegerExp(this);
	}
};

MathIntegerExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathIntegerExp(this);
	}
};



ResolveParser.MathLiteralExpContext = MathLiteralExpContext;

ResolveParser.prototype.mathLiteralExp = function() {

    var localctx = new MathLiteralExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ResolveParser.RULE_mathLiteralExp);
    var _la = 0; // Token type
    try {
        this.state = 1770;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.BOOLEAN_LITERAL:
            localctx = new MathBooleanExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1761;
            this.match(ResolveParser.BOOLEAN_LITERAL);
            break;
        case ResolveParser.INTEGER_LITERAL:
        case ResolveParser.IDENTIFIER:
            localctx = new MathIntegerExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.IDENTIFIER) {
                this.state = 1762;
                localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
                this.state = 1763;
                this.match(ResolveParser.QUALIFIER);
            }

            this.state = 1766;
            this.match(ResolveParser.INTEGER_LITERAL);
            break;
        case ResolveParser.REAL_LITERAL:
            localctx = new MathRealExpContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1767;
            this.match(ResolveParser.REAL_LITERAL);
            break;
        case ResolveParser.CHARACTER_LITERAL:
            localctx = new MathCharacterExpContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1768;
            this.match(ResolveParser.CHARACTER_LITERAL);
            break;
        case ResolveParser.STRING_LITERAL:
            localctx = new MathStringExpContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1769;
            this.match(ResolveParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathDotExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathDotExp;
    return this;
}

MathDotExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathDotExpContext.prototype.constructor = MathDotExpContext;

MathDotExpContext.prototype.mathRecpExp = function() {
    return this.getTypedRuleContext(MathRecpExpContext,0);
};

MathDotExpContext.prototype.mathTypeReceptaclesExp = function() {
    return this.getTypedRuleContext(MathTypeReceptaclesExpContext,0);
};

MathDotExpContext.prototype.mathFunctionApplicationExp = function() {
    return this.getTypedRuleContext(MathFunctionApplicationExpContext,0);
};

MathDotExpContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.DOT);
    } else {
        return this.getToken(ResolveParser.DOT, i);
    }
};


MathDotExpContext.prototype.mathCleanFunctionExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathCleanFunctionExpContext);
    } else {
        return this.getTypedRuleContext(MathCleanFunctionExpContext,i);
    }
};

MathDotExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathDotExp(this);
	}
};

MathDotExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathDotExp(this);
	}
};




ResolveParser.MathDotExpContext = MathDotExpContext;

ResolveParser.prototype.mathDotExp = function() {

    var localctx = new MathDotExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ResolveParser.RULE_mathDotExp);
    var _la = 0; // Token type
    try {
        this.state = 1782;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1772;
            this.mathRecpExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1773;
            this.mathTypeReceptaclesExp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1774;
            this.mathFunctionApplicationExp();
            this.state = 1777; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1775;
                this.match(ResolveParser.DOT);
                this.state = 1776;
                this.mathCleanFunctionExp();
                this.state = 1779; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ResolveParser.DOT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1781;
            this.mathFunctionApplicationExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathFunctionApplicationExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathFunctionApplicationExp;
    return this;
}

MathFunctionApplicationExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathFunctionApplicationExpContext.prototype.constructor = MathFunctionApplicationExpContext;


 
MathFunctionApplicationExpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MathFunctOrVarExpContext(parser, ctx) {
	MathFunctionApplicationExpContext.call(this, parser);
    MathFunctionApplicationExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathFunctOrVarExpContext.prototype = Object.create(MathFunctionApplicationExpContext.prototype);
MathFunctOrVarExpContext.prototype.constructor = MathFunctOrVarExpContext;

ResolveParser.MathFunctOrVarExpContext = MathFunctOrVarExpContext;

MathFunctOrVarExpContext.prototype.mathCleanFunctionExp = function() {
    return this.getTypedRuleContext(MathCleanFunctionExpContext,0);
};
MathFunctOrVarExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathFunctOrVarExp(this);
	}
};

MathFunctOrVarExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathFunctOrVarExp(this);
	}
};


function MathOldExpContext(parser, ctx) {
	MathFunctionApplicationExpContext.call(this, parser);
    MathFunctionApplicationExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathOldExpContext.prototype = Object.create(MathFunctionApplicationExpContext.prototype);
MathOldExpContext.prototype.constructor = MathOldExpContext;

ResolveParser.MathOldExpContext = MathOldExpContext;

MathOldExpContext.prototype.HASH = function() {
    return this.getToken(ResolveParser.HASH, 0);
};

MathOldExpContext.prototype.mathCleanFunctionExp = function() {
    return this.getTypedRuleContext(MathCleanFunctionExpContext,0);
};
MathOldExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathOldExp(this);
	}
};

MathOldExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathOldExp(this);
	}
};



ResolveParser.MathFunctionApplicationExpContext = MathFunctionApplicationExpContext;

ResolveParser.prototype.mathFunctionApplicationExp = function() {

    var localctx = new MathFunctionApplicationExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ResolveParser.RULE_mathFunctionApplicationExp);
    try {
        this.state = 1787;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.HASH:
            localctx = new MathOldExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1784;
            this.match(ResolveParser.HASH);
            this.state = 1785;
            this.mathCleanFunctionExp();
            break;
        case ResolveParser.OP:
        case ResolveParser.IDENTIFIER:
            localctx = new MathFunctOrVarExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1786;
            this.mathCleanFunctionExp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathCleanFunctionExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathCleanFunctionExp;
    return this;
}

MathCleanFunctionExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathCleanFunctionExpContext.prototype.constructor = MathCleanFunctionExpContext;


 
MathCleanFunctionExpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MathOpNameExpContext(parser, ctx) {
	MathCleanFunctionExpContext.call(this, parser);
    this.qualifier = null; // Token;
    this.op = null; // Token;
    MathCleanFunctionExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathOpNameExpContext.prototype = Object.create(MathCleanFunctionExpContext.prototype);
MathOpNameExpContext.prototype.constructor = MathOpNameExpContext;

ResolveParser.MathOpNameExpContext = MathOpNameExpContext;

MathOpNameExpContext.prototype.OP = function() {
    return this.getToken(ResolveParser.OP, 0);
};

MathOpNameExpContext.prototype.infixOp = function() {
    return this.getTypedRuleContext(InfixOpContext,0);
};

MathOpNameExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathOpNameExpContext.prototype.NOT = function() {
    return this.getToken(ResolveParser.NOT, 0);
};

MathOpNameExpContext.prototype.ABS = function() {
    return this.getToken(ResolveParser.ABS, 0);
};

MathOpNameExpContext.prototype.COMPLEMENT = function() {
    return this.getToken(ResolveParser.COMPLEMENT, 0);
};

MathOpNameExpContext.prototype.IDENTIFIER = function() {
    return this.getToken(ResolveParser.IDENTIFIER, 0);
};
MathOpNameExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathOpNameExp(this);
	}
};

MathOpNameExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathOpNameExp(this);
	}
};


function MathFunctionExpContext(parser, ctx) {
	MathCleanFunctionExpContext.call(this, parser);
    this.qualifier = null; // Token;
    this.name = null; // Token;
    MathCleanFunctionExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathFunctionExpContext.prototype = Object.create(MathCleanFunctionExpContext.prototype);
MathFunctionExpContext.prototype.constructor = MathFunctionExpContext;

ResolveParser.MathFunctionExpContext = MathFunctionExpContext;

MathFunctionExpContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

MathFunctionExpContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

MathFunctionExpContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

MathFunctionExpContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


MathFunctionExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathFunctionExpContext.prototype.CARAT = function() {
    return this.getToken(ResolveParser.CARAT, 0);
};

MathFunctionExpContext.prototype.mathNestedExp = function() {
    return this.getTypedRuleContext(MathNestedExpContext,0);
};

MathFunctionExpContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};

MathFunctionExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathFunctionExp(this);
	}
};

MathFunctionExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathFunctionExp(this);
	}
};


function MathTypeRecpExpContext(parser, ctx) {
	MathCleanFunctionExpContext.call(this, parser);
    MathCleanFunctionExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathTypeRecpExpContext.prototype = Object.create(MathCleanFunctionExpContext.prototype);
MathTypeRecpExpContext.prototype.constructor = MathTypeRecpExpContext;

ResolveParser.MathTypeRecpExpContext = MathTypeRecpExpContext;

MathTypeRecpExpContext.prototype.mathTypeReceptaclesExp = function() {
    return this.getTypedRuleContext(MathTypeReceptaclesExpContext,0);
};
MathTypeRecpExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeRecpExp(this);
	}
};

MathTypeRecpExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeRecpExp(this);
	}
};


function MathVarExpContext(parser, ctx) {
	MathCleanFunctionExpContext.call(this, parser);
    MathCleanFunctionExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathVarExpContext.prototype = Object.create(MathCleanFunctionExpContext.prototype);
MathVarExpContext.prototype.constructor = MathVarExpContext;

ResolveParser.MathVarExpContext = MathVarExpContext;

MathVarExpContext.prototype.mathVarNameExp = function() {
    return this.getTypedRuleContext(MathVarNameExpContext,0);
};
MathVarExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathVarExp(this);
	}
};

MathVarExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathVarExp(this);
	}
};



ResolveParser.MathCleanFunctionExpContext = MathCleanFunctionExpContext;

ResolveParser.prototype.mathCleanFunctionExp = function() {

    var localctx = new MathCleanFunctionExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ResolveParser.RULE_mathCleanFunctionExp);
    var _la = 0; // Token type
    try {
        this.state = 1822;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MathFunctionExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1791;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 1789;
                localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
                this.state = 1790;
                this.match(ResolveParser.QUALIFIER);

            }
            this.state = 1793;
            localctx.name = this.match(ResolveParser.IDENTIFIER);
            this.state = 1796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.CARAT) {
                this.state = 1794;
                this.match(ResolveParser.CARAT);
                this.state = 1795;
                this.mathNestedExp();
            }

            this.state = 1798;
            this.match(ResolveParser.LPAREN);
            this.state = 1799;
            this.mathExp();
            this.state = 1804;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ResolveParser.COMMA) {
                this.state = 1800;
                this.match(ResolveParser.COMMA);
                this.state = 1801;
                this.mathExp();
                this.state = 1806;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1807;
            this.match(ResolveParser.RPAREN);
            break;

        case 2:
            localctx = new MathTypeRecpExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1809;
            this.mathTypeReceptaclesExp();
            break;

        case 3:
            localctx = new MathVarExpContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1810;
            this.mathVarNameExp();
            break;

        case 4:
            localctx = new MathOpNameExpContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1811;
            this.match(ResolveParser.OP);
            this.state = 1814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.IDENTIFIER) {
                this.state = 1812;
                localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
                this.state = 1813;
                this.match(ResolveParser.QUALIFIER);
            }

            this.state = 1820;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ResolveParser.AND:
            case ResolveParser.DIV:
            case ResolveParser.IFF:
            case ResolveParser.IMPLIES:
            case ResolveParser.IN:
            case ResolveParser.INTERSECTION:
            case ResolveParser.MOD:
            case ResolveParser.NOT_IN:
            case ResolveParser.NOT_PROP_SUBSET:
            case ResolveParser.NOT_SUBSET:
            case ResolveParser.NOT_SUBSTR:
            case ResolveParser.OR:
            case ResolveParser.PROP_SUBSET:
            case ResolveParser.REM:
            case ResolveParser.SUBSET:
            case ResolveParser.SUBSTR:
            case ResolveParser.UNION:
            case ResolveParser.WITHOUT:
            case ResolveParser.CONCAT:
            case ResolveParser.DIVIDE:
            case ResolveParser.EQL:
            case ResolveParser.EXP:
            case ResolveParser.FUNCARROW:
            case ResolveParser.GT:
            case ResolveParser.GT_EQL:
            case ResolveParser.LT:
            case ResolveParser.LT_EQL:
            case ResolveParser.MINUS:
            case ResolveParser.MULTIPLY:
            case ResolveParser.NOT_EQL:
            case ResolveParser.PLUS:
            case ResolveParser.RANGE:
                this.state = 1816;
                this.infixOp();
                break;
            case ResolveParser.NOT:
                this.state = 1817;
                localctx.op = this.match(ResolveParser.NOT);
                break;
            case ResolveParser.ABS:
                this.state = 1818;
                localctx.op = this.match(ResolveParser.ABS);
                break;
            case ResolveParser.COMPLEMENT:
                this.state = 1819;
                localctx.op = this.match(ResolveParser.COMPLEMENT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathVarNameExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathVarNameExp;
    this.qualifier = null; // Token
    this.name = null; // Token
    return this;
}

MathVarNameExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathVarNameExpContext.prototype.constructor = MathVarNameExpContext;

MathVarNameExpContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


MathVarNameExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

MathVarNameExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathVarNameExp(this);
	}
};

MathVarNameExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathVarNameExp(this);
	}
};




ResolveParser.MathVarNameExpContext = MathVarNameExpContext;

ResolveParser.prototype.mathVarNameExp = function() {

    var localctx = new MathVarNameExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ResolveParser.RULE_mathVarNameExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1826;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
        if(la_===1) {
            this.state = 1824;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 1825;
            this.match(ResolveParser.QUALIFIER);

        }
        this.state = 1828;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathOutfixExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathOutfixExp;
    this.lop = null; // Token
    this.rop = null; // Token
    return this;
}

MathOutfixExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathOutfixExpContext.prototype.constructor = MathOutfixExpContext;

MathOutfixExpContext.prototype.mathInfixExp = function() {
    return this.getTypedRuleContext(MathInfixExpContext,0);
};

MathOutfixExpContext.prototype.LT = function() {
    return this.getToken(ResolveParser.LT, 0);
};

MathOutfixExpContext.prototype.GT = function() {
    return this.getToken(ResolveParser.GT, 0);
};

MathOutfixExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathOutfixExpContext.prototype.LL = function() {
    return this.getToken(ResolveParser.LL, 0);
};

MathOutfixExpContext.prototype.GG = function() {
    return this.getToken(ResolveParser.GG, 0);
};

MathOutfixExpContext.prototype.BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.BAR);
    } else {
        return this.getToken(ResolveParser.BAR, i);
    }
};


MathOutfixExpContext.prototype.DBL_BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.DBL_BAR);
    } else {
        return this.getToken(ResolveParser.DBL_BAR, i);
    }
};


MathOutfixExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathOutfixExp(this);
	}
};

MathOutfixExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathOutfixExp(this);
	}
};




ResolveParser.MathOutfixExpContext = MathOutfixExpContext;

ResolveParser.prototype.mathOutfixExp = function() {

    var localctx = new MathOutfixExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ResolveParser.RULE_mathOutfixExp);
    try {
        this.state = 1846;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1830;
            localctx.lop = this.match(ResolveParser.LT);
            this.state = 1831;
            this.mathInfixExp();
            this.state = 1832;
            localctx.rop = this.match(ResolveParser.GT);
            break;
        case ResolveParser.LL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1834;
            localctx.lop = this.match(ResolveParser.LL);
            this.state = 1835;
            this.mathExp();
            this.state = 1836;
            localctx.rop = this.match(ResolveParser.GG);
            break;
        case ResolveParser.BAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1838;
            localctx.lop = this.match(ResolveParser.BAR);
            this.state = 1839;
            this.mathExp();
            this.state = 1840;
            localctx.rop = this.match(ResolveParser.BAR);
            break;
        case ResolveParser.DBL_BAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1842;
            localctx.lop = this.match(ResolveParser.DBL_BAR);
            this.state = 1843;
            this.mathExp();
            this.state = 1844;
            localctx.rop = this.match(ResolveParser.DBL_BAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathSetExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathSetExp;
    return this;
}

MathSetExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathSetExpContext.prototype.constructor = MathSetExpContext;


 
MathSetExpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MathSetBuilderExpContext(parser, ctx) {
	MathSetExpContext.call(this, parser);
    MathSetExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathSetBuilderExpContext.prototype = Object.create(MathSetExpContext.prototype);
MathSetBuilderExpContext.prototype.constructor = MathSetBuilderExpContext;

ResolveParser.MathSetBuilderExpContext = MathSetBuilderExpContext;

MathSetBuilderExpContext.prototype.LBRACE = function() {
    return this.getToken(ResolveParser.LBRACE, 0);
};

MathSetBuilderExpContext.prototype.mathVariableDecl = function() {
    return this.getTypedRuleContext(MathVariableDeclContext,0);
};

MathSetBuilderExpContext.prototype.BAR = function() {
    return this.getToken(ResolveParser.BAR, 0);
};

MathSetBuilderExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathSetBuilderExpContext.prototype.RBRACE = function() {
    return this.getToken(ResolveParser.RBRACE, 0);
};

MathSetBuilderExpContext.prototype.mathWhereExp = function() {
    return this.getTypedRuleContext(MathWhereExpContext,0);
};
MathSetBuilderExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathSetBuilderExp(this);
	}
};

MathSetBuilderExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathSetBuilderExp(this);
	}
};


function MathSetCollectionExpContext(parser, ctx) {
	MathSetExpContext.call(this, parser);
    MathSetExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathSetCollectionExpContext.prototype = Object.create(MathSetExpContext.prototype);
MathSetCollectionExpContext.prototype.constructor = MathSetCollectionExpContext;

ResolveParser.MathSetCollectionExpContext = MathSetCollectionExpContext;

MathSetCollectionExpContext.prototype.LBRACE = function() {
    return this.getToken(ResolveParser.LBRACE, 0);
};

MathSetCollectionExpContext.prototype.RBRACE = function() {
    return this.getToken(ResolveParser.RBRACE, 0);
};

MathSetCollectionExpContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

MathSetCollectionExpContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};

MathSetCollectionExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathSetCollectionExp(this);
	}
};

MathSetCollectionExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathSetCollectionExp(this);
	}
};



ResolveParser.MathSetExpContext = MathSetExpContext;

ResolveParser.prototype.mathSetExp = function() {

    var localctx = new MathSetExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ResolveParser.RULE_mathSetExp);
    var _la = 0; // Token type
    try {
        this.state = 1869;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MathSetBuilderExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1848;
            this.match(ResolveParser.LBRACE);
            this.state = 1849;
            this.mathVariableDecl();
            this.state = 1851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ResolveParser.WHERE) {
                this.state = 1850;
                this.mathWhereExp();
            }

            this.state = 1853;
            this.match(ResolveParser.BAR);
            this.state = 1854;
            this.mathExp();
            this.state = 1855;
            this.match(ResolveParser.RBRACE);
            break;

        case 2:
            localctx = new MathSetCollectionExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1857;
            this.match(ResolveParser.LBRACE);
            this.state = 1866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ResolveParser.ABS) | (1 << ResolveParser.BIG_CONCAT) | (1 << ResolveParser.BIG_INTERSECT) | (1 << ResolveParser.BIG_PRODUCT) | (1 << ResolveParser.BIG_SUM) | (1 << ResolveParser.BIG_UNION) | (1 << ResolveParser.CARTPROD) | (1 << ResolveParser.COMPLEMENT))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ResolveParser.EXISTS - 42)) | (1 << (ResolveParser.EXISTS_UNIQUE - 42)) | (1 << (ResolveParser.FORALL - 42)) | (1 << (ResolveParser.IF - 42)) | (1 << (ResolveParser.LAMBDA - 42)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (ResolveParser.NOT - 77)) | (1 << (ResolveParser.OP - 77)) | (1 << (ResolveParser.RECP - 77)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (ResolveParser.BAR - 132)) | (1 << (ResolveParser.DBL_BAR - 132)) | (1 << (ResolveParser.DBL_LBRACE - 132)) | (1 << (ResolveParser.HASH - 132)) | (1 << (ResolveParser.LBRACE - 132)) | (1 << (ResolveParser.LL - 132)) | (1 << (ResolveParser.LPAREN - 132)) | (1 << (ResolveParser.LT - 132)) | (1 << (ResolveParser.MINUS - 132)) | (1 << (ResolveParser.PLUS - 132)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (ResolveParser.BOOLEAN_LITERAL - 167)) | (1 << (ResolveParser.INTEGER_LITERAL - 167)) | (1 << (ResolveParser.REAL_LITERAL - 167)) | (1 << (ResolveParser.CHARACTER_LITERAL - 167)) | (1 << (ResolveParser.STRING_LITERAL - 167)) | (1 << (ResolveParser.IDENTIFIER - 167)))) !== 0)) {
                this.state = 1858;
                this.mathExp();
                this.state = 1863;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===ResolveParser.COMMA) {
                    this.state = 1859;
                    this.match(ResolveParser.COMMA);
                    this.state = 1860;
                    this.mathExp();
                    this.state = 1865;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1868;
            this.match(ResolveParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTupleExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTupleExp;
    return this;
}

MathTupleExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTupleExpContext.prototype.constructor = MathTupleExpContext;

MathTupleExpContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

MathTupleExpContext.prototype.mathExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathExpContext);
    } else {
        return this.getTypedRuleContext(MathExpContext,i);
    }
};

MathTupleExpContext.prototype.COMMA = function() {
    return this.getToken(ResolveParser.COMMA, 0);
};

MathTupleExpContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

MathTupleExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTupleExp(this);
	}
};

MathTupleExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTupleExp(this);
	}
};




ResolveParser.MathTupleExpContext = MathTupleExpContext;

ResolveParser.prototype.mathTupleExp = function() {

    var localctx = new MathTupleExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ResolveParser.RULE_mathTupleExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1871;
        this.match(ResolveParser.LPAREN);
        this.state = 1872;
        this.mathExp();
        this.state = 1873;
        this.match(ResolveParser.COMMA);
        this.state = 1874;
        this.mathExp();
        this.state = 1875;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathLambdaExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathLambdaExp;
    return this;
}

MathLambdaExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathLambdaExpContext.prototype.constructor = MathLambdaExpContext;

MathLambdaExpContext.prototype.LAMBDA = function() {
    return this.getToken(ResolveParser.LAMBDA, 0);
};

MathLambdaExpContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.LPAREN);
    } else {
        return this.getToken(ResolveParser.LPAREN, i);
    }
};


MathLambdaExpContext.prototype.mathVariableDeclGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVariableDeclGroupContext);
    } else {
        return this.getTypedRuleContext(MathVariableDeclGroupContext,i);
    }
};

MathLambdaExpContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.RPAREN);
    } else {
        return this.getToken(ResolveParser.RPAREN, i);
    }
};


MathLambdaExpContext.prototype.DOT = function() {
    return this.getToken(ResolveParser.DOT, 0);
};

MathLambdaExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathLambdaExpContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


MathLambdaExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathLambdaExp(this);
	}
};

MathLambdaExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathLambdaExp(this);
	}
};




ResolveParser.MathLambdaExpContext = MathLambdaExpContext;

ResolveParser.prototype.mathLambdaExp = function() {

    var localctx = new MathLambdaExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ResolveParser.RULE_mathLambdaExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1877;
        this.match(ResolveParser.LAMBDA);
        this.state = 1878;
        this.match(ResolveParser.LPAREN);
        this.state = 1879;
        this.mathVariableDeclGroup();
        this.state = 1884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ResolveParser.COMMA) {
            this.state = 1880;
            this.match(ResolveParser.COMMA);
            this.state = 1881;
            this.mathVariableDeclGroup();
            this.state = 1886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1887;
        this.match(ResolveParser.RPAREN);
        this.state = 1888;
        this.match(ResolveParser.DOT);
        this.state = 1889;
        this.match(ResolveParser.LPAREN);
        this.state = 1890;
        this.mathExp();
        this.state = 1891;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTaggedCartProdTypeExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTaggedCartProdTypeExp;
    return this;
}

MathTaggedCartProdTypeExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTaggedCartProdTypeExpContext.prototype.constructor = MathTaggedCartProdTypeExpContext;

MathTaggedCartProdTypeExpContext.prototype.CARTPROD = function() {
    return this.getToken(ResolveParser.CARTPROD, 0);
};

MathTaggedCartProdTypeExpContext.prototype.END = function() {
    return this.getToken(ResolveParser.END, 0);
};

MathTaggedCartProdTypeExpContext.prototype.mathVariableDeclGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MathVariableDeclGroupContext);
    } else {
        return this.getTypedRuleContext(MathVariableDeclGroupContext,i);
    }
};

MathTaggedCartProdTypeExpContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.SEMICOLON);
    } else {
        return this.getToken(ResolveParser.SEMICOLON, i);
    }
};


MathTaggedCartProdTypeExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTaggedCartProdTypeExp(this);
	}
};

MathTaggedCartProdTypeExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTaggedCartProdTypeExp(this);
	}
};




ResolveParser.MathTaggedCartProdTypeExpContext = MathTaggedCartProdTypeExpContext;

ResolveParser.prototype.mathTaggedCartProdTypeExp = function() {

    var localctx = new MathTaggedCartProdTypeExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ResolveParser.RULE_mathTaggedCartProdTypeExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1893;
        this.match(ResolveParser.CARTPROD);
        this.state = 1897; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1894;
            this.mathVariableDeclGroup();
            this.state = 1895;
            this.match(ResolveParser.SEMICOLON);
            this.state = 1899; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ResolveParser.IDENTIFIER);
        this.state = 1901;
        this.match(ResolveParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathRecpExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathRecpExp;
    return this;
}

MathRecpExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathRecpExpContext.prototype.constructor = MathRecpExpContext;

MathRecpExpContext.prototype.RECP = function() {
    return this.getToken(ResolveParser.RECP, 0);
};

MathRecpExpContext.prototype.DOT = function() {
    return this.getToken(ResolveParser.DOT, 0);
};

MathRecpExpContext.prototype.mathVarNameExp = function() {
    return this.getTypedRuleContext(MathVarNameExpContext,0);
};

MathRecpExpContext.prototype.mathDotExp = function() {
    return this.getTypedRuleContext(MathDotExpContext,0);
};

MathRecpExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathRecpExp(this);
	}
};

MathRecpExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathRecpExp(this);
	}
};




ResolveParser.MathRecpExpContext = MathRecpExpContext;

ResolveParser.prototype.mathRecpExp = function() {

    var localctx = new MathRecpExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ResolveParser.RULE_mathRecpExp);
    try {
        this.state = 1909;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1903;
            this.match(ResolveParser.RECP);
            this.state = 1904;
            this.match(ResolveParser.DOT);
            this.state = 1905;
            this.mathVarNameExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1906;
            this.match(ResolveParser.RECP);
            this.state = 1907;
            this.match(ResolveParser.DOT);
            this.state = 1908;
            this.mathDotExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathTypeReceptaclesExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathTypeReceptaclesExp;
    return this;
}

MathTypeReceptaclesExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathTypeReceptaclesExpContext.prototype.constructor = MathTypeReceptaclesExpContext;

MathTypeReceptaclesExpContext.prototype.mathVarNameExp = function() {
    return this.getTypedRuleContext(MathVarNameExpContext,0);
};

MathTypeReceptaclesExpContext.prototype.DOT = function() {
    return this.getToken(ResolveParser.DOT, 0);
};

MathTypeReceptaclesExpContext.prototype.RECEPTACLES = function() {
    return this.getToken(ResolveParser.RECEPTACLES, 0);
};

MathTypeReceptaclesExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathTypeReceptaclesExp(this);
	}
};

MathTypeReceptaclesExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathTypeReceptaclesExp(this);
	}
};




ResolveParser.MathTypeReceptaclesExpContext = MathTypeReceptaclesExpContext;

ResolveParser.prototype.mathTypeReceptaclesExp = function() {

    var localctx = new MathTypeReceptaclesExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ResolveParser.RULE_mathTypeReceptaclesExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1911;
        this.mathVarNameExp();
        this.state = 1912;
        this.match(ResolveParser.DOT);
        this.state = 1913;
        this.match(ResolveParser.RECEPTACLES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathNestedExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathNestedExp;
    return this;
}

MathNestedExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathNestedExpContext.prototype.constructor = MathNestedExpContext;

MathNestedExpContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

MathNestedExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathNestedExpContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

MathNestedExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathNestedExp(this);
	}
};

MathNestedExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathNestedExp(this);
	}
};




ResolveParser.MathNestedExpContext = MathNestedExpContext;

ResolveParser.prototype.mathNestedExp = function() {

    var localctx = new MathNestedExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ResolveParser.RULE_mathNestedExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1915;
        this.match(ResolveParser.LPAREN);
        this.state = 1916;
        this.mathExp();
        this.state = 1917;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathWhereExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_mathWhereExp;
    return this;
}

MathWhereExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathWhereExpContext.prototype.constructor = MathWhereExpContext;

MathWhereExpContext.prototype.WHERE = function() {
    return this.getToken(ResolveParser.WHERE, 0);
};

MathWhereExpContext.prototype.mathExp = function() {
    return this.getTypedRuleContext(MathExpContext,0);
};

MathWhereExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterMathWhereExp(this);
	}
};

MathWhereExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitMathWhereExp(this);
	}
};




ResolveParser.MathWhereExpContext = MathWhereExpContext;

ResolveParser.prototype.mathWhereExp = function() {

    var localctx = new MathWhereExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ResolveParser.RULE_mathWhereExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1919;
        this.match(ResolveParser.WHERE);
        this.state = 1920;
        this.mathExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progExp;
    return this;
}

ProgExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgExpContext.prototype.constructor = ProgExpContext;


 
ProgExpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ProgExponentialExpContext(parser, ctx) {
	ProgExpContext.call(this, parser);
    ProgExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgExponentialExpContext.prototype = Object.create(ProgExpContext.prototype);
ProgExponentialExpContext.prototype.constructor = ProgExponentialExpContext;

ResolveParser.ProgExponentialExpContext = ProgExponentialExpContext;

ProgExponentialExpContext.prototype.progExponential = function() {
    return this.getTypedRuleContext(ProgExponentialContext,0);
};
ProgExponentialExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgExponentialExp(this);
	}
};

ProgExponentialExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgExponentialExp(this);
	}
};


function ProgApplicationExpContext(parser, ctx) {
	ProgExpContext.call(this, parser);
    this.op = null; // Token;
    ProgExpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgApplicationExpContext.prototype = Object.create(ProgExpContext.prototype);
ProgApplicationExpContext.prototype.constructor = ProgApplicationExpContext;

ResolveParser.ProgApplicationExpContext = ProgApplicationExpContext;

ProgApplicationExpContext.prototype.progExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgExpContext);
    } else {
        return this.getTypedRuleContext(ProgExpContext,i);
    }
};

ProgApplicationExpContext.prototype.AND = function() {
    return this.getToken(ResolveParser.AND, 0);
};

ProgApplicationExpContext.prototype.OR = function() {
    return this.getToken(ResolveParser.OR, 0);
};

ProgApplicationExpContext.prototype.EQL = function() {
    return this.getToken(ResolveParser.EQL, 0);
};

ProgApplicationExpContext.prototype.NOT_EQL = function() {
    return this.getToken(ResolveParser.NOT_EQL, 0);
};

ProgApplicationExpContext.prototype.LT_EQL = function() {
    return this.getToken(ResolveParser.LT_EQL, 0);
};

ProgApplicationExpContext.prototype.GT_EQL = function() {
    return this.getToken(ResolveParser.GT_EQL, 0);
};

ProgApplicationExpContext.prototype.GT = function() {
    return this.getToken(ResolveParser.GT, 0);
};

ProgApplicationExpContext.prototype.LT = function() {
    return this.getToken(ResolveParser.LT, 0);
};

ProgApplicationExpContext.prototype.PLUS = function() {
    return this.getToken(ResolveParser.PLUS, 0);
};

ProgApplicationExpContext.prototype.MINUS = function() {
    return this.getToken(ResolveParser.MINUS, 0);
};

ProgApplicationExpContext.prototype.MULTIPLY = function() {
    return this.getToken(ResolveParser.MULTIPLY, 0);
};

ProgApplicationExpContext.prototype.DIVIDE = function() {
    return this.getToken(ResolveParser.DIVIDE, 0);
};

ProgApplicationExpContext.prototype.MOD = function() {
    return this.getToken(ResolveParser.MOD, 0);
};

ProgApplicationExpContext.prototype.REM = function() {
    return this.getToken(ResolveParser.REM, 0);
};

ProgApplicationExpContext.prototype.DIV = function() {
    return this.getToken(ResolveParser.DIV, 0);
};
ProgApplicationExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgApplicationExp(this);
	}
};

ProgApplicationExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgApplicationExp(this);
	}
};



ResolveParser.prototype.progExp = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ProgExpContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 288;
    this.enterRecursionRule(localctx, 288, ResolveParser.RULE_progExp, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ProgExponentialExpContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1923;
        this.progExponential();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1930;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,229,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ProgApplicationExpContext(this, new ProgExpContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, ResolveParser.RULE_progExp);
                this.state = 1925;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1926;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===ResolveParser.AND || _la===ResolveParser.DIV || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ResolveParser.MOD - 74)) | (1 << (ResolveParser.OR - 74)) | (1 << (ResolveParser.REM - 74)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ResolveParser.DIVIDE - 140)) | (1 << (ResolveParser.EQL - 140)) | (1 << (ResolveParser.GT - 140)) | (1 << (ResolveParser.GT_EQL - 140)) | (1 << (ResolveParser.LT - 140)) | (1 << (ResolveParser.LT_EQL - 140)) | (1 << (ResolveParser.MINUS - 140)) | (1 << (ResolveParser.MULTIPLY - 140)) | (1 << (ResolveParser.NOT_EQL - 140)) | (1 << (ResolveParser.PLUS - 140)))) !== 0))) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1927;
                this.progExp(3); 
            }
            this.state = 1932;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,229,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ProgExponentialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progExponential;
    return this;
}

ProgExponentialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgExponentialContext.prototype.constructor = ProgExponentialContext;

ProgExponentialContext.prototype.progUnary = function() {
    return this.getTypedRuleContext(ProgUnaryContext,0);
};

ProgExponentialContext.prototype.EXP = function() {
    return this.getToken(ResolveParser.EXP, 0);
};

ProgExponentialContext.prototype.progExponential = function() {
    return this.getTypedRuleContext(ProgExponentialContext,0);
};

ProgExponentialContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgExponential(this);
	}
};

ProgExponentialContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgExponential(this);
	}
};




ResolveParser.ProgExponentialContext = ProgExponentialContext;

ResolveParser.prototype.progExponential = function() {

    var localctx = new ProgExponentialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ResolveParser.RULE_progExponential);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1933;
        this.progUnary();
        this.state = 1936;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
        if(la_===1) {
            this.state = 1934;
            this.match(ResolveParser.EXP);
            this.state = 1935;
            this.progExponential();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgUnaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progUnary;
    return this;
}

ProgUnaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgUnaryContext.prototype.constructor = ProgUnaryContext;


 
ProgUnaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ProgPrimaryExpContext(parser, ctx) {
	ProgUnaryContext.call(this, parser);
    ProgUnaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgPrimaryExpContext.prototype = Object.create(ProgUnaryContext.prototype);
ProgPrimaryExpContext.prototype.constructor = ProgPrimaryExpContext;

ResolveParser.ProgPrimaryExpContext = ProgPrimaryExpContext;

ProgPrimaryExpContext.prototype.progPrimary = function() {
    return this.getTypedRuleContext(ProgPrimaryContext,0);
};
ProgPrimaryExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgPrimaryExp(this);
	}
};

ProgPrimaryExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgPrimaryExp(this);
	}
};


function ProgUnaryExpContext(parser, ctx) {
	ProgUnaryContext.call(this, parser);
    this.op = null; // Token;
    ProgUnaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgUnaryExpContext.prototype = Object.create(ProgUnaryContext.prototype);
ProgUnaryExpContext.prototype.constructor = ProgUnaryExpContext;

ResolveParser.ProgUnaryExpContext = ProgUnaryExpContext;

ProgUnaryExpContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

ProgUnaryExpContext.prototype.NOT = function() {
    return this.getToken(ResolveParser.NOT, 0);
};

ProgUnaryExpContext.prototype.MINUS = function() {
    return this.getToken(ResolveParser.MINUS, 0);
};
ProgUnaryExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgUnaryExp(this);
	}
};

ProgUnaryExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgUnaryExp(this);
	}
};



ResolveParser.ProgUnaryContext = ProgUnaryContext;

ResolveParser.prototype.progUnary = function() {

    var localctx = new ProgUnaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ResolveParser.RULE_progUnary);
    var _la = 0; // Token type
    try {
        this.state = 1941;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.NOT:
        case ResolveParser.MINUS:
            localctx = new ProgUnaryExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1938;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ResolveParser.NOT || _la===ResolveParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1939;
            this.progExp(0);
            break;
        case ResolveParser.LPAREN:
        case ResolveParser.INTEGER_LITERAL:
        case ResolveParser.CHARACTER_LITERAL:
        case ResolveParser.STRING_LITERAL:
        case ResolveParser.IDENTIFIER:
            localctx = new ProgPrimaryExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1940;
            this.progPrimary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progPrimary;
    return this;
}

ProgPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgPrimaryContext.prototype.constructor = ProgPrimaryContext;


 
ProgPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ProgLiteralExpContext(parser, ctx) {
	ProgPrimaryContext.call(this, parser);
    ProgPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgLiteralExpContext.prototype = Object.create(ProgPrimaryContext.prototype);
ProgLiteralExpContext.prototype.constructor = ProgLiteralExpContext;

ResolveParser.ProgLiteralExpContext = ProgLiteralExpContext;

ProgLiteralExpContext.prototype.progLiteral = function() {
    return this.getTypedRuleContext(ProgLiteralContext,0);
};
ProgLiteralExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgLiteralExp(this);
	}
};

ProgLiteralExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgLiteralExp(this);
	}
};


function ProgFunctionExpContext(parser, ctx) {
	ProgPrimaryContext.call(this, parser);
    ProgPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgFunctionExpContext.prototype = Object.create(ProgPrimaryContext.prototype);
ProgFunctionExpContext.prototype.constructor = ProgFunctionExpContext;

ResolveParser.ProgFunctionExpContext = ProgFunctionExpContext;

ProgFunctionExpContext.prototype.progParamExp = function() {
    return this.getTypedRuleContext(ProgParamExpContext,0);
};
ProgFunctionExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgFunctionExp(this);
	}
};

ProgFunctionExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgFunctionExp(this);
	}
};


function ProgVarExpContext(parser, ctx) {
	ProgPrimaryContext.call(this, parser);
    ProgPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgVarExpContext.prototype = Object.create(ProgPrimaryContext.prototype);
ProgVarExpContext.prototype.constructor = ProgVarExpContext;

ResolveParser.ProgVarExpContext = ProgVarExpContext;

ProgVarExpContext.prototype.progVariableExp = function() {
    return this.getTypedRuleContext(ProgVariableExpContext,0);
};
ProgVarExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVarExp(this);
	}
};

ProgVarExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVarExp(this);
	}
};


function ProgNestedExpContext(parser, ctx) {
	ProgPrimaryContext.call(this, parser);
    ProgPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgNestedExpContext.prototype = Object.create(ProgPrimaryContext.prototype);
ProgNestedExpContext.prototype.constructor = ProgNestedExpContext;

ResolveParser.ProgNestedExpContext = ProgNestedExpContext;

ProgNestedExpContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

ProgNestedExpContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

ProgNestedExpContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};
ProgNestedExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgNestedExp(this);
	}
};

ProgNestedExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgNestedExp(this);
	}
};



ResolveParser.ProgPrimaryContext = ProgPrimaryContext;

ResolveParser.prototype.progPrimary = function() {

    var localctx = new ProgPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ResolveParser.RULE_progPrimary);
    try {
        this.state = 1950;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ProgLiteralExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1943;
            this.progLiteral();
            break;

        case 2:
            localctx = new ProgFunctionExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1944;
            this.progParamExp();
            break;

        case 3:
            localctx = new ProgVarExpContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1945;
            this.progVariableExp();
            break;

        case 4:
            localctx = new ProgNestedExpContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1946;
            this.match(ResolveParser.LPAREN);
            this.state = 1947;
            this.progExp(0);
            this.state = 1948;
            this.match(ResolveParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progLiteral;
    return this;
}

ProgLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgLiteralContext.prototype.constructor = ProgLiteralContext;


 
ProgLiteralContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ProgIntegerExpContext(parser, ctx) {
	ProgLiteralContext.call(this, parser);
    ProgLiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgIntegerExpContext.prototype = Object.create(ProgLiteralContext.prototype);
ProgIntegerExpContext.prototype.constructor = ProgIntegerExpContext;

ResolveParser.ProgIntegerExpContext = ProgIntegerExpContext;

ProgIntegerExpContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ResolveParser.INTEGER_LITERAL, 0);
};
ProgIntegerExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgIntegerExp(this);
	}
};

ProgIntegerExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgIntegerExp(this);
	}
};


function ProgCharacterExpContext(parser, ctx) {
	ProgLiteralContext.call(this, parser);
    ProgLiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgCharacterExpContext.prototype = Object.create(ProgLiteralContext.prototype);
ProgCharacterExpContext.prototype.constructor = ProgCharacterExpContext;

ResolveParser.ProgCharacterExpContext = ProgCharacterExpContext;

ProgCharacterExpContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(ResolveParser.CHARACTER_LITERAL, 0);
};
ProgCharacterExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgCharacterExp(this);
	}
};

ProgCharacterExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgCharacterExp(this);
	}
};


function ProgStringExpContext(parser, ctx) {
	ProgLiteralContext.call(this, parser);
    ProgLiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgStringExpContext.prototype = Object.create(ProgLiteralContext.prototype);
ProgStringExpContext.prototype.constructor = ProgStringExpContext;

ResolveParser.ProgStringExpContext = ProgStringExpContext;

ProgStringExpContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ResolveParser.STRING_LITERAL, 0);
};
ProgStringExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgStringExp(this);
	}
};

ProgStringExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgStringExp(this);
	}
};



ResolveParser.ProgLiteralContext = ProgLiteralContext;

ResolveParser.prototype.progLiteral = function() {

    var localctx = new ProgLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ResolveParser.RULE_progLiteral);
    try {
        this.state = 1955;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ResolveParser.INTEGER_LITERAL:
            localctx = new ProgIntegerExpContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1952;
            this.match(ResolveParser.INTEGER_LITERAL);
            break;
        case ResolveParser.CHARACTER_LITERAL:
            localctx = new ProgCharacterExpContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1953;
            this.match(ResolveParser.CHARACTER_LITERAL);
            break;
        case ResolveParser.STRING_LITERAL:
            localctx = new ProgStringExpContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1954;
            this.match(ResolveParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgParamExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progParamExp;
    this.qualifier = null; // Token
    this.name = null; // Token
    return this;
}

ProgParamExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgParamExpContext.prototype.constructor = ProgParamExpContext;

ProgParamExpContext.prototype.LPAREN = function() {
    return this.getToken(ResolveParser.LPAREN, 0);
};

ProgParamExpContext.prototype.RPAREN = function() {
    return this.getToken(ResolveParser.RPAREN, 0);
};

ProgParamExpContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ProgParamExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

ProgParamExpContext.prototype.progExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgExpContext);
    } else {
        return this.getTypedRuleContext(ProgExpContext,i);
    }
};

ProgParamExpContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.COMMA);
    } else {
        return this.getToken(ResolveParser.COMMA, i);
    }
};


ProgParamExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgParamExp(this);
	}
};

ProgParamExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgParamExp(this);
	}
};




ResolveParser.ProgParamExpContext = ProgParamExpContext;

ResolveParser.prototype.progParamExp = function() {

    var localctx = new ProgParamExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ResolveParser.RULE_progParamExp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
        if(la_===1) {
            this.state = 1957;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 1958;
            this.match(ResolveParser.QUALIFIER);

        }
        this.state = 1961;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
        this.state = 1962;
        this.match(ResolveParser.LPAREN);
        this.state = 1971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ResolveParser.NOT || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (ResolveParser.LPAREN - 151)) | (1 << (ResolveParser.MINUS - 151)) | (1 << (ResolveParser.INTEGER_LITERAL - 151)) | (1 << (ResolveParser.CHARACTER_LITERAL - 151)) | (1 << (ResolveParser.STRING_LITERAL - 151)) | (1 << (ResolveParser.IDENTIFIER - 151)))) !== 0)) {
            this.state = 1963;
            this.progExp(0);
            this.state = 1968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ResolveParser.COMMA) {
                this.state = 1964;
                this.match(ResolveParser.COMMA);
                this.state = 1965;
                this.progExp(0);
                this.state = 1970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1973;
        this.match(ResolveParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgVariableExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progVariableExp;
    return this;
}

ProgVariableExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgVariableExpContext.prototype.constructor = ProgVariableExpContext;

ProgVariableExpContext.prototype.progVarDotExp = function() {
    return this.getTypedRuleContext(ProgVarDotExpContext,0);
};

ProgVariableExpContext.prototype.progVarDotArrayExp = function() {
    return this.getTypedRuleContext(ProgVarDotArrayExpContext,0);
};

ProgVariableExpContext.prototype.progVarArrayExp = function() {
    return this.getTypedRuleContext(ProgVarArrayExpContext,0);
};

ProgVariableExpContext.prototype.progVarNameExp = function() {
    return this.getTypedRuleContext(ProgVarNameExpContext,0);
};

ProgVariableExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVariableExp(this);
	}
};

ProgVariableExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVariableExp(this);
	}
};




ResolveParser.ProgVariableExpContext = ProgVariableExpContext;

ResolveParser.prototype.progVariableExp = function() {

    var localctx = new ProgVariableExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, ResolveParser.RULE_progVariableExp);
    try {
        this.state = 1979;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1975;
            this.progVarDotExp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1976;
            this.progVarDotArrayExp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1977;
            this.progVarArrayExp();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1978;
            this.progVarNameExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgVarDotExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progVarDotExp;
    return this;
}

ProgVarDotExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgVarDotExpContext.prototype.constructor = ProgVarDotExpContext;

ProgVarDotExpContext.prototype.progVarNameExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgVarNameExpContext);
    } else {
        return this.getTypedRuleContext(ProgVarNameExpContext,i);
    }
};

ProgVarDotExpContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.DOT);
    } else {
        return this.getToken(ResolveParser.DOT, i);
    }
};


ProgVarDotExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVarDotExp(this);
	}
};

ProgVarDotExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVarDotExp(this);
	}
};




ResolveParser.ProgVarDotExpContext = ProgVarDotExpContext;

ResolveParser.prototype.progVarDotExp = function() {

    var localctx = new ProgVarDotExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, ResolveParser.RULE_progVarDotExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1981;
        this.progVarNameExp();
        this.state = 1984; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1982;
        		this.match(ResolveParser.DOT);
        		this.state = 1983;
        		this.progVarNameExp();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1986; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,238, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgVarDotArrayExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progVarDotArrayExp;
    return this;
}

ProgVarDotArrayExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgVarDotArrayExpContext.prototype.constructor = ProgVarDotArrayExpContext;

ProgVarDotArrayExpContext.prototype.progVarNameExp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgVarNameExpContext);
    } else {
        return this.getTypedRuleContext(ProgVarNameExpContext,i);
    }
};

ProgVarDotArrayExpContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.DOT);
    } else {
        return this.getToken(ResolveParser.DOT, i);
    }
};


ProgVarDotArrayExpContext.prototype.progVarArrayExp = function() {
    return this.getTypedRuleContext(ProgVarArrayExpContext,0);
};

ProgVarDotArrayExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVarDotArrayExp(this);
	}
};

ProgVarDotArrayExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVarDotArrayExp(this);
	}
};




ResolveParser.ProgVarDotArrayExpContext = ProgVarDotArrayExpContext;

ResolveParser.prototype.progVarDotArrayExp = function() {

    var localctx = new ProgVarDotArrayExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, ResolveParser.RULE_progVarDotArrayExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1988;
        this.progVarNameExp();
        this.state = 1993;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1989;
                this.match(ResolveParser.DOT);
                this.state = 1990;
                this.progVarNameExp(); 
            }
            this.state = 1995;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
        }

        this.state = 1996;
        this.match(ResolveParser.DOT);
        this.state = 1997;
        this.progVarArrayExp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgVarArrayExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progVarArrayExp;
    return this;
}

ProgVarArrayExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgVarArrayExpContext.prototype.constructor = ProgVarArrayExpContext;

ProgVarArrayExpContext.prototype.progVarNameExp = function() {
    return this.getTypedRuleContext(ProgVarNameExpContext,0);
};

ProgVarArrayExpContext.prototype.LSQBRACK = function() {
    return this.getToken(ResolveParser.LSQBRACK, 0);
};

ProgVarArrayExpContext.prototype.progExp = function() {
    return this.getTypedRuleContext(ProgExpContext,0);
};

ProgVarArrayExpContext.prototype.RSQBRACK = function() {
    return this.getToken(ResolveParser.RSQBRACK, 0);
};

ProgVarArrayExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVarArrayExp(this);
	}
};

ProgVarArrayExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVarArrayExp(this);
	}
};




ResolveParser.ProgVarArrayExpContext = ProgVarArrayExpContext;

ResolveParser.prototype.progVarArrayExp = function() {

    var localctx = new ProgVarArrayExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, ResolveParser.RULE_progVarArrayExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1999;
        this.progVarNameExp();
        this.state = 2000;
        this.match(ResolveParser.LSQBRACK);
        this.state = 2001;
        this.progExp(0);
        this.state = 2002;
        this.match(ResolveParser.RSQBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgVarNameExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ResolveParser.RULE_progVarNameExp;
    this.qualifier = null; // Token
    this.name = null; // Token
    return this;
}

ProgVarNameExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgVarNameExpContext.prototype.constructor = ProgVarNameExpContext;

ProgVarNameExpContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ResolveParser.IDENTIFIER);
    } else {
        return this.getToken(ResolveParser.IDENTIFIER, i);
    }
};


ProgVarNameExpContext.prototype.QUALIFIER = function() {
    return this.getToken(ResolveParser.QUALIFIER, 0);
};

ProgVarNameExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.enterProgVarNameExp(this);
	}
};

ProgVarNameExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ResolveParserListener ) {
        listener.exitProgVarNameExp(this);
	}
};




ResolveParser.ProgVarNameExpContext = ProgVarNameExpContext;

ResolveParser.prototype.progVarNameExp = function() {

    var localctx = new ProgVarNameExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, ResolveParser.RULE_progVarNameExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2006;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        if(la_===1) {
            this.state = 2004;
            localctx.qualifier = this.match(ResolveParser.IDENTIFIER);
            this.state = 2005;
            this.match(ResolveParser.QUALIFIER);

        }
        this.state = 2008;
        localctx.name = this.match(ResolveParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ResolveParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 144:
			return this.progExp_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ResolveParser.prototype.progExp_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ResolveParser = ResolveParser;
